#!/usr/bin/env python3

import argparse
import decimal
import json
import os
from pathlib import Path
import subprocess
import tempfile


def parse_options():
    parser = argparse.ArgumentParser(
                    prog = 'histogram',
                    description = 'Plot a histogram in gnuplot')

    parser.add_argument('--title', default='Histogram')
    parser.add_argument('--xlabel', default='value')
    parser.add_argument('--xdivisor', type=decimal.Decimal, default=1)
    parser.add_argument('--bins', type=int, default=100)
    parser.add_argument('--cutoff', type=decimal.Decimal)
    parser.add_argument('--floor', type=decimal.Decimal)

    parser.add_argument('file', nargs='+')

    return parser.parse_args()


def parse_path(path):
    column = 1
    path, *rest = path.split('@')
    if len(rest):
        assert len(rest) == 1
        column = int(rest[0])
    return path, column


options = parse_options()


min_value = None
max_value = None
for path in options.file:
    path, column = parse_path(path)
    with open(path) as file:
        for line in file:
            line = line.strip()
            if len(line) == 0 or line[0] == '#':
                continue
            try:
                value = decimal.Decimal(line.split()[column - 1])
            except IndexError:
                continue
            if options.cutoff is not None and value > options.cutoff:
                continue
            if options.floor is not None and value < options.floor:
                continue
            if min_value is None or value < min_value:
                min_value = value
            if max_value is None or value > max_value:
                max_value = value

work_dir = Path(tempfile.mkdtemp())
print('Using working directory: ', work_dir)

for path in options.file:
    output_path = Path(path)
    path, column = parse_path(path)
    path = Path(path)
    bins = [0] * options.bins

    with open(path) as file:
        for line in file:
            line = line.strip()
            if len(line) == 0 or line[0] == '#':
                continue
            try:
                value = decimal.Decimal(line.split()[column - 1])
            except IndexError:
                continue
            if options.cutoff is not None and value > options.cutoff:
                continue
            if options.floor is not None and value < options.floor:
                continue
            bin_index = int((value - min_value) / (max_value + 1 - min_value) * len(bins))
            bins[bin_index] += 1

    with open(work_dir/output_path.name, 'w') as file:
        for i, bucket in enumerate(bins):
            x = min_value + i * (max_value - min_value) / len(bins)
            y = bucket
            print(x, y, file=file)

def plot_command(path, xdivisor):
    file_path = Path(path).name
    title = json.dumps(file_path.replace('@', '\\@'))
    file_path = json.dumps(file_path)
    return f'{file_path} using ($1/{xdivisor}):2 title {title}'

script = f"""
set title '{options.title}'
set xlabel '{options.xlabel}'
set ylabel 'Frequency'
plot {", ".join(plot_command(path, options.xdivisor) for path in options.file)}
"""

(work_dir/'histogram.plt').write_text(script)

os.chdir(work_dir)
subprocess.run(['gnuplot', '--persist', 'histogram.plt', '-'])
