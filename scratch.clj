(translation_unit /home/david/src/nginx-datadog/scratch/scratch.cpp
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h
  (namespace std
    (typedef_decl size_t)
    (typedef_decl ptrdiff_t)
    (typedef_decl nullptr_t
      (cxx_null_ptr_literal_expr)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h
  (namespace std
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h
    (namespace __cxx11))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h
  (namespace __gnu_cxx
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++config.h
    (namespace __cxx11))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/functexcept.h
  (namespace std
    (visibility_attr default)
    (function_decl __throw_bad_exception)
    (function_decl __throw_bad_alloc)
    (function_decl __throw_bad_array_new_length)
    (function_decl __throw_bad_cast)
    (function_decl __throw_bad_typeid)
    (function_decl __throw_logic_error
      (parm_decl))
    (function_decl __throw_domain_error
      (parm_decl))
    (function_decl __throw_invalid_argument
      (parm_decl))
    (function_decl __throw_length_error
      (parm_decl))
    (function_decl __throw_out_of_range
      (parm_decl))
    (function_decl __throw_out_of_range_fmt
      (parm_decl))
    (function_decl __throw_runtime_error
      (parm_decl))
    (function_decl __throw_range_error
      (parm_decl))
    (function_decl __throw_overflow_error
      (parm_decl))
    (function_decl __throw_underflow_error
      (parm_decl))
    (function_decl __throw_ios_failure
      (parm_decl))
    (function_decl __throw_ios_failure
      (parm_decl)
      (parm_decl))
    (function_decl __throw_system_error
      (parm_decl))
    (function_decl __throw_future_error
      (parm_decl))
    (function_decl __throw_bad_function_call))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/cpp_type_traits.h
  (namespace std
    (visibility_attr default)
    (struct_decl __true_type)
    (struct_decl __false_type)
    (class_template __truth_type
      (template_non_type_parameter)
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __truth_type
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __traitor
      (template_type_parameter _Sp)
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (binary_operator
            (call_expr
              (decl_ref_expr
                (type_ref _Sp)))
            (call_expr
              (decl_ref_expr
                (type_ref _Tp))))))
      (typedef_decl __type
        (template_ref __truth_type)
        (decl_ref_expr __value)))
    (class_template __are_same
      (template_type_parameter)
      (template_type_parameter)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (class_template_partial_specialization __are_same
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_void
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __is_void
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_integer
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal ...)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_integer
      (enum_decl
        (enum_constant_decl __value
          (integer_literal ...)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_floating
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __is_floating
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_floating
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_floating
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_pointer
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (class_template_partial_specialization __is_pointer
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_arithmetic
      (template_type_parameter _Tp)
      (cxx_base_specifier __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
        (template_ref __traitor)
        (template_ref __is_integer)
        (type_ref _Tp)
        (template_ref __is_floating)
        (type_ref _Tp)))
    (class_template __is_scalar
      (template_type_parameter _Tp)
      (cxx_base_specifier __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
        (template_ref __traitor)
        (template_ref __is_arithmetic)
        (type_ref _Tp)
        (template_ref __is_pointer)
        (type_ref _Tp)))
    (class_template __is_char
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __is_char
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_char
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template __is_byte
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (struct_decl __is_byte
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_byte
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (struct_decl __is_byte
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (class_template iterator_traits
      (template_type_parameter))
    (class_template __is_nonvolatile_trivially_copyable
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nonvolatile_trivially_copyable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0))))
    (class_template __memcpyable
      (template_type_parameter _OutputIter)
      (template_type_parameter _InputIter)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0))))
    (class_template_partial_specialization __memcpyable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __is_nonvolatile_trivially_copyable<_Tp>
        (template_ref __is_nonvolatile_trivially_copyable)
        (type_ref _Tp)))
    (class_template_partial_specialization __memcpyable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __is_nonvolatile_trivially_copyable<_Tp>
        (template_ref __is_nonvolatile_trivially_copyable)
        (type_ref _Tp)))
    (class_template __memcmpable
      (template_type_parameter _Iter1)
      (template_type_parameter _Iter2)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0))))
    (class_template_partial_specialization __memcmpable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __is_nonvolatile_trivially_copyable<_Tp>
        (template_ref __is_nonvolatile_trivially_copyable)
        (type_ref _Tp)))
    (class_template_partial_specialization __memcmpable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __is_nonvolatile_trivially_copyable<_Tp>
        (template_ref __is_nonvolatile_trivially_copyable)
        (type_ref _Tp)))
    (class_template_partial_specialization __memcmpable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __is_nonvolatile_trivially_copyable<_Tp>
        (template_ref __is_nonvolatile_trivially_copyable)
        (type_ref _Tp)))
    (class_template __is_memcmp_ordered
      (template_type_parameter _Tp)
      (template_non_type_parameter _TreatAsBytes
        (decl_ref_expr
          (template_ref __is_byte)
          (type_ref _Tp)))
      (var_decl __value
        (binary_operator
          (call_expr
            (type_ref _Tp)
            (unary_operator
              (integer_literal 1)))
          (call_expr
            (type_ref _Tp)
            (integer_literal 1)))))
    (class_template_partial_specialization __is_memcmp_ordered
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (var_decl __value
        (cxx_bool_literal_expr)))
    (class_template __is_memcmp_ordered_with
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_non_type_parameter
        (binary_operator
          (cxx_unary_expr
            (type_ref _Tp))
          (cxx_unary_expr
            (type_ref _Up))))
      (var_decl __value
        (binary_operator
          (decl_ref_expr
            (template_ref __is_memcmp_ordered)
            (type_ref _Tp))
          (decl_ref_expr
            (template_ref __is_memcmp_ordered)
            (type_ref _Up)))))
    (class_template_partial_specialization __is_memcmp_ordered_with
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (type_ref _Up)
      (cxx_bool_literal_expr)
      (var_decl __value
        (cxx_bool_literal_expr)))
    (class_template __is_move_iterator
      (template_type_parameter _Tp)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 0)))
      (typedef_decl __type
        (type_ref struct std::__false_type)))
    (function_template __miter_base
      (template_type_parameter _Iterator)
      (type_ref _Iterator)
      (parm_decl __it
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __it)))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/type_traits.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (class_template __enable_if
      (template_non_type_parameter)
      (template_type_parameter))
    (class_template_partial_specialization __enable_if
      (template_type_parameter _Tp)
      (cxx_bool_literal_expr)
      (type_ref _Tp)
      (typedef_decl __type
        (type_ref _Tp)))
    (class_template __conditional_type
      (template_non_type_parameter _Cond)
      (template_type_parameter _Iftrue)
      (template_type_parameter _Iffalse)
      (typedef_decl __type
        (type_ref _Iftrue)))
    (class_template_partial_specialization __conditional_type
      (template_type_parameter _Iftrue)
      (template_type_parameter _Iffalse)
      (cxx_bool_literal_expr)
      (type_ref _Iftrue)
      (type_ref _Iffalse)
      (typedef_decl __type
        (type_ref _Iffalse)))
    (class_template __add_unsigned
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (typedef_decl __if_type
        (template_ref __enable_if)
        (decl_ref_expr
          (namespace_ref std)
          (template_ref __is_integer)
          (type_ref _Tp))
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl __type
        (type_ref __gnu_cxx::__add_unsigned::__if_type)))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned
      (typedef_decl __type))
    (struct_decl __add_unsigned)
    (struct_decl __add_unsigned)
    (class_template __remove_unsigned
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (typedef_decl __if_type
        (template_ref __enable_if)
        (decl_ref_expr
          (namespace_ref std)
          (template_ref __is_integer)
          (type_ref _Tp))
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl __type
        (type_ref __gnu_cxx::__remove_unsigned::__if_type)))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned
      (typedef_decl __type))
    (struct_decl __remove_unsigned)
    (struct_decl __remove_unsigned)
    (function_template __is_null_pointer
      (template_type_parameter _Type)
      (parm_decl __ptr
        (type_ref _Type))
      (compound_stmt
        (return_stmt
          (binary_operator
            (decl_ref_expr __ptr)
            (integer_literal 0)))))
    (function_template __is_null_pointer
      (template_type_parameter _Type)
      (parm_decl
        (type_ref _Type))
      (compound_stmt
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_decl __is_null_pointer
      (parm_decl
        (namespace_ref std)
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (cxx_bool_literal_expr))))
    (class_template __promote
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (namespace_ref std)
          (template_ref __is_integer)
          (type_ref _Tp)))
      (typedef_decl __type))
    (class_template_partial_specialization __promote
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr))
    (struct_decl __promote
      (typedef_decl __type))
    (struct_decl __promote
      (typedef_decl __type))
    (struct_decl __promote
      (typedef_decl __type))
    (class_template __promote_2
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_type_parameter _Tp2
        (template_ref __promote)
        (type_ref _Tp))
      (template_type_parameter _Up2
        (template_ref __promote)
        (type_ref _Up))
      (typedef_decl __type
        (paren_expr
          (binary_operator
            (call_expr
              (type_ref _Tp2))
            (call_expr
              (type_ref _Up2))))))
    (class_template __promote_3
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_type_parameter _Vp)
      (template_type_parameter _Tp2
        (template_ref __promote)
        (type_ref _Tp))
      (template_type_parameter _Up2
        (template_ref __promote)
        (type_ref _Up))
      (template_type_parameter _Vp2
        (template_ref __promote)
        (type_ref _Vp))
      (typedef_decl __type
        (paren_expr
          (binary_operator
            (binary_operator
              (call_expr
                (type_ref _Tp2))
              (call_expr
                (type_ref _Up2)))
            (call_expr
              (type_ref _Vp2))))))
    (class_template __promote_4
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_type_parameter _Vp)
      (template_type_parameter _Wp)
      (template_type_parameter _Tp2
        (template_ref __promote)
        (type_ref _Tp))
      (template_type_parameter _Up2
        (template_ref __promote)
        (type_ref _Up))
      (template_type_parameter _Vp2
        (template_ref __promote)
        (type_ref _Vp))
      (template_type_parameter _Wp2
        (template_ref __promote)
        (type_ref _Wp))
      (typedef_decl __type
        (paren_expr
          (binary_operator
            (binary_operator
              (binary_operator
                (call_expr
                  (type_ref _Tp2))
                (call_expr
                  (type_ref _Up2)))
              (call_expr
                (type_ref _Vp2)))
            (call_expr
              (type_ref _Wp2)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/numeric_traits.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (class_template __is_integer_nonstrict
      (template_type_parameter _Tp)
      (cxx_base_specifier std::__is_integer<_Tp>
        (namespace_ref std)
        (template_ref __is_integer)
        (type_ref _Tp))
      (using_declaration __value
        (namespace_ref std)
        (template_ref __is_integer)
        (type_ref _Tp))
      (enum_decl
        (enum_constant_decl __width
          (conditional_operator
            (decl_ref_expr
              (overloaded_decl_ref __value))
            (binary_operator
              (cxx_unary_expr
                (type_ref _Tp))
              (integer_literal))
            (integer_literal 0)))))
    (class_template __numeric_traits_integer
      (template_type_parameter _Value)
      (static_assert
        (decl_ref_expr
          (template_ref __is_integer_nonstrict)
          (type_ref _Value))
        (string_literal "invalid specialization"))
      (var_decl __is_signed
        (binary_operator
          (cstyle_cast_expr
            (type_ref _Value)
            (paren_expr
              (unary_operator
                (integer_literal 1))))
          (integer_literal 0)))
      (var_decl __digits
        (binary_operator
          (decl_ref_expr
            (template_ref __is_integer_nonstrict)
            (type_ref _Value))
          (decl_ref_expr __is_signed)))
      (var_decl __max
        (type_ref _Value)
        (conditional_operator
          (decl_ref_expr __is_signed)
          (paren_expr
            (binary_operator
              (paren_expr
                (binary_operator
                  (paren_expr
                    (binary_operator
                      (paren_expr
                        (binary_operator
                          (cstyle_cast_expr
                            (type_ref _Value)
                            (integer_literal 1))
                          (paren_expr
                            (binary_operator
                              (decl_ref_expr __digits)
                              (integer_literal 1)))))
                      (integer_literal 1)))
                  (integer_literal 1)))
              (integer_literal 1)))
          (unary_operator
            (cstyle_cast_expr
              (type_ref _Value)
              (integer_literal 0)))))
      (var_decl __min
        (type_ref _Value)
        (conditional_operator
          (decl_ref_expr __is_signed)
          (binary_operator
            (unary_operator
              (decl_ref_expr __max))
            (integer_literal 1))
          (cstyle_cast_expr
            (type_ref _Value)
            (integer_literal 0)))))
    (var_decl __min
      (template_type_parameter _Value)
      (type_ref _Value)
      (template_ref __numeric_traits_integer)
      (type_ref _Value))
    (var_decl __max
      (template_type_parameter _Value)
      (type_ref _Value)
      (template_ref __numeric_traits_integer)
      (type_ref _Value))
    (var_decl __is_signed
      (template_type_parameter _Value)
      (template_ref __numeric_traits_integer)
      (type_ref _Value))
    (var_decl __digits
      (template_type_parameter _Value)
      (template_ref __numeric_traits_integer)
      (type_ref _Value))
    (type_alias_template_decl __int_traits
      (template_type_parameter _Tp)
      (type_alias_decl __int_traits
        (template_ref __numeric_traits_integer)
        (type_ref _Tp)))
    (class_template __numeric_traits_floating
      (template_type_parameter _Value)
      (var_decl __max_digits10
        (paren_expr
          (binary_operator
            (integer_literal ...)
            (binary_operator
              (binary_operator
                (paren_expr
                  (conditional_operator
                    (decl_ref_expr
                      (namespace_ref std)
                      (template_ref __are_same)
                      (type_ref _Value))
                    (integer_literal 24)
                    (conditional_operator
                      (decl_ref_expr
                        (namespace_ref std)
                        (template_ref __are_same)
                        (type_ref _Value))
                      (integer_literal 53)
                      (integer_literal 64))))
                (integer_literal ...))
              (integer_literal ...)))))
      (var_decl __is_signed
        (cxx_bool_literal_expr))
      (var_decl __digits10
        (paren_expr
          (conditional_operator
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __are_same)
              (type_ref _Value))
            (integer_literal 6)
            (conditional_operator
              (decl_ref_expr
                (namespace_ref std)
                (template_ref __are_same)
                (type_ref _Value))
              (integer_literal 15)
              (integer_literal 18)))))
      (var_decl __max_exponent10
        (paren_expr
          (conditional_operator
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __are_same)
              (type_ref _Value))
            (integer_literal 38)
            (conditional_operator
              (decl_ref_expr
                (namespace_ref std)
                (template_ref __are_same)
                (type_ref _Value))
              (integer_literal 308)
              (integer_literal 4932))))))
    (var_decl __max_digits10
      (template_type_parameter _Value)
      (template_ref __numeric_traits_floating)
      (type_ref _Value))
    (var_decl __is_signed
      (template_type_parameter _Value)
      (template_ref __numeric_traits_floating)
      (type_ref _Value))
    (var_decl __digits10
      (template_type_parameter _Value)
      (template_ref __numeric_traits_floating)
      (type_ref _Value))
    (var_decl __max_exponent10
      (template_type_parameter _Value)
      (template_ref __numeric_traits_floating)
      (type_ref _Value))
    (class_template __numeric_traits
      (template_type_parameter _Value)
      (cxx_base_specifier __numeric_traits_integer<_Value>
        (template_ref __numeric_traits_integer)
        (type_ref _Value)))
    (struct_decl __numeric_traits
      (cxx_base_specifier __numeric_traits_floating<float>
        (template_ref __numeric_traits_floating)))
    (struct_decl __numeric_traits
      (cxx_base_specifier __numeric_traits_floating<double>
        (template_ref __numeric_traits_floating)))
    (struct_decl __numeric_traits
      (cxx_base_specifier __numeric_traits_floating<long double>
        (template_ref __numeric_traits_floating)))
    (var_decl __is_signed
      (template_ref __numeric_traits_integer))
    (var_decl __digits
      (template_ref __numeric_traits_integer))
    (var_decl __max
      (template_ref __numeric_traits_integer))
    (var_decl __is_signed
      (template_ref __numeric_traits_integer))
    (var_decl __digits
      (template_ref __numeric_traits_integer))
    (var_decl __max
      (template_ref __numeric_traits_integer))
    (var_decl __is_signed
      (template_ref __numeric_traits_integer))
    (var_decl __digits
      (template_ref __numeric_traits_integer))
    (var_decl __max
      (template_ref __numeric_traits_integer))
    (var_decl __is_signed
      (template_ref __numeric_traits_integer))
    (var_decl __digits
      (template_ref __numeric_traits_integer))
    (var_decl __max
      (template_ref __numeric_traits_integer)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h
  (namespace std
    (visibility_attr default)
    (function_template __addressof
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __r
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr __builtin_addressof
            (decl_ref_expr __builtin_addressof)
            (decl_ref_expr __r))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits
  (namespace std
    (visibility_attr default)
    (class_template tuple
      (template_type_parameter _Elements))
    (class_template reference_wrapper
      (template_type_parameter _Tp))
    (class_template integral_constant
      (template_type_parameter _Tp)
      (template_non_type_parameter __v
        (type_ref _Tp))
      (var_decl value
        (type_ref _Tp)
        (decl_ref_expr __v))
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl type
        (template_ref integral_constant)
        (type_ref _Tp)
        (decl_ref_expr __v))
      (conversion_function operator type-parameter-0-0
        (type_ref std::integral_constant::value_type)
        (compound_stmt
          (return_stmt
            (decl_ref_expr value))))
      (cxx_method operator()
        (type_ref std::integral_constant::value_type)
        (compound_stmt
          (return_stmt
            (decl_ref_expr value)))))
    (var_decl value
      (template_type_parameter _Tp)
      (template_non_type_parameter __v
        (type_ref _Tp))
      (type_ref _Tp)
      (template_ref integral_constant)
      (type_ref _Tp)
      (decl_ref_expr __v))
    (type_alias_decl true_type
      (template_ref integral_constant)
      (cxx_bool_literal_expr))
    (type_alias_decl false_type
      (template_ref integral_constant)
      (cxx_bool_literal_expr))
    (type_alias_template_decl __bool_constant
      (template_non_type_parameter __v)
      (type_alias_decl __bool_constant
        (template_ref integral_constant)
        (decl_ref_expr __v)))
    (class_template conditional
      (template_non_type_parameter)
      (template_type_parameter)
      (template_type_parameter))
    (class_template __type_identity
      (template_type_parameter _Type)
      (type_alias_decl type
        (type_ref _Type)))
    (type_alias_template_decl __type_identity_t
      (template_type_parameter _Tp)
      (type_alias_decl __type_identity_t
        (template_ref __type_identity)
        (type_ref _Tp)))
    (class_template __or_
      (template_type_parameter))
    (struct_decl __or_
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __or_
      (template_type_parameter _B1)
      (type_ref _B1)
      (cxx_base_specifier _B1
        (type_ref _B1)))
    (class_template_partial_specialization __or_
      (template_type_parameter _B1)
      (template_type_parameter _B2)
      (type_ref _B1)
      (type_ref _B2)
      (cxx_base_specifier conditional<_B1::value, _B1, _B2>::type
        (template_ref conditional)
        (decl_ref_expr
          (type_ref _B1))
        (type_ref _B1)
        (type_ref _B2)))
    (class_template_partial_specialization __or_
      (template_type_parameter _B1)
      (template_type_parameter _B2)
      (template_type_parameter _B3)
      (template_type_parameter _Bn)
      (type_ref _B1)
      (type_ref _B2)
      (type_ref _B3)
      (type_ref _Bn)
      (cxx_base_specifier conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...> >::type
        (template_ref conditional)
        (decl_ref_expr
          (type_ref _B1))
        (type_ref _B1)
        (template_ref __or_)
        (type_ref _B2)
        (type_ref _B3)
        (type_ref _Bn)))
    (class_template __and_
      (template_type_parameter))
    (struct_decl __and_
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization __and_
      (template_type_parameter _B1)
      (type_ref _B1)
      (cxx_base_specifier _B1
        (type_ref _B1)))
    (class_template_partial_specialization __and_
      (template_type_parameter _B1)
      (template_type_parameter _B2)
      (type_ref _B1)
      (type_ref _B2)
      (cxx_base_specifier conditional<_B1::value, _B2, _B1>::type
        (template_ref conditional)
        (decl_ref_expr
          (type_ref _B1))
        (type_ref _B2)
        (type_ref _B1)))
    (class_template_partial_specialization __and_
      (template_type_parameter _B1)
      (template_type_parameter _B2)
      (template_type_parameter _B3)
      (template_type_parameter _Bn)
      (type_ref _B1)
      (type_ref _B2)
      (type_ref _B3)
      (type_ref _Bn)
      (cxx_base_specifier conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
        (template_ref conditional)
        (decl_ref_expr
          (type_ref _B1))
        (template_ref __and_)
        (type_ref _B2)
        (type_ref _B3)
        (type_ref _Bn)
        (type_ref _B1)))
    (class_template __not_
      (template_type_parameter _Pp)
      (cxx_base_specifier __bool_constant<!_Bool(_Pp::value)>
        (template_ref __bool_constant)
        (unary_operator
          (call_expr
            (decl_ref_expr
              (type_ref _Pp))))))
    (class_template is_reference
      (template_type_parameter))
    (class_template is_function
      (template_type_parameter))
    (class_template is_void
      (template_type_parameter))
    (class_template remove_cv
      (template_type_parameter))
    (class_template is_const
      (template_type_parameter))
    (class_template __is_array_unknown_bounds
      (template_type_parameter))
    (function_template __is_complete_or_unbounded
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (type_ref std::size_t)
        (cxx_unary_expr
          (type_ref _Tp)))
      (type_ref std::true_type)
      (parm_decl
        (template_ref __type_identity)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (init_list_expr))))
    (function_template __is_complete_or_unbounded
      (template_type_parameter _TypeIdentity)
      (template_type_parameter _NestedType
        (type_ref _TypeIdentity))
      (template_ref __or_)
      (template_ref is_reference)
      (type_ref _NestedType)
      (template_ref is_function)
      (type_ref _NestedType)
      (template_ref is_void)
      (type_ref _NestedType)
      (template_ref __is_array_unknown_bounds)
      (type_ref _NestedType)
      (parm_decl
        (type_ref _TypeIdentity))
      (compound_stmt
        (return_stmt
          (init_list_expr))))
    (class_template __success_type
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (struct_decl __failure_type)
    (type_alias_template_decl __remove_cv_t
      (template_type_parameter _Tp)
      (type_alias_decl __remove_cv_t
        (template_ref remove_cv)
        (type_ref _Tp)))
    (class_template __is_void_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (struct_decl __is_void_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_void
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_void_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_void_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template __is_integral_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_integral_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_integral
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_integral_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_integral_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template __is_floating_point_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (struct_decl __is_floating_point_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_floating_point_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_floating_point_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (struct_decl __is_floating_point_helper
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_floating_point
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_floating_point_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_floating_point_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template is_array
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_array
      (template_type_parameter _Tp)
      (template_non_type_parameter _Size
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Size)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization is_array
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template __is_pointer_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_pointer_helper
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_pointer_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_pointer_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template is_lvalue_reference
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_lvalue_reference
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_rvalue_reference
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_rvalue_reference
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template __is_member_object_pointer_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_member_object_pointer_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Cp)
      (type_ref _Tp)
      (cxx_base_specifier __not_<is_function<_Tp> >::type
        (template_ref __not_)
        (template_ref is_function)
        (type_ref _Tp)))
    (class_template is_member_object_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_member_object_pointer_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_member_object_pointer_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template __is_member_function_pointer_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_member_function_pointer_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Cp)
      (type_ref _Tp)
      (cxx_base_specifier is_function<_Tp>::type
        (template_ref is_function)
        (type_ref _Tp)))
    (class_template is_member_function_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_member_function_pointer_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_member_function_pointer_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template is_enum
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_enum(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_union
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_union(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_class
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_class(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_function
      (template_type_parameter _Tp)
      (cxx_base_specifier __bool_constant<!is_const<const _Tp>::value>
        (template_ref __bool_constant)
        (unary_operator
          (decl_ref_expr
            (template_ref is_const)
            (type_ref _Tp)))))
    (class_template_partial_specialization is_function
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_function
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template __is_null_pointer_helper
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (struct_decl __is_null_pointer_helper
      (namespace_ref std)
      (type_ref std::nullptr_t)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_null_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_null_pointer_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_null_pointer_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template __is_nullptr_t
      (template_type_parameter _Tp)
      (cxx_base_specifier is_null_pointer<_Tp>
        (template_ref is_null_pointer)
        (type_ref _Tp)))
    (class_template is_reference
      (template_type_parameter _Tp)
      (cxx_base_specifier __or_<is_lvalue_reference<_Tp>, is_rvalue_reference<_Tp> >::type
        (template_ref __or_)
        (template_ref is_lvalue_reference)
        (type_ref _Tp)
        (template_ref is_rvalue_reference)
        (type_ref _Tp)))
    (class_template is_arithmetic
      (template_type_parameter _Tp)
      (cxx_base_specifier __or_<is_integral<_Tp>, is_floating_point<_Tp> >::type
        (template_ref __or_)
        (template_ref is_integral)
        (type_ref _Tp)
        (template_ref is_floating_point)
        (type_ref _Tp)))
    (class_template is_fundamental
      (template_type_parameter _Tp)
      (cxx_base_specifier __or_<is_arithmetic<_Tp>, is_void<_Tp>, is_null_pointer<_Tp> >::type
        (template_ref __or_)
        (template_ref is_arithmetic)
        (type_ref _Tp)
        (template_ref is_void)
        (type_ref _Tp)
        (template_ref is_null_pointer)
        (type_ref _Tp)))
    (class_template is_object
      (template_type_parameter _Tp)
      (cxx_base_specifier __not_<__or_<is_function<_Tp>, is_reference<_Tp>, is_void<_Tp> > >::type
        (template_ref __not_)
        (template_ref __or_)
        (template_ref is_function)
        (type_ref _Tp)
        (template_ref is_reference)
        (type_ref _Tp)
        (template_ref is_void)
        (type_ref _Tp)))
    (class_template is_member_pointer
      (template_type_parameter))
    (class_template is_scalar
      (template_type_parameter _Tp)
      (cxx_base_specifier __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>, is_member_pointer<_Tp>, is_null_pointer<_Tp> >::type
        (template_ref __or_)
        (template_ref is_arithmetic)
        (type_ref _Tp)
        (template_ref is_enum)
        (type_ref _Tp)
        (template_ref is_pointer)
        (type_ref _Tp)
        (template_ref is_member_pointer)
        (type_ref _Tp)
        (template_ref is_null_pointer)
        (type_ref _Tp)))
    (class_template is_compound
      (template_type_parameter _Tp)
      (cxx_base_specifier __not_<is_fundamental<_Tp> >::type
        (template_ref __not_)
        (template_ref is_fundamental)
        (type_ref _Tp)))
    (class_template __is_member_pointer_helper
      (template_type_parameter _Tp)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_member_pointer_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Cp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_member_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_member_pointer_helper<__remove_cv_t<_Tp> >::type
        (template_ref __is_member_pointer_helper)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template is_same
      (template_type_parameter)
      (template_type_parameter))
    (type_alias_template_decl __is_one_of
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_alias_decl __is_one_of
        (template_ref __or_)
        (template_ref is_same)
        (type_ref _Tp)
        (type_ref _Types)))
    (type_alias_template_decl __is_signed_integer
      (template_type_parameter _Tp)
      (type_alias_decl __is_signed_integer
        (template_ref __is_one_of)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (type_alias_template_decl __is_unsigned_integer
      (template_type_parameter _Tp)
      (type_alias_decl __is_unsigned_integer
        (template_ref __is_one_of)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (type_alias_template_decl __is_standard_integer
      (template_type_parameter _Tp)
      (type_alias_decl __is_standard_integer
        (template_ref __or_)
        (template_ref __is_signed_integer)
        (type_ref _Tp)
        (template_ref __is_unsigned_integer)
        (type_ref _Tp)))
    (type_alias_template_decl __void_t
      (template_type_parameter)
      (type_alias_decl __void_t))
    (class_template __is_referenceable
      (template_type_parameter _Tp)
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_referenceable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (template_ref __void_t)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_const
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_const
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_volatile
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization is_volatile
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_trivial
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_trivial(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_trivially_copyable
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_trivially_copyable(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_standard_layout
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_standard_layout(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_pod
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_pod(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_literal_type
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_literal(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_empty
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_empty(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_polymorphic
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_polymorphic(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_final
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_final(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template is_abstract
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __is_abstract(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp)))
    (class_template __is_signed_helper
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_arithmetic)
          (type_ref _Tp)))
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_signed_helper
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier integral_constant<_Bool, _Tp(-1) < _Tp(0)>
        (template_ref integral_constant)
        (binary_operator
          (call_expr
            (type_ref _Tp)
            (unary_operator
              (integer_literal 1)))
          (call_expr
            (type_ref _Tp)
            (integer_literal 0)))))
    (class_template is_signed
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_signed_helper<_Tp>::type
        (template_ref __is_signed_helper)
        (type_ref _Tp)))
    (class_template is_unsigned
      (template_type_parameter _Tp)
      (cxx_base_specifier __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp> > >
        (template_ref __and_)
        (template_ref is_arithmetic)
        (type_ref _Tp)
        (template_ref __not_)
        (template_ref is_signed)
        (type_ref _Tp)))
    (function_template __declval
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (type_ref _Tp))
      (type_ref _Up)
      (parm_decl))
    (function_template __declval
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl))
    (function_template declval
      (template_type_parameter _Tp)
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref __declval)
          (type_ref _Tp))
        (integer_literal 0)))
    (class_template extent
      (template_type_parameter)
      (template_non_type_parameter
        (integer_literal 0)))
    (class_template remove_all_extents
      (template_type_parameter))
    (class_template __is_array_known_bounds
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, (extent<_Tp>::value > 0)>
        (template_ref integral_constant)
        (paren_expr
          (binary_operator
            (decl_ref_expr
              (template_ref extent)
              (type_ref _Tp))
            (integer_literal 0)))))
    (class_template __is_array_unknown_bounds
      (template_type_parameter _Tp)
      (cxx_base_specifier __and_<is_array<_Tp>, __not_<extent<_Tp> > >
        (template_ref __and_)
        (template_ref is_array)
        (type_ref _Tp)
        (template_ref __not_)
        (template_ref extent)
        (type_ref _Tp)))
    (struct_decl __do_is_destructible_impl
      (function_template __test
        (template_type_parameter _Tp)
        (template_type_parameter
          (call_expr
            (member_ref_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (type_ref _Tp))))
        (type_ref std::true_type)
        (parm_decl))
      (function_template __test
        (template_type_parameter)
        (type_ref std::false_type)))
    (class_template __is_destructible_impl
      (template_type_parameter _Tp)
      (cxx_base_specifier struct std::__do_is_destructible_impl
        (type_ref struct std::__do_is_destructible_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template __is_destructible_safe
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_void)
          (type_ref _Tp)
          (template_ref __is_array_unknown_bounds)
          (type_ref _Tp)
          (template_ref is_function)
          (type_ref _Tp)))
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_reference)
          (type_ref _Tp)
          (template_ref is_scalar)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_destructible_impl<typename remove_all_extents<_Tp>::type>::type
        (template_ref __is_destructible_impl)
        (template_ref remove_all_extents)
        (type_ref _Tp)))
    (class_template_partial_specialization __is_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_destructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_destructible_safe<_Tp>::type
        (template_ref __is_destructible_safe)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (struct_decl __do_is_nt_destructible_impl
      (function_template __test
        (template_type_parameter _Tp)
        (template_ref __bool_constant)
        (cxx_unary_expr
          (call_expr
            (member_ref_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (type_ref _Tp))))
        (parm_decl))
      (function_template __test
        (template_type_parameter)
        (type_ref std::false_type)))
    (class_template __is_nt_destructible_impl
      (template_type_parameter _Tp)
      (cxx_base_specifier struct std::__do_is_nt_destructible_impl
        (type_ref struct std::__do_is_nt_destructible_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template __is_nt_destructible_safe
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_void)
          (type_ref _Tp)
          (template_ref __is_array_unknown_bounds)
          (type_ref _Tp)
          (template_ref is_function)
          (type_ref _Tp)))
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_reference)
          (type_ref _Tp)
          (template_ref is_scalar)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nt_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_nt_destructible_impl<typename remove_all_extents<_Tp>::type>::type
        (template_ref __is_nt_destructible_impl)
        (template_ref remove_all_extents)
        (type_ref _Tp)))
    (class_template_partial_specialization __is_nt_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_nt_destructible_safe
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template is_nothrow_destructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nt_destructible_safe<_Tp>::type
        (template_ref __is_nt_destructible_safe)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_constructible_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (cxx_base_specifier __bool_constant<__is_constructible(_Tp, _Args...)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Args)))
    (class_template is_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (cxx_base_specifier __is_constructible_impl<_Tp, _Args...>
        (template_ref __is_constructible_impl)
        (type_ref _Tp)
        (type_ref _Args))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_default_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_constructible_impl<_Tp>::type
        (template_ref __is_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_copy_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_constructible_impl<_Tp, const _Tp &>
        (template_ref __is_constructible_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_copy_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_copy_constructible_impl<_Tp>
        (template_ref __is_copy_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_move_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_constructible_impl<_Tp, _Tp &&>
        (template_ref __is_constructible_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_move_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_move_constructible_impl<_Tp>
        (template_ref __is_move_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (type_alias_template_decl __is_nothrow_constructible_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (type_alias_decl __is_nothrow_constructible_impl
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Args)))
    (class_template is_nothrow_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (cxx_base_specifier __is_nothrow_constructible_impl<_Tp, _Args...>::type
        (template_ref __is_nothrow_constructible_impl)
        (type_ref _Tp)
        (type_ref _Args))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_nothrow_default_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __bool_constant<__is_nothrow_constructible(_Tp)>
        (template_ref __bool_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_nothrow_copy_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nothrow_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_nothrow_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_nothrow_constructible_impl<_Tp, const _Tp &>
        (template_ref __is_nothrow_constructible_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_nothrow_copy_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nothrow_copy_constructible_impl<_Tp>::type
        (template_ref __is_nothrow_copy_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_nothrow_move_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nothrow_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_nothrow_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_nothrow_constructible_impl<_Tp, _Tp &&>
        (template_ref __is_nothrow_constructible_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_nothrow_move_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nothrow_move_constructible_impl<_Tp>::type
        (template_ref __is_nothrow_move_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_assignable
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __bool_constant<__is_assignable(_Tp, _Up)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Up))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_copy_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __bool_constant<__is_assignable(_Tp &, const _Tp &)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_copy_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_copy_assignable_impl<_Tp>::type
        (template_ref __is_copy_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_move_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __bool_constant<__is_assignable(_Tp &, _Tp &&)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_move_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_move_assignable_impl<_Tp>::type
        (template_ref __is_move_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (type_alias_template_decl __is_nothrow_assignable_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_alias_decl __is_nothrow_assignable_impl
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Up)))
    (class_template is_nothrow_assignable
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __is_nothrow_assignable_impl<_Tp, _Up>
        (template_ref __is_nothrow_assignable_impl)
        (type_ref _Tp)
        (type_ref _Up))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_nt_copy_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nt_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_nt_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_nothrow_assignable_impl<_Tp &, const _Tp &>
        (template_ref __is_nothrow_assignable_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_nothrow_copy_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nt_copy_assignable_impl<_Tp>
        (template_ref __is_nt_copy_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_nt_move_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_nt_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_nt_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __is_nothrow_assignable_impl<_Tp &, _Tp &&>
        (template_ref __is_nothrow_assignable_impl)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_nothrow_move_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nt_move_assignable_impl<_Tp>
        (template_ref __is_nt_move_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_trivially_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (cxx_base_specifier __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Args))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_trivially_default_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __bool_constant<__is_trivially_constructible(_Tp)>
        (template_ref __bool_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (struct_decl __do_is_implicitly_default_constructible_impl
      (function_template __helper
        (template_type_parameter _Tp)
        (parm_decl
          (type_ref _Tp)))
      (function_template __test
        (template_type_parameter _Tp)
        (type_ref std::true_type)
        (parm_decl
          (type_ref _Tp))
        (parm_decl
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __helper)
              (type_ref _Tp))
            (init_list_expr))
          (integer_literal 0)))
      (cxx_method __test
        (type_ref std::false_type)))
    (class_template __is_implicitly_default_constructible_impl
      (template_type_parameter _Tp)
      (cxx_base_specifier struct std::__do_is_implicitly_default_constructible_impl
        (type_ref struct std::__do_is_implicitly_default_constructible_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref declval)
              (type_ref _Tp))))))
    (class_template __is_implicitly_default_constructible_safe
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_implicitly_default_constructible_impl<_Tp>::type
        (template_ref __is_implicitly_default_constructible_impl)
        (type_ref _Tp)))
    (class_template __is_implicitly_default_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __and_<__is_constructible_impl<_Tp>, __is_implicitly_default_constructible_safe<_Tp> >
        (template_ref __and_)
        (template_ref __is_constructible_impl)
        (type_ref _Tp)
        (template_ref __is_implicitly_default_constructible_safe)
        (type_ref _Tp)))
    (class_template __is_trivially_copy_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_trivially_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_trivially_copy_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __and_<__is_copy_constructible_impl<_Tp>, integral_constant<_Bool, __is_trivially_constructible(_Tp, const _Tp &)> >
        (template_ref __and_)
        (template_ref __is_copy_constructible_impl)
        (type_ref _Tp)
        (template_ref integral_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_trivially_copy_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_trivially_copy_constructible_impl<_Tp>
        (template_ref __is_trivially_copy_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_trivially_move_constructible_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_trivially_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_trivially_move_constructible_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __and_<__is_move_constructible_impl<_Tp>, integral_constant<_Bool, __is_trivially_constructible(_Tp, _Tp &&)> >
        (template_ref __and_)
        (template_ref __is_move_constructible_impl)
        (type_ref _Tp)
        (template_ref integral_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_trivially_move_constructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_trivially_move_constructible_impl<_Tp>
        (template_ref __is_trivially_move_constructible_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_trivially_assignable
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __bool_constant<__is_trivially_assignable(_Tp, _Up)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Up))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_trivially_copy_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_trivially_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_trivially_copy_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __bool_constant<__is_trivially_assignable(_Tp &, const _Tp &)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_trivially_copy_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_trivially_copy_assignable_impl<_Tp>
        (template_ref __is_trivially_copy_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template __is_trivially_move_assignable_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp))))
    (class_template_partial_specialization __is_trivially_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_trivially_move_assignable_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __bool_constant<__is_trivially_assignable(_Tp &, _Tp &&)>
        (template_ref __bool_constant)
        (type_ref _Tp)
        (type_ref _Tp)))
    (class_template is_trivially_move_assignable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_trivially_move_assignable_impl<_Tp>
        (template_ref __is_trivially_move_assignable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_trivially_destructible
      (template_type_parameter _Tp)
      (cxx_base_specifier __and_<__is_destructible_safe<_Tp>, __bool_constant<__has_trivial_destructor(_Tp)> >
        (template_ref __and_)
        (template_ref __is_destructible_safe)
        (type_ref _Tp)
        (template_ref __bool_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template has_virtual_destructor
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<_Bool, __has_virtual_destructor(_Tp)>
        (template_ref integral_constant)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template alignment_of
      (template_type_parameter _Tp)
      (cxx_base_specifier integral_constant<std::size_t, __alignof(_Tp)>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (cxx_unary_expr
          (type_ref _Tp)))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template rank
      (template_type_parameter)
      (cxx_base_specifier integral_constant<std::size_t, 0>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (integer_literal 0)))
    (class_template_partial_specialization rank
      (template_type_parameter _Tp)
      (template_non_type_parameter _Size
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Size)
      (cxx_base_specifier integral_constant<std::size_t, 1 + rank<_Tp>::value>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (binary_operator
          (integer_literal 1)
          (decl_ref_expr
            (template_ref rank)
            (type_ref _Tp)))))
    (class_template_partial_specialization rank
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier integral_constant<std::size_t, 1 + rank<_Tp>::value>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (binary_operator
          (integer_literal 1)
          (decl_ref_expr
            (template_ref rank)
            (type_ref _Tp)))))
    (class_template extent
      (template_type_parameter)
      (template_non_type_parameter _Uint)
      (cxx_base_specifier integral_constant<std::size_t, 0>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (integer_literal 0)))
    (class_template_partial_specialization extent
      (template_type_parameter _Tp)
      (template_non_type_parameter _Uint)
      (template_non_type_parameter _Size
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Size)
      (decl_ref_expr _Uint)
      (cxx_base_specifier integral_constant<std::size_t, _Uint == 0 ? _Size : extent<_Tp, _Uint - 1>::value>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (conditional_operator
          (binary_operator
            (decl_ref_expr _Uint)
            (integer_literal 0))
          (decl_ref_expr _Size)
          (decl_ref_expr
            (template_ref extent)
            (type_ref _Tp)
            (binary_operator
              (decl_ref_expr _Uint)
              (integer_literal 1))))))
    (class_template_partial_specialization extent
      (template_type_parameter _Tp)
      (template_non_type_parameter _Uint)
      (type_ref _Tp)
      (decl_ref_expr _Uint)
      (cxx_base_specifier integral_constant<std::size_t, _Uint == 0 ? 0 : extent<_Tp, _Uint - 1>::value>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (conditional_operator
          (binary_operator
            (decl_ref_expr _Uint)
            (integer_literal 0))
          (integer_literal 0)
          (decl_ref_expr
            (template_ref extent)
            (type_ref _Tp)
            (binary_operator
              (decl_ref_expr _Uint)
              (integer_literal 1))))))
    (class_template is_same
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier integral_constant<_Bool, __is_same(_Tp, _Up)>
        (template_ref integral_constant)
        (type_ref _Tp)
        (type_ref _Up)))
    (class_template is_base_of
      (template_type_parameter _Base)
      (template_type_parameter _Derived)
      (cxx_base_specifier integral_constant<_Bool, __is_base_of(_Base, _Derived)>
        (template_ref integral_constant)
        (type_ref _Base)
        (type_ref _Derived)))
    (class_template __is_convertible_helper
      (template_type_parameter _From)
      (template_type_parameter _To)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_void)
          (type_ref _From)
          (template_ref is_function)
          (type_ref _To)
          (template_ref is_array)
          (type_ref _To)))
      (typedef_decl type
        (template_ref is_void)
        (type_ref _To)))
    (class_template_partial_specialization __is_convertible_helper
      (template_type_parameter _From)
      (template_type_parameter _To)
      (type_ref _From)
      (type_ref _To)
      (cxx_bool_literal_expr)
      (function_template __test_aux
        (template_type_parameter _To1)
        (parm_decl
          (type_ref _To1)))
      (function_template __test
        (template_type_parameter _From1)
        (template_type_parameter _To1)
        (template_type_parameter
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __test_aux)
              (type_ref _To1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _From1)))))
        (type_ref std::true_type)
        (parm_decl))
      (function_template __test
        (template_type_parameter)
        (template_type_parameter)
        (type_ref std::false_type))
      (cxx_access_spec_decl)
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _From)
            (type_ref _To))
          (integer_literal 0))))
    (class_template is_convertible
      (template_type_parameter _From)
      (template_type_parameter _To)
      (cxx_base_specifier __is_convertible_helper<_From, _To>::type
        (template_ref __is_convertible_helper)
        (type_ref _From)
        (type_ref _To)))
    (type_alias_template_decl __is_array_convertible
      (template_type_parameter _ToElementType)
      (template_type_parameter _FromElementType)
      (type_alias_decl __is_array_convertible
        (template_ref is_convertible)
        (type_ref _FromElementType)
        (type_ref _ToElementType)))
    (class_template __is_nt_convertible_helper
      (template_type_parameter _From)
      (template_type_parameter _To)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_void)
          (type_ref _From)
          (template_ref is_function)
          (type_ref _To)
          (template_ref is_array)
          (type_ref _To)))
      (cxx_base_specifier is_void<_To>
        (template_ref is_void)
        (type_ref _To)))
    (class_template_partial_specialization __is_nt_convertible_helper
      (template_type_parameter _From)
      (template_type_parameter _To)
      (type_ref _From)
      (type_ref _To)
      (cxx_bool_literal_expr)
      (function_template __test_aux
        (template_type_parameter _To1)
        (parm_decl
          (type_ref _To1)))
      (function_template __test
        (template_type_parameter _From1)
        (template_type_parameter _To1)
        (template_ref __bool_constant)
        (cxx_unary_expr
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __test_aux)
              (type_ref _To1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _From1)))))
        (parm_decl))
      (function_template __test
        (template_type_parameter)
        (template_type_parameter)
        (type_ref std::false_type))
      (cxx_access_spec_decl)
      (type_alias_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _From)
            (type_ref _To))
          (integer_literal 0))))
    (class_template __is_nothrow_convertible
      (template_type_parameter _From)
      (template_type_parameter _To)
      (cxx_base_specifier __is_nt_convertible_helper<_From, _To>::type
        (template_ref __is_nt_convertible_helper)
        (type_ref _From)
        (type_ref _To)))
    (class_template remove_const
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_const
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template remove_volatile
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_volatile
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template remove_cv
      (template_type_parameter _Tp)
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_cv
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_cv
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_cv
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template add_const
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template add_volatile
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template add_cv
      (template_type_parameter _Tp)
      (typedef_decl type
        (template_ref add_const)
        (template_ref add_volatile)
        (type_ref _Tp)))
    (type_alias_template_decl remove_const_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_const_t
        (template_ref remove_const)
        (type_ref _Tp)))
    (type_alias_template_decl remove_volatile_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_volatile_t
        (template_ref remove_volatile)
        (type_ref _Tp)))
    (type_alias_template_decl remove_cv_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_cv_t
        (template_ref remove_cv)
        (type_ref _Tp)))
    (type_alias_template_decl add_const_t
      (template_type_parameter _Tp)
      (type_alias_decl add_const_t
        (template_ref add_const)
        (type_ref _Tp)))
    (type_alias_template_decl add_volatile_t
      (template_type_parameter _Tp)
      (type_alias_decl add_volatile_t
        (template_ref add_volatile)
        (type_ref _Tp)))
    (type_alias_template_decl add_cv_t
      (template_type_parameter _Tp)
      (type_alias_decl add_cv_t
        (template_ref add_cv)
        (type_ref _Tp)))
    (class_template remove_reference
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_reference
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_reference
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template __add_lvalue_reference_helper
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp)))
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __add_lvalue_reference_helper
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template add_lvalue_reference
      (template_type_parameter _Tp)
      (cxx_base_specifier __add_lvalue_reference_helper<_Tp>
        (template_ref __add_lvalue_reference_helper)
        (type_ref _Tp)))
    (class_template __add_rvalue_reference_helper
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __is_referenceable)
          (type_ref _Tp)))
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __add_rvalue_reference_helper
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template add_rvalue_reference
      (template_type_parameter _Tp)
      (cxx_base_specifier __add_rvalue_reference_helper<_Tp>
        (template_ref __add_rvalue_reference_helper)
        (type_ref _Tp)))
    (type_alias_template_decl remove_reference_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_reference_t
        (template_ref remove_reference)
        (type_ref _Tp)))
    (type_alias_template_decl add_lvalue_reference_t
      (template_type_parameter _Tp)
      (type_alias_decl add_lvalue_reference_t
        (template_ref add_lvalue_reference)
        (type_ref _Tp)))
    (type_alias_template_decl add_rvalue_reference_t
      (template_type_parameter _Tp)
      (type_alias_decl add_rvalue_reference_t
        (template_ref add_rvalue_reference)
        (type_ref _Tp)))
    (class_template __cv_selector
      (template_type_parameter _Unqualified)
      (template_non_type_parameter _IsConst)
      (template_non_type_parameter _IsVol))
    (class_template_partial_specialization __cv_selector
      (template_type_parameter _Unqualified)
      (type_ref _Unqualified)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (type_ref _Unqualified)))
    (class_template_partial_specialization __cv_selector
      (template_type_parameter _Unqualified)
      (type_ref _Unqualified)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (type_ref _Unqualified)))
    (class_template_partial_specialization __cv_selector
      (template_type_parameter _Unqualified)
      (type_ref _Unqualified)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (type_ref _Unqualified)))
    (class_template_partial_specialization __cv_selector
      (template_type_parameter _Unqualified)
      (type_ref _Unqualified)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (type_ref _Unqualified)))
    (class_template __match_cv_qualifiers
      (template_type_parameter _Qualified)
      (template_type_parameter _Unqualified)
      (template_non_type_parameter _IsConst
        (decl_ref_expr
          (template_ref is_const)
          (type_ref _Qualified)))
      (template_non_type_parameter _IsVol
        (decl_ref_expr
          (template_ref is_volatile)
          (type_ref _Qualified)))
      (typedef_decl __match
        (template_ref __cv_selector)
        (type_ref _Unqualified)
        (decl_ref_expr _IsConst)
        (decl_ref_expr _IsVol))
      (cxx_access_spec_decl)
      (typedef_decl __type
        (type_ref std::__match_cv_qualifiers::__match)))
    (class_template __make_unsigned
      (template_type_parameter _Tp)
      (typedef_decl __type
        (type_ref _Tp)))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (struct_decl __make_unsigned
      (typedef_decl __type))
    (class_template __make_unsigned_selector
      (template_type_parameter _Tp)
      (template_non_type_parameter _IsInt
        (decl_ref_expr
          (template_ref is_integral)
          (type_ref _Tp)))
      (template_non_type_parameter _IsEnum
        (decl_ref_expr
          (template_ref is_enum)
          (type_ref _Tp))))
    (class_template_partial_specialization __make_unsigned_selector
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_alias_decl __unsigned_type
        (template_ref __make_unsigned)
        (template_ref __remove_cv_t)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (type_alias_decl __type
        (template_ref __match_cv_qualifiers)
        (type_ref _Tp)
        (type_ref std::__make_unsigned_selector<type-parameter-0-0, true, false>::__unsigned_type)))
    (class_decl __make_unsigned_selector_base
      (cxx_access_spec_decl)
      (class_template _List
        (template_type_parameter))
      (class_template_partial_specialization _List
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (cxx_base_specifier _List<_Up...>
          (template_ref _List)
          (type_ref _Up))
        (var_decl __size
          (type_ref std::size_t)
          (cxx_unary_expr
            (type_ref _Tp))))
      (class_template __select
        (template_non_type_parameter _Sz
          (type_ref std::size_t))
        (template_type_parameter _Tp)
        (template_non_type_parameter
          (paren_expr
            (binary_operator
              (decl_ref_expr _Sz)
              (decl_ref_expr
                (type_ref _Tp))))))
      (class_template_partial_specialization __select
        (template_non_type_parameter _Sz
          (type_ref std::size_t))
        (template_type_parameter _Uint)
        (template_type_parameter _UInts)
        (decl_ref_expr _Sz)
        (template_ref _List)
        (type_ref _Uint)
        (type_ref _UInts)
        (cxx_bool_literal_expr)
        (type_alias_decl __type
          (type_ref _Uint)))
      (class_template_partial_specialization __select
        (template_non_type_parameter _Sz
          (type_ref std::size_t))
        (template_type_parameter _Uint)
        (template_type_parameter _UInts)
        (decl_ref_expr _Sz)
        (template_ref _List)
        (type_ref _Uint)
        (type_ref _UInts)
        (cxx_bool_literal_expr)
        (cxx_base_specifier __select<_Sz, _List<_UInts...> >
          (template_ref __select)
          (decl_ref_expr _Sz)
          (template_ref _List)
          (type_ref _UInts))))
    (class_template_partial_specialization __make_unsigned_selector
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier class std::__make_unsigned_selector_base
        (type_ref class std::__make_unsigned_selector_base))
      (type_alias_decl _UInts
        (template_ref _List))
      (type_alias_decl __unsigned_type
        (template_ref __select)
        (cxx_unary_expr
          (type_ref _Tp))
        (type_ref std::__make_unsigned_selector<type-parameter-0-0, false, true>::_UInts))
      (cxx_access_spec_decl)
      (type_alias_decl __type
        (template_ref __match_cv_qualifiers)
        (type_ref _Tp)
        (type_ref std::__make_unsigned_selector<type-parameter-0-0, false, true>::__unsigned_type)))
    (struct_decl __make_unsigned
      (type_alias_decl __type
        (template_ref __make_unsigned_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_unsigned_selector<wchar_t, false, true>::__type)))
    (var_decl value
      (template_ref integral_constant)
      (decl_ref_expr
        (cxx_bool_literal_expr)))
    (struct_decl __make_unsigned
      (type_alias_decl __type
        (template_ref __make_unsigned_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_unsigned_selector<char16_t, false, true>::__type)))
    (struct_decl __make_unsigned
      (type_alias_decl __type
        (template_ref __make_unsigned_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_unsigned_selector<char32_t, false, true>::__type)))
    (class_template make_unsigned
      (template_type_parameter _Tp)
      (typedef_decl type
        (template_ref __make_unsigned_selector)
        (type_ref _Tp)))
    (struct_decl make_unsigned)
    (class_template __make_signed
      (template_type_parameter _Tp)
      (typedef_decl __type
        (type_ref _Tp)))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (struct_decl __make_signed
      (typedef_decl __type))
    (class_template __make_signed_selector
      (template_type_parameter _Tp)
      (template_non_type_parameter _IsInt
        (decl_ref_expr
          (template_ref is_integral)
          (type_ref _Tp)))
      (template_non_type_parameter _IsEnum
        (decl_ref_expr
          (template_ref is_enum)
          (type_ref _Tp))))
    (class_template_partial_specialization __make_signed_selector
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_alias_decl __signed_type
        (template_ref __make_signed)
        (template_ref __remove_cv_t)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (type_alias_decl __type
        (template_ref __match_cv_qualifiers)
        (type_ref _Tp)
        (type_ref std::__make_signed_selector<type-parameter-0-0, true, false>::__signed_type)))
    (class_template_partial_specialization __make_signed_selector
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __unsigned_type
        (template_ref __make_unsigned_selector)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl __type
        (template_ref __make_signed_selector)
        (type_ref std::__make_signed_selector<type-parameter-0-0, false, true>::__unsigned_type)))
    (struct_decl __make_signed
      (type_alias_decl __type
        (template_ref __make_signed_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_signed_selector<wchar_t, false, true>::__type)))
    (var_decl value
      (template_ref integral_constant)
      (decl_ref_expr
        (cxx_bool_literal_expr)))
    (struct_decl __make_signed
      (type_alias_decl __type
        (template_ref __make_signed_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_signed_selector<char16_t, false, true>::__type)))
    (struct_decl __make_signed
      (type_alias_decl __type
        (template_ref __make_signed_selector)
        (cxx_bool_literal_expr)
        (cxx_bool_literal_expr)
        (type_ref std::__make_signed_selector<char32_t, false, true>::__type)))
    (class_template make_signed
      (template_type_parameter _Tp)
      (typedef_decl type
        (template_ref __make_signed_selector)
        (type_ref _Tp)))
    (struct_decl make_signed)
    (type_alias_template_decl make_signed_t
      (template_type_parameter _Tp)
      (type_alias_decl make_signed_t
        (template_ref make_signed)
        (type_ref _Tp)))
    (type_alias_template_decl make_unsigned_t
      (template_type_parameter _Tp)
      (type_alias_decl make_unsigned_t
        (template_ref make_unsigned)
        (type_ref _Tp)))
    (class_template remove_extent
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_extent
      (template_type_parameter _Tp)
      (template_non_type_parameter _Size
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Size)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_extent
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template remove_all_extents
      (template_type_parameter _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization remove_all_extents
      (template_type_parameter _Tp)
      (template_non_type_parameter _Size
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Size)
      (typedef_decl type
        (template_ref remove_all_extents)
        (type_ref _Tp)))
    (class_template_partial_specialization remove_all_extents
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl type
        (template_ref remove_all_extents)
        (type_ref _Tp)))
    (type_alias_template_decl remove_extent_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_extent_t
        (template_ref remove_extent)
        (type_ref _Tp)))
    (type_alias_template_decl remove_all_extents_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_all_extents_t
        (template_ref remove_all_extents)
        (type_ref _Tp)))
    (class_template __remove_pointer_helper
      (template_type_parameter _Tp)
      (template_type_parameter)
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __remove_pointer_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (type_ref _Up)
      (typedef_decl type
        (type_ref _Up)))
    (class_template remove_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __remove_pointer_helper<_Tp, __remove_cv_t<_Tp> >
        (template_ref __remove_pointer_helper)
        (type_ref _Tp)
        (template_ref __remove_cv_t)
        (type_ref _Tp)))
    (class_template __add_pointer_helper
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref __is_referenceable)
          (type_ref _Tp)
          (template_ref is_void)
          (type_ref _Tp)))
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __add_pointer_helper
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (typedef_decl type
        (template_ref remove_reference)
        (type_ref _Tp)))
    (class_template add_pointer
      (template_type_parameter _Tp)
      (cxx_base_specifier __add_pointer_helper<_Tp>
        (template_ref __add_pointer_helper)
        (type_ref _Tp)))
    (type_alias_template_decl remove_pointer_t
      (template_type_parameter _Tp)
      (type_alias_decl remove_pointer_t
        (template_ref remove_pointer)
        (type_ref _Tp)))
    (type_alias_template_decl add_pointer_t
      (template_type_parameter _Tp)
      (type_alias_decl add_pointer_t
        (template_ref add_pointer)
        (type_ref _Tp)))
    (class_template __aligned_storage_msa
      (template_non_type_parameter _Len
        (namespace_ref std)
        (type_ref std::size_t))
      (union_decl __type
        (field_decl __data
          (decl_ref_expr _Len))
        (struct_decl
          (aligned_attr))
        (field_decl __align
          (struct_decl
            (aligned_attr)))))
    (class_template aligned_storage
      (template_non_type_parameter _Len
        (namespace_ref std)
        (type_ref std::size_t))
      (template_non_type_parameter _Align
        (namespace_ref std)
        (type_ref std::size_t)
        (cxx_unary_expr
          (template_ref __aligned_storage_msa)
          (decl_ref_expr _Len)))
      (union_decl type
        (field_decl __data
          (decl_ref_expr _Len))
        (struct_decl
          (aligned_attr))
        (field_decl __align
          (struct_decl
            (aligned_attr)))))
    (class_template __strictest_alignment
      (template_type_parameter _Types)
      (var_decl _S_alignment
        (type_ref std::size_t)
        (integer_literal 0))
      (var_decl _S_size
        (type_ref std::size_t)
        (integer_literal 0)))
    (class_template_partial_specialization __strictest_alignment
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref _Tp)
      (type_ref _Types)
      (var_decl _S_alignment
        (type_ref std::size_t)
        (conditional_operator
          (binary_operator
            (cxx_unary_expr
              (type_ref _Tp))
            (decl_ref_expr
              (template_ref __strictest_alignment)
              (type_ref _Types)))
          (cxx_unary_expr
            (type_ref _Tp))
          (decl_ref_expr
            (template_ref __strictest_alignment)
            (type_ref _Types))))
      (var_decl _S_size
        (type_ref std::size_t)
        (conditional_operator
          (binary_operator
            (cxx_unary_expr
              (type_ref _Tp))
            (decl_ref_expr
              (template_ref __strictest_alignment)
              (type_ref _Types)))
          (cxx_unary_expr
            (type_ref _Tp))
          (decl_ref_expr
            (template_ref __strictest_alignment)
            (type_ref _Types)))))
    (class_template aligned_union
      (template_non_type_parameter _Len
        (type_ref std::size_t))
      (template_type_parameter _Types)
      (cxx_access_spec_decl)
      (static_assert
        (binary_operator
          (size_of_pack_expr
            (type_ref _Types))
          (integer_literal 0))
        (string_literal "At least one type is required"))
      (type_alias_decl __strictest
        (template_ref __strictest_alignment)
        (type_ref _Types))
      (var_decl _S_len
        (type_ref std::size_t)
        (conditional_operator
          (binary_operator
            (decl_ref_expr _Len)
            (decl_ref_expr
              (type_ref std::aligned_union::__strictest)))
          (decl_ref_expr _Len)
          (decl_ref_expr
            (type_ref std::aligned_union::__strictest))))
      (cxx_access_spec_decl)
      (var_decl alignment_value
        (type_ref std::size_t)
        (decl_ref_expr
          (type_ref std::aligned_union::__strictest)))
      (typedef_decl type
        (template_ref aligned_storage)
        (decl_ref_expr _S_len)
        (decl_ref_expr alignment_value)))
    (var_decl alignment_value
      (template_non_type_parameter _Len
        (type_ref std::size_t))
      (template_type_parameter _Types)
      (type_ref std::size_t)
      (template_ref aligned_union)
      (decl_ref_expr _Len)
      (type_ref _Types))
    (class_template __decay_selector
      (template_type_parameter _Up)
      (template_non_type_parameter _IsArray
        (decl_ref_expr
          (template_ref is_array)
          (type_ref _Up)))
      (template_non_type_parameter _IsFunction
        (decl_ref_expr
          (template_ref is_function)
          (type_ref _Up))))
    (class_template_partial_specialization __decay_selector
      (template_type_parameter _Up)
      (type_ref _Up)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (template_ref __remove_cv_t)
        (type_ref _Up)))
    (class_template_partial_specialization __decay_selector
      (template_type_parameter _Up)
      (type_ref _Up)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (template_ref remove_extent)
        (type_ref _Up)))
    (class_template_partial_specialization __decay_selector
      (template_type_parameter _Up)
      (type_ref _Up)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (typedef_decl __type
        (template_ref add_pointer)
        (type_ref _Up)))
    (class_template decay
      (template_type_parameter _Tp)
      (typedef_decl __remove_type
        (template_ref remove_reference)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl type
        (template_ref __decay_selector)
        (type_ref std::decay::__remove_type)))
    (class_template __strip_reference_wrapper
      (template_type_parameter _Tp)
      (typedef_decl __type
        (type_ref _Tp)))
    (class_template_partial_specialization __strip_reference_wrapper
      (template_type_parameter _Tp)
      (template_ref reference_wrapper)
      (type_ref _Tp)
      (typedef_decl __type
        (type_ref _Tp)))
    (type_alias_template_decl __decay_t
      (template_type_parameter _Tp)
      (type_alias_decl __decay_t
        (template_ref decay)
        (type_ref _Tp)))
    (type_alias_template_decl __decay_and_strip
      (template_type_parameter _Tp)
      (type_alias_decl __decay_and_strip
        (template_ref __strip_reference_wrapper)
        (template_ref __decay_t)
        (type_ref _Tp)))
    (class_template enable_if
      (template_non_type_parameter)
      (template_type_parameter _Tp))
    (class_template_partial_specialization enable_if
      (template_type_parameter _Tp)
      (cxx_bool_literal_expr)
      (type_ref _Tp)
      (typedef_decl type
        (type_ref _Tp)))
    (type_alias_template_decl __enable_if_t
      (template_non_type_parameter _Cond)
      (template_type_parameter _Tp)
      (type_alias_decl __enable_if_t
        (template_ref enable_if)
        (decl_ref_expr _Cond)
        (type_ref _Tp)))
    (type_alias_template_decl _Require
      (template_type_parameter _Cond)
      (type_alias_decl _Require
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref __and_)
          (type_ref _Cond))))
    (type_alias_template_decl __remove_cvref_t
      (template_type_parameter _Tp)
      (type_alias_decl __remove_cvref_t
        (template_ref remove_cv)
        (template_ref remove_reference)
        (type_ref _Tp)))
    (class_template conditional
      (template_non_type_parameter _Cond)
      (template_type_parameter _Iftrue)
      (template_type_parameter _Iffalse)
      (typedef_decl type
        (type_ref _Iftrue)))
    (class_template_partial_specialization conditional
      (template_type_parameter _Iftrue)
      (template_type_parameter _Iffalse)
      (cxx_bool_literal_expr)
      (type_ref _Iftrue)
      (type_ref _Iffalse)
      (typedef_decl type
        (type_ref _Iffalse)))
    (class_template common_type
      (template_type_parameter _Tp))
    (struct_decl __do_common_type_impl
      (type_alias_template_decl __cond_t
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl __cond_t
          (conditional_operator
            (cxx_bool_literal_expr)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Tp)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Up))))))
      (function_template _S_test
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_ref __success_type)
        (template_ref __decay_t)
        (template_ref __cond_t)
        (type_ref _Tp)
        (type_ref _Up)
        (parm_decl))
      (function_template _S_test_2
        (template_type_parameter)
        (template_type_parameter)
        (type_ref struct std::__failure_type))
      (function_template _S_test
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test_2)
            (type_ref _Tp)
            (type_ref _Up))
          (integer_literal 0))))
    (struct_decl common_type)
    (class_template_partial_specialization common_type
      (template_type_parameter _Tp0)
      (type_ref _Tp0)
      (cxx_base_specifier common_type<_Tp0, _Tp0>
        (template_ref common_type)
        (type_ref _Tp0)
        (type_ref _Tp0)))
    (class_template __common_type_impl
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_type_parameter _Dp1
        (template_ref __decay_t)
        (type_ref _Tp1))
      (template_type_parameter _Dp2
        (template_ref __decay_t)
        (type_ref _Tp2))
      (type_alias_decl type
        (template_ref common_type)
        (type_ref _Dp1)
        (type_ref _Dp2)))
    (class_template_partial_specialization __common_type_impl
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (cxx_base_specifier struct std::__do_common_type_impl
        (type_ref struct std::__do_common_type_impl))
      (type_alias_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _Tp1)
            (type_ref _Tp2))
          (integer_literal 0))))
    (class_template_partial_specialization common_type
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (cxx_base_specifier __common_type_impl<_Tp1, _Tp2>::type
        (template_ref __common_type_impl)
        (type_ref _Tp1)
        (type_ref _Tp2)))
    (class_template __common_type_pack
      (template_type_parameter))
    (class_template __common_type_fold
      (template_type_parameter)
      (template_type_parameter)
      (template_type_parameter))
    (class_template_partial_specialization common_type
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_type_parameter _Rp)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (type_ref _Rp)
      (cxx_base_specifier __common_type_fold<common_type<_Tp1, _Tp2>, __common_type_pack<_Rp...> >
        (template_ref __common_type_fold)
        (template_ref common_type)
        (type_ref _Tp1)
        (type_ref _Tp2)
        (template_ref __common_type_pack)
        (type_ref _Rp)))
    (class_template_partial_specialization __common_type_fold
      (template_type_parameter _CTp)
      (template_type_parameter _Rp)
      (type_ref _CTp)
      (template_ref __common_type_pack)
      (type_ref _Rp)
      (template_ref __void_t)
      (type_ref _CTp)
      (cxx_base_specifier common_type<typename _CTp::type, _Rp...>
        (template_ref common_type)
        (type_ref _CTp)
        (type_ref _Rp)))
    (class_template_partial_specialization __common_type_fold
      (template_type_parameter _CTp)
      (template_type_parameter _Rp)
      (type_ref _CTp)
      (type_ref _Rp))
    (class_template __underlying_type_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_enum)
          (type_ref _Tp)))
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __underlying_type_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr))
    (class_template underlying_type
      (template_type_parameter _Tp)
      (cxx_base_specifier __underlying_type_impl<_Tp>
        (template_ref __underlying_type_impl)
        (type_ref _Tp)))
    (class_template __declval_protector
      (template_type_parameter _Tp)
      (var_decl __stop
        (cxx_bool_literal_expr)))
    (function_template declval
      (template_type_parameter _Tp)
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref __declval)
          (type_ref _Tp))
        (integer_literal 0))
      (compound_stmt
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref __declval_protector)
              (type_ref _Tp))
            (string_literal "declval() must not be used!")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __declval)
              (type_ref _Tp))
            (integer_literal 0)))))
    (class_template result_of
      (template_type_parameter _Signature))
    (struct_decl __invoke_memfun_ref)
    (struct_decl __invoke_memfun_deref)
    (struct_decl __invoke_memobj_ref)
    (struct_decl __invoke_memobj_deref)
    (struct_decl __invoke_other)
    (class_template __result_of_success
      (template_type_parameter _Tp)
      (template_type_parameter _Tag)
      (cxx_base_specifier __success_type<_Tp>
        (template_ref __success_type)
        (type_ref _Tp))
      (type_alias_decl __invoke_type
        (type_ref _Tag)))
    (struct_decl __result_of_memfun_ref_impl
      (function_template _S_test
        (template_type_parameter _Fp)
        (template_type_parameter _Tp1)
        (template_type_parameter _Args)
        (template_ref __result_of_success)
        (call_expr
          (paren_expr
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp1)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Fp)))))
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Args)))))
        (type_ref struct std::__invoke_memfun_ref)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter)
        (type_ref struct std::__failure_type)))
    (class_template __result_of_memfun_ref
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (template_type_parameter _Args)
      (cxx_base_specifier struct std::__result_of_memfun_ref_impl
        (type_ref struct std::__result_of_memfun_ref_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _MemPtr)
            (type_ref _Arg)
            (type_ref _Args))
          (integer_literal 0))))
    (struct_decl __result_of_memfun_deref_impl
      (function_template _S_test
        (template_type_parameter _Fp)
        (template_type_parameter _Tp1)
        (template_type_parameter _Args)
        (template_ref __result_of_success)
        (call_expr
          (paren_expr
            (binary_operator
              (paren_expr
                (unary_operator
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref declval)
                      (type_ref _Tp1)))))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Fp)))))
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Args)))))
        (type_ref struct std::__invoke_memfun_deref)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter)
        (type_ref struct std::__failure_type)))
    (class_template __result_of_memfun_deref
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (template_type_parameter _Args)
      (cxx_base_specifier struct std::__result_of_memfun_deref_impl
        (type_ref struct std::__result_of_memfun_deref_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _MemPtr)
            (type_ref _Arg)
            (type_ref _Args))
          (integer_literal 0))))
    (struct_decl __result_of_memobj_ref_impl
      (function_template _S_test
        (template_type_parameter _Fp)
        (template_type_parameter _Tp1)
        (template_ref __result_of_success)
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Tp1)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Fp))))
        (type_ref struct std::__invoke_memobj_ref)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter)
        (template_type_parameter)
        (type_ref struct std::__failure_type)))
    (class_template __result_of_memobj_ref
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (cxx_base_specifier struct std::__result_of_memobj_ref_impl
        (type_ref struct std::__result_of_memobj_ref_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _MemPtr)
            (type_ref _Arg))
          (integer_literal 0))))
    (struct_decl __result_of_memobj_deref_impl
      (function_template _S_test
        (template_type_parameter _Fp)
        (template_type_parameter _Tp1)
        (template_ref __result_of_success)
        (binary_operator
          (paren_expr
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp1)))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Fp))))
        (type_ref struct std::__invoke_memobj_deref)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter)
        (template_type_parameter)
        (type_ref struct std::__failure_type)))
    (class_template __result_of_memobj_deref
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (cxx_base_specifier struct std::__result_of_memobj_deref_impl
        (type_ref struct std::__result_of_memobj_deref_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _MemPtr)
            (type_ref _Arg))
          (integer_literal 0))))
    (class_template __result_of_memobj
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg))
    (class_template_partial_specialization __result_of_memobj
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _Arg)
      (type_ref _Res)
      (type_ref _Arg)
      (typedef_decl _Argval
        (template_ref __remove_cvref_t)
        (type_ref _Arg))
      (typedef_decl _MemPtr
        (type_ref _Res))
      (typedef_decl type
        (template_ref conditional)
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_same)
          (type_ref std::__result_of_memobj<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2>::_Argval)
          (type_ref _Class)
          (template_ref is_base_of)
          (type_ref _Class)
          (type_ref std::__result_of_memobj<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2>::_Argval))
        (template_ref __result_of_memobj_ref)
        (type_ref std::__result_of_memobj<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2>::_MemPtr)
        (type_ref _Arg)
        (template_ref __result_of_memobj_deref)
        (type_ref std::__result_of_memobj<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2>::_MemPtr)
        (type_ref _Arg)))
    (class_template __result_of_memfun
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (template_type_parameter _Args))
    (class_template_partial_specialization __result_of_memfun
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _Arg)
      (template_type_parameter _Args)
      (type_ref _Res)
      (type_ref _Arg)
      (type_ref _Args)
      (typedef_decl _Argval
        (template_ref remove_reference)
        (type_ref _Arg))
      (typedef_decl _MemPtr
        (type_ref _Res))
      (typedef_decl type
        (template_ref conditional)
        (decl_ref_expr
          (template_ref is_base_of)
          (type_ref _Class)
          (type_ref std::__result_of_memfun<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2, type-parameter-0-3...>::_Argval))
        (template_ref __result_of_memfun_ref)
        (type_ref std::__result_of_memfun<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2, type-parameter-0-3...>::_MemPtr)
        (type_ref _Arg)
        (type_ref _Args)
        (template_ref __result_of_memfun_deref)
        (type_ref std::__result_of_memfun<type-parameter-0-0 type-parameter-0-1::*, type-parameter-0-2, type-parameter-0-3...>::_MemPtr)
        (type_ref _Arg)
        (type_ref _Args)))
    (class_template __inv_unwrap
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (template_ref __remove_cvref_t)
        (type_ref _Tp))
      (type_alias_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __inv_unwrap
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (template_ref reference_wrapper)
      (type_ref _Up)
      (type_alias_decl type
        (type_ref _Up)))
    (class_template __result_of_impl
      (template_non_type_parameter)
      (template_non_type_parameter)
      (template_type_parameter _Functor)
      (template_type_parameter _ArgTypes)
      (typedef_decl type
        (type_ref struct std::__failure_type)))
    (class_template_partial_specialization __result_of_impl
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref _MemPtr)
      (type_ref _Arg)
      (cxx_base_specifier __result_of_memobj<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type>
        (template_ref __result_of_memobj)
        (template_ref __decay_t)
        (type_ref _MemPtr)
        (template_ref __inv_unwrap)
        (type_ref _Arg)))
    (class_template_partial_specialization __result_of_impl
      (template_type_parameter _MemPtr)
      (template_type_parameter _Arg)
      (template_type_parameter _Args)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref _MemPtr)
      (type_ref _Arg)
      (type_ref _Args)
      (cxx_base_specifier __result_of_memfun<__decay_t<_MemPtr>, typename __inv_unwrap<_Arg>::type, _Args...>
        (template_ref __result_of_memfun)
        (template_ref __decay_t)
        (type_ref _MemPtr)
        (template_ref __inv_unwrap)
        (type_ref _Arg)
        (type_ref _Args)))
    (struct_decl __result_of_other_impl
      (function_template _S_test
        (template_type_parameter _Fn)
        (template_type_parameter _Args)
        (template_ref __result_of_success)
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Fn)))
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Args)))))
        (type_ref struct std::__invoke_other)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter)
        (type_ref struct std::__failure_type)))
    (class_template_partial_specialization __result_of_impl
      (template_type_parameter _Functor)
      (template_type_parameter _ArgTypes)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref _Functor)
      (type_ref _ArgTypes)
      (cxx_base_specifier struct std::__result_of_other_impl
        (type_ref struct std::__result_of_other_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _Functor)
            (type_ref _ArgTypes))
          (integer_literal 0))))
    (class_template __invoke_result
      (template_type_parameter _Functor)
      (template_type_parameter _ArgTypes)
      (cxx_base_specifier __result_of_impl<is_member_object_pointer<typename remove_reference<_Functor>::type>::value, is_member_function_pointer<typename remove_reference<_Functor>::type>::value, _Functor, _ArgTypes...>::type
        (template_ref __result_of_impl)
        (decl_ref_expr
          (template_ref is_member_object_pointer)
          (template_ref remove_reference)
          (type_ref _Functor))
        (decl_ref_expr
          (template_ref is_member_function_pointer)
          (template_ref remove_reference)
          (type_ref _Functor))
        (type_ref _Functor)
        (type_ref _ArgTypes)))
    (class_template_partial_specialization result_of
      (template_type_parameter _Functor)
      (template_type_parameter _ArgTypes)
      (type_ref _Functor)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier __invoke_result<_Functor, _ArgTypes...>
        (template_ref __invoke_result)
        (type_ref _Functor)
        (type_ref _ArgTypes)))
    (type_alias_template_decl aligned_storage_t
      (template_non_type_parameter _Len
        (type_ref std::size_t))
      (template_non_type_parameter _Align
        (type_ref std::size_t)
        (cxx_unary_expr
          (template_ref __aligned_storage_msa)
          (decl_ref_expr _Len)))
      (type_alias_decl aligned_storage_t
        (template_ref aligned_storage)
        (decl_ref_expr _Len)
        (decl_ref_expr _Align)))
    (type_alias_template_decl aligned_union_t
      (template_non_type_parameter _Len
        (type_ref std::size_t))
      (template_type_parameter _Types)
      (type_alias_decl aligned_union_t
        (template_ref aligned_union)
        (decl_ref_expr _Len)
        (type_ref _Types)))
    (type_alias_template_decl decay_t
      (template_type_parameter _Tp)
      (type_alias_decl decay_t
        (template_ref decay)
        (type_ref _Tp)))
    (type_alias_template_decl enable_if_t
      (template_non_type_parameter _Cond)
      (template_type_parameter _Tp)
      (type_alias_decl enable_if_t
        (template_ref enable_if)
        (decl_ref_expr _Cond)
        (type_ref _Tp)))
    (type_alias_template_decl conditional_t
      (template_non_type_parameter _Cond)
      (template_type_parameter _Iftrue)
      (template_type_parameter _Iffalse)
      (type_alias_decl conditional_t
        (template_ref conditional)
        (decl_ref_expr _Cond)
        (type_ref _Iftrue)
        (type_ref _Iffalse)))
    (type_alias_template_decl common_type_t
      (template_type_parameter _Tp)
      (type_alias_decl common_type_t
        (template_ref common_type)
        (type_ref _Tp)))
    (type_alias_template_decl underlying_type_t
      (template_type_parameter _Tp)
      (type_alias_decl underlying_type_t
        (template_ref underlying_type)
        (type_ref _Tp)))
    (type_alias_template_decl result_of_t
      (template_type_parameter _Tp)
      (type_alias_decl result_of_t
        (template_ref result_of)
        (type_ref _Tp)))
    (type_alias_template_decl void_t
      (template_type_parameter)
      (type_alias_decl void_t))
    (class_template __detector
      (template_type_parameter _Default)
      (template_type_parameter _AlwaysVoid)
      (template_template_parameter _Op
        (template_type_parameter))
      (template_type_parameter _Args)
      (type_alias_decl value_t
        (type_ref std::false_type))
      (type_alias_decl type
        (type_ref _Default)))
    (class_template_partial_specialization __detector
      (template_type_parameter _Default)
      (template_template_parameter _Op
        (template_type_parameter))
      (template_type_parameter _Args)
      (type_ref _Default)
      (template_ref __void_t)
      (template_ref _Op)
      (type_ref _Args)
      (template_ref _Op)
      (type_ref _Args)
      (type_alias_decl value_t
        (type_ref std::true_type))
      (type_alias_decl type
        (template_ref _Op)
        (type_ref _Args)))
    (type_alias_template_decl __detected_or
      (template_type_parameter _Default)
      (template_template_parameter _Op
        (template_type_parameter))
      (template_type_parameter _Args)
      (type_alias_decl __detected_or
        (template_ref __detector)
        (type_ref _Default)
        (template_ref _Op)
        (type_ref _Args)))
    (type_alias_template_decl __detected_or_t
      (template_type_parameter _Default)
      (template_template_parameter _Op
        (template_type_parameter))
      (template_type_parameter _Args)
      (type_alias_decl __detected_or_t
        (template_ref __detected_or)
        (type_ref _Default)
        (template_ref _Op)
        (type_ref _Args)))
    (class_template __is_swappable
      (template_type_parameter _Tp))
    (class_template __is_nothrow_swappable
      (template_type_parameter _Tp))
    (class_template __is_tuple_like_impl
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_tuple_like_impl
      (template_type_parameter _Tps)
      (template_ref tuple)
      (type_ref _Tps)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template __is_tuple_like
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_tuple_like_impl<__remove_cvref_t<_Tp> >::type
        (template_ref __is_tuple_like_impl)
        (template_ref __remove_cvref_t)
        (type_ref _Tp)))
    (function_template swap
      (template_type_parameter _Tp)
      (template_ref _Require)
      (template_ref __not_)
      (template_ref __is_tuple_like)
      (type_ref _Tp)
      (template_ref is_move_constructible)
      (type_ref _Tp)
      (template_ref is_move_assignable)
      (type_ref _Tp)
      (parm_decl
        (type_ref _Tp))
      (parm_decl
        (type_ref _Tp)))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_ref __enable_if_t)
      (decl_ref_expr
        (template_ref __is_swappable)
        (type_ref _Tp))
      (parm_decl __a
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __b
        (type_ref _Tp)
        (decl_ref_expr _Nm)))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits
    (namespace __swappable_details
      (using_declaration swap
        (namespace_ref std)
        (overloaded_decl_ref swap))
      (struct_decl __do_is_swappable_impl
        (function_template __test
          (template_type_parameter _Tp)
          (template_type_parameter
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref swap))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))))
          (type_ref std::true_type)
          (parm_decl))
        (function_template __test
          (template_type_parameter)
          (type_ref std::false_type)))
      (struct_decl __do_is_nothrow_swappable_impl
        (function_template __test
          (template_type_parameter _Tp)
          (template_ref __bool_constant)
          (cxx_unary_expr
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref swap))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))))
          (parm_decl))
        (function_template __test
          (template_type_parameter)
          (type_ref std::false_type))))
    (class_template __is_swappable_impl
      (template_type_parameter _Tp)
      (cxx_base_specifier __swappable_details::__do_is_swappable_impl
        (namespace_ref __swappable_details)
        (type_ref struct std::__swappable_details::__do_is_swappable_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template __is_nothrow_swappable_impl
      (template_type_parameter _Tp)
      (cxx_base_specifier __swappable_details::__do_is_nothrow_swappable_impl
        (namespace_ref __swappable_details)
        (type_ref struct std::__swappable_details::__do_is_nothrow_swappable_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template __is_swappable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_swappable_impl<_Tp>::type
        (template_ref __is_swappable_impl)
        (type_ref _Tp)))
    (class_template __is_nothrow_swappable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nothrow_swappable_impl<_Tp>::type
        (template_ref __is_nothrow_swappable_impl)
        (type_ref _Tp)))
    (class_template is_swappable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_swappable_impl<_Tp>::type
        (template_ref __is_swappable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    (class_template is_nothrow_swappable
      (template_type_parameter _Tp)
      (cxx_base_specifier __is_nothrow_swappable_impl<_Tp>::type
        (template_ref __is_nothrow_swappable_impl)
        (type_ref _Tp))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "template argument must be a complete class or an unbounded array")))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/type_traits
    (namespace __swappable_with_details
      (using_declaration swap
        (namespace_ref std)
        (overloaded_decl_ref swap))
      (struct_decl __do_is_swappable_with_impl
        (function_template __test
          (template_type_parameter _Tp)
          (template_type_parameter _Up)
          (template_type_parameter
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref swap))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Up)))))
          (template_type_parameter
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref swap))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Up)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))))
          (type_ref std::true_type)
          (parm_decl))
        (function_template __test
          (template_type_parameter)
          (template_type_parameter)
          (type_ref std::false_type)))
      (struct_decl __do_is_nothrow_swappable_with_impl
        (function_template __test
          (template_type_parameter _Tp)
          (template_type_parameter _Up)
          (template_ref __bool_constant)
          (binary_operator
            (cxx_unary_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref swap))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Tp)))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Up)))))
            (cxx_unary_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref swap))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Up)))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Tp))))))
          (parm_decl))
        (function_template __test
          (template_type_parameter)
          (template_type_parameter)
          (type_ref std::false_type))))
    (class_template __is_swappable_with_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __swappable_with_details::__do_is_swappable_with_impl
        (namespace_ref __swappable_with_details)
        (type_ref struct std::__swappable_with_details::__do_is_swappable_with_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp)
            (type_ref _Up))
          (integer_literal 0))))
    (class_template_partial_specialization __is_swappable_with_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __swappable_details::__do_is_swappable_impl
        (namespace_ref __swappable_details)
        (type_ref struct std::__swappable_details::__do_is_swappable_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template __is_nothrow_swappable_with_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __swappable_with_details::__do_is_nothrow_swappable_with_impl
        (namespace_ref __swappable_with_details)
        (type_ref struct std::__swappable_with_details::__do_is_nothrow_swappable_with_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp)
            (type_ref _Up))
          (integer_literal 0))))
    (class_template_partial_specialization __is_nothrow_swappable_with_impl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __swappable_details::__do_is_nothrow_swappable_impl
        (namespace_ref __swappable_details)
        (type_ref struct std::__swappable_details::__do_is_nothrow_swappable_impl))
      (typedef_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __test)
            (type_ref _Tp))
          (integer_literal 0))))
    (class_template is_swappable_with
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __is_swappable_with_impl<_Tp, _Up>::type
        (template_ref __is_swappable_with_impl)
        (type_ref _Tp)
        (type_ref _Up))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "first template argument must be a complete class or an unbounded array"))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Up)
            (init_list_expr)))
        (string_literal "second template argument must be a complete class or an unbounded array")))
    (class_template is_nothrow_swappable_with
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (cxx_base_specifier __is_nothrow_swappable_with_impl<_Tp, _Up>::type
        (template_ref __is_nothrow_swappable_with_impl)
        (type_ref _Tp)
        (type_ref _Up))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Tp)
            (init_list_expr)))
        (string_literal "first template argument must be a complete class or an unbounded array"))
      (static_assert
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __is_complete_or_unbounded))
          (call_expr
            (template_ref __type_identity)
            (type_ref _Up)
            (init_list_expr)))
        (string_literal "second template argument must be a complete class or an unbounded array")))
    (class_template __is_invocable_impl
      (template_type_parameter _Result)
      (template_type_parameter _Ret)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_void)
          (type_ref _Ret)))
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_invocable_impl
      (template_type_parameter _Result)
      (template_type_parameter _Ret)
      (type_ref _Result)
      (type_ref _Ret)
      (cxx_bool_literal_expr)
      (template_ref __void_t)
      (type_ref _Result)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization __is_invocable_impl
      (template_type_parameter _Result)
      (template_type_parameter _Ret)
      (type_ref _Result)
      (type_ref _Ret)
      (cxx_bool_literal_expr)
      (template_ref __void_t)
      (type_ref _Result)
      (cxx_access_spec_decl)
      (cxx_method _S_get
        (type_ref _Result))
      (function_template _S_conv
        (template_type_parameter _Tp)
        (parm_decl
          (type_ref _Tp)))
      (function_template _S_test
        (template_type_parameter _Tp)
        (template_type_parameter
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _S_conv)
              (type_ref _Tp))
            (call_expr _S_get
              (decl_ref_expr _S_get))))
        (type_ref std::true_type)
        (parm_decl))
      (function_template _S_test
        (template_type_parameter _Tp)
        (type_ref std::false_type))
      (cxx_access_spec_decl)
      (type_alias_decl type
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_test)
            (type_ref _Ret))
          (integer_literal 1))))
    (class_template __is_invocable
      (template_type_parameter _Fn)
      (template_type_parameter _ArgTypes)
      (cxx_base_specifier __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
        (template_ref __is_invocable_impl)
        (template_ref __invoke_result)
        (type_ref _Fn)
        (type_ref _ArgTypes)))
    (function_template __call_is_nt
      (template_type_parameter _Fn)
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (parm_decl
        (type_ref struct std::__invoke_memfun_ref))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Up
            (template_ref __inv_unwrap)
            (type_ref _Tp)))
        (return_stmt
          (cxx_unary_expr
            (call_expr
              (paren_expr
                (binary_operator
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref declval)
                      (type_ref _Up)))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref declval)
                      (type_ref _Fn)))))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Args)))))))))
    (function_template __call_is_nt
      (template_type_parameter _Fn)
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (parm_decl
        (type_ref struct std::__invoke_memfun_deref))
      (compound_stmt
        (return_stmt
          (cxx_unary_expr
            (call_expr
              (paren_expr
                (binary_operator
                  (paren_expr
                    (unary_operator
                      (call_expr
                        (decl_ref_expr
                          (namespace_ref std)
                          (overloaded_decl_ref declval)
                          (type_ref _Tp)))))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref declval)
                      (type_ref _Fn)))))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Args)))))))))
    (function_template __call_is_nt
      (template_type_parameter _Fn)
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref struct std::__invoke_memobj_ref))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Up
            (template_ref __inv_unwrap)
            (type_ref _Tp)))
        (return_stmt
          (cxx_unary_expr
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Up)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Fn))))))))
    (function_template __call_is_nt
      (template_type_parameter _Fn)
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref struct std::__invoke_memobj_deref))
      (compound_stmt
        (return_stmt
          (cxx_unary_expr
            (binary_operator
              (paren_expr
                (unary_operator
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref declval)
                      (type_ref _Tp)))))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Fn))))))))
    (function_template __call_is_nt
      (template_type_parameter _Fn)
      (template_type_parameter _Args)
      (parm_decl
        (type_ref struct std::__invoke_other))
      (compound_stmt
        (return_stmt
          (cxx_unary_expr
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Fn)))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Args)))))))))
    (class_template __call_is_nothrow
      (template_type_parameter _Result)
      (template_type_parameter _Fn)
      (template_type_parameter _Args)
      (cxx_base_specifier __bool_constant<std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type({}))>
        (template_ref __bool_constant)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __call_is_nt)
            (type_ref _Fn)
            (type_ref _Args))
          (call_expr
            (type_ref _Result)
            (init_list_expr)))))
    (type_alias_template_decl __call_is_nothrow_
      (template_type_parameter _Fn)
      (template_type_parameter _Args)
      (type_alias_decl __call_is_nothrow_
        (template_ref __call_is_nothrow)
        (template_ref __invoke_result)
        (type_ref _Fn)
        (type_ref _Args)
        (type_ref _Fn)
        (type_ref _Args)))
    (class_template __is_nothrow_invocable
      (template_type_parameter _Fn)
      (template_type_parameter _Args)
      (cxx_base_specifier __and_<__is_invocable<_Fn, _Args...>, __call_is_nothrow_<_Fn, _Args...> >::type
        (template_ref __and_)
        (template_ref __is_invocable)
        (type_ref _Fn)
        (type_ref _Args)
        (template_ref __call_is_nothrow_)
        (type_ref _Fn)
        (type_ref _Args)))
    (struct_decl __nonesuchbase)
    (struct_decl __nonesuch
      (cxx_base_specifier struct std::__nonesuchbase
        (type_ref struct std::__nonesuchbase))
      (destructor ~__nonesuch)
      (constructor __nonesuch
        (parm_decl
          (type_ref struct std::__nonesuch)))
      (cxx_method operator=
        (parm_decl
          (type_ref struct std::__nonesuch))))
    (var_decl value
      (template_ref integral_constant)
      (decl_ref_expr
        (integer_literal __v))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/move.h
  (namespace std
    (visibility_attr default)
    (function_template forward
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __t
        (namespace_ref std)
        (template_ref remove_reference)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (cxx_static_cast_expr
            (type_ref _Tp)
            (decl_ref_expr __t)))))
    (function_template forward
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __t
        (namespace_ref std)
        (template_ref remove_reference)
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (static_assert
            (unary_operator
              (decl_ref_expr
                (namespace_ref std)
                (template_ref is_lvalue_reference)
                (type_ref _Tp)))
            (string_literal "std::forward must not be used to convert an rvalue to an lvalue")))
        (return_stmt
          (cxx_static_cast_expr
            (type_ref _Tp)
            (decl_ref_expr __t)))))
    (function_template move
      (template_type_parameter _Tp)
      (namespace_ref std)
      (template_ref remove_reference)
      (type_ref _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (cxx_static_cast_expr
            (namespace_ref std)
            (template_ref remove_reference)
            (type_ref _Tp)
            (decl_ref_expr __t)))))
    (class_template __move_if_noexcept_cond
      (template_type_parameter _Tp)
      (cxx_base_specifier __and_<__not_<is_nothrow_move_constructible<_Tp> >, is_copy_constructible<_Tp> >::type
        (template_ref __and_)
        (template_ref __not_)
        (template_ref is_nothrow_move_constructible)
        (type_ref _Tp)
        (template_ref is_copy_constructible)
        (type_ref _Tp)))
    (function_template move_if_noexcept
      (template_type_parameter _Tp)
      (template_ref conditional)
      (decl_ref_expr
        (template_ref __move_if_noexcept_cond)
        (type_ref _Tp))
      (type_ref _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __x)))))
    (function_template addressof
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __r
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __addressof))
            (decl_ref_expr __r)))))
    (function_template addressof
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl
        (type_ref _Tp)))
    (function_template __exchange
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (type_ref _Tp))
      (type_ref _Tp)
      (parm_decl __obj
        (type_ref _Tp))
      (parm_decl __new_val
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (var_decl __old_val
            (type_ref _Tp)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __obj))))
        (binary_operator
          (decl_ref_expr __obj)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __new_val)))
        (return_stmt
          (decl_ref_expr __old_val))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __and_)
        (template_ref __not_)
        (template_ref __is_tuple_like)
        (type_ref _Tp)
        (template_ref is_move_constructible)
        (type_ref _Tp)
        (template_ref is_move_assignable)
        (type_ref _Tp))
      (parm_decl __a
        (type_ref _Tp))
      (parm_decl __b
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl __tmp
            (type_ref _Tp)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __a))))
        (binary_operator
          (decl_ref_expr __a)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __b)))
        (binary_operator
          (decl_ref_expr __b)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __tmp)))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __is_swappable)
        (type_ref _Tp))
      (parm_decl __a
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __b
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (for_stmt
          (decl_stmt
            (var_decl __n
              (type_ref std::size_t)
              (integer_literal 0)))
          (binary_operator
            (decl_ref_expr __n)
            (decl_ref_expr _Nm))
          (unary_operator
            (decl_ref_expr __n))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (array_subscript_expr
              (decl_ref_expr __a)
              (decl_ref_expr __n))
            (array_subscript_expr
              (decl_ref_expr __b)
              (decl_ref_expr __n)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_pair.h
  (namespace std
    (visibility_attr default)
    (struct_decl piecewise_construct_t
      (constructor piecewise_construct_t))
    (var_decl piecewise_construct
      (type_ref struct std::piecewise_construct_t)
      (call_expr
        (call_expr piecewise_construct_t
          (type_ref struct std::piecewise_construct_t))))
    (class_template tuple
      (template_type_parameter))
    (class_template _Index_tuple
      (template_non_type_parameter
        (type_ref std::size_t)))
    (class_template _PCC
      (template_non_type_parameter)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (function_template _ConstructiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_constructible)
              (type_ref _T2)
              (type_ref _U2)))))
      (function_template _ImplicitlyConvertiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_convertible)
              (type_ref _U1)
              (type_ref _T1)
              (template_ref is_convertible)
              (type_ref _U2)
              (type_ref _T2)))))
      (function_template _MoveConstructiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_constructible)
              (type_ref _T2)
              (type_ref _U2)))))
      (function_template _ImplicitlyMoveConvertiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_convertible)
              (type_ref _U1)
              (type_ref _T1)
              (template_ref is_convertible)
              (type_ref _U2)
              (type_ref _T2)))))
      (function_template _CopyMovePair
        (template_non_type_parameter __implicit)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (decl_stmt
            (type_alias_decl __do_converts
              (template_ref __and_)
              (template_ref is_convertible)
              (type_ref _U1)
              (type_ref _T1)
              (template_ref is_convertible)
              (type_ref _U2)
              (type_ref _T2)))
          (decl_stmt
            (type_alias_decl __converts
              (template_ref conditional)
              (decl_ref_expr __implicit)
              (type_ref __do_converts)
              (template_ref __not_)
              (type_ref __do_converts)))
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_constructible)
              (type_ref _T2)
              (type_ref _U2)
              (type_ref __converts)))))
      (function_template _MoveCopyPair
        (template_non_type_parameter __implicit)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (decl_stmt
            (type_alias_decl __do_converts
              (template_ref __and_)
              (template_ref is_convertible)
              (type_ref _U1)
              (type_ref _T1)
              (template_ref is_convertible)
              (type_ref _U2)
              (type_ref _T2)))
          (decl_stmt
            (type_alias_decl __converts
              (template_ref conditional)
              (decl_ref_expr __implicit)
              (type_ref __do_converts)
              (template_ref __not_)
              (type_ref __do_converts)))
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_constructible)
              (type_ref _T2)
              (type_ref _U2)
              (type_ref __converts))))))
    (class_template_partial_specialization _PCC
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (cxx_bool_literal_expr)
      (type_ref _T1)
      (type_ref _T2)
      (function_template _ConstructiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr))))
      (function_template _ImplicitlyConvertiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr))))
      (function_template _MoveConstructiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr))))
      (function_template _ImplicitlyMoveConvertiblePair
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (class_template __pair_base
      (template_type_parameter _U1)
      (template_type_parameter _U2)
      (friend_decl
        (class_template pair
          (template_type_parameter _T1)
          (template_type_parameter _T2)))
      (constructor __pair_base<_U1, _U2>)
      (destructor ~__pair_base<_U1, _U2>)
      (constructor __pair_base<_U1, _U2>
        (parm_decl
          (type_ref __pair_base<_U1, _U2>)))
      (cxx_method operator=
        (type_ref __pair_base<_U1, _U2>)
        (parm_decl
          (type_ref __pair_base<_U1, _U2>))))
    (class_template pair
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (cxx_base_specifier __pair_base<_T1, _T2>
        (template_ref __pair_base)
        (type_ref _T1)
        (type_ref _T2))
      (typedef_decl first_type
        (type_ref _T1))
      (typedef_decl second_type
        (type_ref _T2))
      (field_decl first
        (type_ref _T1))
      (field_decl second
        (type_ref _T2))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1
          (type_ref _T1))
        (template_type_parameter _U2
          (type_ref _T2))
        (template_non_type_parameter
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref __is_implicitly_default_constructible)
            (type_ref _U1)
            (template_ref __is_implicitly_default_constructible)
            (type_ref _U2))
          (cxx_bool_literal_expr))
        (member_ref first)
        (member_ref second)
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1
          (type_ref _T1))
        (template_type_parameter _U2
          (type_ref _T2))
        (template_non_type_parameter
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref is_default_constructible)
            (type_ref _U1)
            (template_ref is_default_constructible)
            (type_ref _U2)
            (template_ref __not_)
            (template_ref __and_)
            (template_ref __is_implicitly_default_constructible)
            (type_ref _U1)
            (template_ref __is_implicitly_default_constructible)
            (type_ref _U2))
          (cxx_bool_literal_expr))
        (member_ref first)
        (member_ref second)
        (compound_stmt))
      (type_alias_decl _PCCP
        (template_ref _PCC)
        (cxx_bool_literal_expr)
        (type_ref _T1)
        (type_ref _T2))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1
          (type_ref _T1))
        (template_type_parameter _U2
          (type_ref _T2))
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2)))
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2))))
          (cxx_bool_literal_expr))
        (parm_decl __a
          (type_ref _T1))
        (parm_decl __b
          (type_ref _T2))
        (member_ref first)
        (decl_ref_expr __a)
        (member_ref second)
        (decl_ref_expr __b)
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1
          (type_ref _T1))
        (template_type_parameter _U2
          (type_ref _T2))
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2)))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (type_ref std::pair::_PCCP)
                  (type_ref _U1)
                  (type_ref _U2)))))
          (cxx_bool_literal_expr))
        (parm_decl __a
          (type_ref _T1))
        (parm_decl __b
          (type_ref _T2))
        (member_ref first)
        (decl_ref_expr __a)
        (member_ref second)
        (decl_ref_expr __b)
        (compound_stmt))
      (type_alias_template_decl _PCCFP
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (type_alias_decl _PCCFP
          (template_ref _PCC)
          (binary_operator
            (unary_operator
              (decl_ref_expr
                (template_ref is_same)
                (type_ref _T1)
                (type_ref _U1)))
            (unary_operator
              (decl_ref_expr
                (template_ref is_same)
                (type_ref _T2)
                (type_ref _U2))))
          (type_ref _T1)
          (type_ref _T2)))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2)))
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2))))
          (cxx_bool_literal_expr))
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (member_ref first)
        (member_ref_expr
          (decl_ref_expr __p))
        (member_ref second)
        (member_ref_expr
          (decl_ref_expr __p))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2)))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (template_ref _PCCFP)
                  (type_ref _U1)
                  (type_ref _U2)
                  (type_ref _U1)
                  (type_ref _U2)))))
          (cxx_bool_literal_expr))
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (member_ref first)
        (member_ref_expr
          (decl_ref_expr __p))
        (member_ref second)
        (member_ref_expr
          (decl_ref_expr __p))
        (compound_stmt))
      (constructor pair<_T1, _T2>
        (parm_decl
          (type_ref pair<_T1, _T2>)))
      (constructor pair<_T1, _T2>
        (parm_decl
          (type_ref pair<_T1, _T2>)))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_non_type_parameter
          (template_ref enable_if)
          (call_expr
            (decl_ref_expr
              (type_ref std::pair::_PCCP)
              (cxx_bool_literal_expr)
              (type_ref _U1)
              (type_ref _T2)))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _U1))
        (parm_decl __y
          (type_ref _T2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __x))
        (member_ref second)
        (decl_ref_expr __y)
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_non_type_parameter
          (template_ref enable_if)
          (call_expr
            (decl_ref_expr
              (type_ref std::pair::_PCCP)
              (cxx_bool_literal_expr)
              (type_ref _U1)
              (type_ref _T2)))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _U1))
        (parm_decl __y
          (type_ref _T2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __x))
        (member_ref second)
        (decl_ref_expr __y)
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (call_expr
            (decl_ref_expr
              (type_ref std::pair::_PCCP)
              (cxx_bool_literal_expr)
              (type_ref _T1)
              (type_ref _U2)))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _T1))
        (parm_decl __y
          (type_ref _U2))
        (member_ref first)
        (decl_ref_expr __x)
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __y))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (call_expr
            (decl_ref_expr
              (type_ref std::pair::_PCCP)
              (cxx_bool_literal_expr)
              (type_ref _T1)
              (type_ref _U2)))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _T1))
        (parm_decl __y
          (type_ref _U2))
        (member_ref first)
        (decl_ref_expr __x)
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __y))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2)))
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2))))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _U1))
        (parm_decl __y
          (type_ref _U2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __x))
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __y))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (type_ref std::pair::_PCCP)
                (type_ref _U1)
                (type_ref _U2)))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (type_ref std::pair::_PCCP)
                  (type_ref _U1)
                  (type_ref _U2)))))
          (cxx_bool_literal_expr))
        (parm_decl __x
          (type_ref _U1))
        (parm_decl __y
          (type_ref _U2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __x))
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __y))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2)))
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2))))
          (cxx_bool_literal_expr))
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __p)))
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __p)))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref enable_if)
          (binary_operator
            (call_expr
              (decl_ref_expr
                (template_ref _PCCFP)
                (type_ref _U1)
                (type_ref _U2)
                (type_ref _U1)
                (type_ref _U2)))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (template_ref _PCCFP)
                  (type_ref _U1)
                  (type_ref _U2)
                  (type_ref _U1)
                  (type_ref _U2)))))
          (cxx_bool_literal_expr))
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (member_ref first)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __p)))
        (member_ref second)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __p)))
        (compound_stmt))
      (function_template pair<_T1, _T2>
        (template_type_parameter _Args1)
        (template_type_parameter _Args2)
        (parm_decl
          (type_ref struct std::piecewise_construct_t))
        (parm_decl
          (template_ref tuple)
          (type_ref _Args1))
        (parm_decl
          (template_ref tuple)
          (type_ref _Args2)))
      (cxx_method operator=
        (type_ref pair<_T1, _T2>)
        (parm_decl __p
          (template_ref conditional)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref is_copy_assignable)
            (type_ref _T1)
            (template_ref is_copy_assignable)
            (type_ref _T2))
          (type_ref pair<_T1, _T2>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (binary_operator
            (member_ref_expr first)
            (member_ref_expr
              (decl_ref_expr __p)))
          (binary_operator
            (member_ref_expr second)
            (member_ref_expr
              (decl_ref_expr __p)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref pair<_T1, _T2>)
        (parm_decl __p
          (template_ref conditional)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref is_move_assignable)
            (type_ref _T1)
            (template_ref is_move_assignable)
            (type_ref _T2))
          (type_ref pair<_T1, _T2>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (binary_operator
            (member_ref_expr first)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref std::pair::first_type))
              (member_ref_expr
                (decl_ref_expr __p))))
          (binary_operator
            (member_ref_expr second)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref std::pair::second_type))
              (member_ref_expr
                (decl_ref_expr __p))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref is_assignable)
          (type_ref _T1)
          (type_ref _U1)
          (template_ref is_assignable)
          (type_ref _T2)
          (type_ref _U2))
        (type_ref pair<_T1, _T2>)
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (binary_operator
            (member_ref_expr first)
            (member_ref_expr
              (decl_ref_expr __p)))
          (binary_operator
            (member_ref_expr second)
            (member_ref_expr
              (decl_ref_expr __p)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref is_assignable)
          (type_ref _T1)
          (type_ref _U1)
          (template_ref is_assignable)
          (type_ref _T2)
          (type_ref _U2))
        (type_ref pair<_T1, _T2>)
        (parm_decl __p
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (binary_operator
            (member_ref_expr first)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _U1))
              (member_ref_expr
                (decl_ref_expr __p))))
          (binary_operator
            (member_ref_expr second)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _U2))
              (member_ref_expr
                (decl_ref_expr __p))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method swap
        (parm_decl __p
          (type_ref pair<_T1, _T2>))
        (compound_stmt
          (decl_stmt
            (using_declaration swap
              (namespace_ref std)
              (overloaded_decl_ref swap)))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (member_ref_expr first)
            (member_ref_expr
              (decl_ref_expr __p)))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (member_ref_expr second)
            (member_ref_expr
              (decl_ref_expr __p)))))
      (cxx_access_spec_decl)
      (function_template pair<_T1, _T2>
        (template_type_parameter _Args1)
        (template_non_type_parameter _Indexes1
          (type_ref std::size_t))
        (template_type_parameter _Args2)
        (template_non_type_parameter _Indexes2
          (type_ref std::size_t))
        (parm_decl
          (template_ref tuple)
          (type_ref _Args1))
        (parm_decl
          (template_ref tuple)
          (type_ref _Args2))
        (parm_decl
          (template_ref _Index_tuple)
          (pack_expansion_expr
            (decl_ref_expr _Indexes1)))
        (parm_decl
          (template_ref _Index_tuple)
          (pack_expansion_expr
            (decl_ref_expr _Indexes2)))))
    (function_template operator==
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (member_ref_expr
                (decl_ref_expr __y)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x))
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (member_ref_expr
                (decl_ref_expr __y)))
            (paren_expr
              (binary_operator
                (unary_operator
                  (paren_expr
                    (call_expr
                      (member_ref_expr
                        (decl_ref_expr __y))
                      (decl_ref_expr
                        (overloaded_decl_ref operator<))
                      (member_ref_expr
                        (decl_ref_expr __x)))))
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __x))
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (member_ref_expr
                    (decl_ref_expr __y)))))))))
    (function_template operator!=
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __y)))))))
    (function_template operator>
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __y)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __x)))))
    (function_template operator<=
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __y)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator>=
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y)))))))
    (function_template swap
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __and_)
        (template_ref __is_swappable)
        (type_ref _T1)
        (template_ref __is_swappable)
        (type_ref _T2))
      (parm_decl __x
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl __y
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __x))
          (decl_ref_expr __y))))
    (function_template swap
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __is_swappable)
          (type_ref _T1)
          (template_ref __is_swappable)
          (type_ref _T2)))
      (parm_decl
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2))
      (parm_decl
        (template_ref pair)
        (type_ref _T1)
        (type_ref _T2)))
    (function_template make_pair
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref pair)
      (template_ref __decay_and_strip)
      (type_ref _T1)
      (template_ref __decay_and_strip)
      (type_ref _T2)
      (parm_decl __x
        (type_ref _T1))
      (parm_decl __y
        (type_ref _T2))
      (compound_stmt
        (decl_stmt
          (typedef_decl __ds_type1
            (template_ref __decay_and_strip)
            (type_ref _T1)))
        (decl_stmt
          (typedef_decl __ds_type2
            (template_ref __decay_and_strip)
            (type_ref _T2)))
        (decl_stmt
          (typedef_decl __pair_type
            (template_ref pair)
            (type_ref __ds_type1)
            (type_ref __ds_type2)))
        (return_stmt
          (call_expr
            (type_ref __pair_type)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _T1))
              (decl_ref_expr __x))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _T2))
              (decl_ref_expr __y)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator_base_types.h
  (namespace std
    (visibility_attr default)
    (struct_decl input_iterator_tag)
    (struct_decl output_iterator_tag)
    (struct_decl forward_iterator_tag
      (cxx_base_specifier struct std::input_iterator_tag
        (type_ref struct std::input_iterator_tag)))
    (struct_decl bidirectional_iterator_tag
      (cxx_base_specifier struct std::forward_iterator_tag
        (type_ref struct std::forward_iterator_tag)))
    (struct_decl random_access_iterator_tag
      (cxx_base_specifier struct std::bidirectional_iterator_tag
        (type_ref struct std::bidirectional_iterator_tag)))
    (class_template iterator
      (template_type_parameter _Category)
      (template_type_parameter _Tp)
      (template_type_parameter _Distance
        (type_ref std::ptrdiff_t))
      (template_type_parameter _Pointer
        (type_ref _Tp))
      (template_type_parameter _Reference
        (type_ref _Tp))
      (typedef_decl iterator_category
        (type_ref _Category))
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl difference_type
        (type_ref _Distance))
      (typedef_decl pointer
        (type_ref _Pointer))
      (typedef_decl reference
        (type_ref _Reference)))
    (class_template iterator_traits
      (template_type_parameter _Iterator))
    (class_template __iterator_traits
      (template_type_parameter _Iterator)
      (template_type_parameter
        (template_ref __void_t)))
    (class_template_partial_specialization __iterator_traits
      (template_type_parameter _Iterator)
      (type_ref _Iterator)
      (template_ref __void_t)
      (type_ref _Iterator)
      (type_ref _Iterator)
      (type_ref _Iterator)
      (type_ref _Iterator)
      (type_ref _Iterator)
      (typedef_decl iterator_category
        (type_ref _Iterator))
      (typedef_decl value_type
        (type_ref _Iterator))
      (typedef_decl difference_type
        (type_ref _Iterator))
      (typedef_decl pointer
        (type_ref _Iterator))
      (typedef_decl reference
        (type_ref _Iterator)))
    (class_template iterator_traits
      (template_type_parameter _Iterator)
      (cxx_base_specifier __iterator_traits<_Iterator>
        (template_ref __iterator_traits)
        (type_ref _Iterator)))
    (class_template_partial_specialization iterator_traits
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl iterator_category
        (type_ref struct std::random_access_iterator_tag))
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl difference_type
        (type_ref std::ptrdiff_t))
      (typedef_decl pointer
        (type_ref _Tp))
      (typedef_decl reference
        (type_ref _Tp)))
    (class_template_partial_specialization iterator_traits
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl iterator_category
        (type_ref struct std::random_access_iterator_tag))
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl difference_type
        (type_ref std::ptrdiff_t))
      (typedef_decl pointer
        (type_ref _Tp))
      (typedef_decl reference
        (type_ref _Tp)))
    (function_template __iterator_category
      (template_type_parameter _Iter)
      (template_ref iterator_traits)
      (type_ref _Iter)
      (parm_decl
        (type_ref _Iter))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref iterator_traits)
            (type_ref _Iter)))))
    (type_alias_template_decl __iterator_category_t
      (template_type_parameter _Iter)
      (type_alias_decl __iterator_category_t
        (template_ref iterator_traits)
        (type_ref _Iter)))
    (type_alias_template_decl _RequireInputIter
      (template_type_parameter _InIter)
      (type_alias_decl _RequireInputIter
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref is_convertible)
          (template_ref __iterator_category_t)
          (type_ref _InIter)
          (type_ref struct std::input_iterator_tag))))
    (class_template __is_random_access_iter
      (template_type_parameter _It)
      (template_type_parameter _Cat
        (template_ref __iterator_category_t)
        (type_ref _It))
      (cxx_base_specifier is_base_of<struct std::random_access_iterator_tag, _Cat>
        (template_ref is_base_of)
        (type_ref struct std::random_access_iterator_tag)
        (type_ref _Cat))
      (typedef_decl _Base
        (template_ref is_base_of)
        (type_ref struct std::random_access_iterator_tag)
        (type_ref _Cat))
      (enum_decl
        (enum_constant_decl __value
          (decl_ref_expr
            (type_ref std::__is_random_access_iter::_Base))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator_base_funcs.h
  (namespace std
    (visibility_attr default)
    (class_template _List_iterator
      (template_type_parameter))
    (class_template _List_const_iterator
      (template_type_parameter))
    (function_template __distance
      (template_type_parameter _InputIterator)
      (template_ref iterator_traits)
      (type_ref _InputIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (decl_stmt
          (var_decl __n
            (template_ref iterator_traits)
            (type_ref _InputIterator)
            (integer_literal 0)))
        (while_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (compound_stmt
            (unary_operator
              (decl_ref_expr __first))
            (unary_operator
              (decl_ref_expr __n))))
        (return_stmt
          (decl_ref_expr __n))))
    (function_template __distance
      (template_type_parameter _RandomAccessIterator)
      (template_ref iterator_traits)
      (type_ref _RandomAccessIterator)
      (parm_decl __first
        (type_ref _RandomAccessIterator))
      (parm_decl __last
        (type_ref _RandomAccessIterator))
      (parm_decl
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (return_stmt
          (binary_operator
            (decl_ref_expr __last)
            (decl_ref_expr __first)))))
    (function_template __distance
      (template_type_parameter _Tp)
      (type_ref std::ptrdiff_t)
      (parm_decl
        (namespace_ref std)
        (template_ref _List_iterator)
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (template_ref _List_iterator)
        (type_ref _Tp))
      (parm_decl
        (type_ref struct std::input_iterator_tag)))
    (function_template __distance
      (template_type_parameter _Tp)
      (type_ref std::ptrdiff_t)
      (parm_decl
        (namespace_ref std)
        (template_ref _List_const_iterator)
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (template_ref _List_const_iterator)
        (type_ref _Tp))
      (parm_decl
        (type_ref struct std::input_iterator_tag)))
    (function_template distance
      (template_type_parameter _InputIterator)
      (template_ref iterator_traits)
      (type_ref _InputIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __distance))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __iterator_category))
              (decl_ref_expr __first))))))
    (function_template __advance
      (template_type_parameter _InputIterator)
      (template_type_parameter _Distance)
      (parm_decl __i
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Distance))
      (parm_decl
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (do_stmt
          (compound_stmt
            (if_stmt
              (binary_operator
                (call_expr __builtin_is_constant_evaluated
                  (decl_ref_expr __builtin_is_constant_evaluated))
                (unary_operator
                  (call_expr
                    (call_expr
                      (decl_ref_expr __n)
                      (decl_ref_expr
                        (overloaded_decl_ref operator>=))
                      (integer_literal 0)))))
              (call_expr __builtin_unreachable
                (decl_ref_expr __builtin_unreachable))))
          (cxx_bool_literal_expr))
        (while_stmt
          (unary_operator
            (decl_ref_expr __n))
          (unary_operator
            (decl_ref_expr __i)))))
    (function_template __advance
      (template_type_parameter _BidirectionalIterator)
      (template_type_parameter _Distance)
      (parm_decl __i
        (type_ref _BidirectionalIterator))
      (parm_decl __n
        (type_ref _Distance))
      (parm_decl
        (type_ref struct std::bidirectional_iterator_tag))
      (compound_stmt
        (if_stmt
          (call_expr
            (decl_ref_expr __n)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (while_stmt
            (unary_operator
              (decl_ref_expr __n))
            (unary_operator
              (decl_ref_expr __i)))
          (while_stmt
            (unary_operator
              (decl_ref_expr __n))
            (unary_operator
              (decl_ref_expr __i))))))
    (function_template __advance
      (template_type_parameter _RandomAccessIterator)
      (template_type_parameter _Distance)
      (parm_decl __i
        (type_ref _RandomAccessIterator))
      (parm_decl __n
        (type_ref _Distance))
      (parm_decl
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (if_stmt
          (binary_operator
            (call_expr __builtin_constant_p
              (decl_ref_expr __builtin_constant_p)
              (decl_ref_expr __n))
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 1)))
          (unary_operator
            (decl_ref_expr __i))
          (if_stmt
            (binary_operator
              (call_expr __builtin_constant_p
                (decl_ref_expr __builtin_constant_p)
                (decl_ref_expr __n))
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (unary_operator
                  (integer_literal 1))))
            (unary_operator
              (decl_ref_expr __i))
            (compound_assignment_operator
              (decl_ref_expr __i)
              (decl_ref_expr __n))))))
    (function_template advance
      (template_type_parameter _InputIterator)
      (template_type_parameter _Distance)
      (parm_decl __i
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Distance))
      (compound_stmt
        (decl_stmt
          (var_decl __d
            (template_ref iterator_traits)
            (type_ref _InputIterator)
            (decl_ref_expr __n)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __advance))
          (decl_ref_expr __i)
          (decl_ref_expr __d)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __iterator_category))
            (decl_ref_expr __i)))))
    (function_template next
      (template_type_parameter _InputIterator)
      (type_ref _InputIterator)
      (parm_decl __x
        (type_ref _InputIterator))
      (parm_decl __n
        (template_ref iterator_traits)
        (type_ref _InputIterator)
        (integer_literal 1))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref advance))
          (decl_ref_expr __x)
          (decl_ref_expr __n))
        (return_stmt
          (decl_ref_expr __x))))
    (function_template prev
      (template_type_parameter _BidirectionalIterator)
      (type_ref _BidirectionalIterator)
      (parm_decl __x
        (type_ref _BidirectionalIterator))
      (parm_decl __n
        (template_ref iterator_traits)
        (type_ref _BidirectionalIterator)
        (integer_literal 1))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref advance))
          (decl_ref_expr __x)
          (unary_operator
            (decl_ref_expr __n)))
        (return_stmt
          (decl_ref_expr __x)))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/ptr_traits.h
  (namespace std
    (visibility_attr default)
    (class_decl __undefined)
    (class_template __replace_first_arg
      (template_type_parameter _Tp)
      (template_type_parameter _Up))
    (class_template_partial_specialization __replace_first_arg
      (template_template_parameter _Template
        (template_type_parameter)
        (template_type_parameter))
      (template_type_parameter _Up)
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (template_ref _Template)
      (type_ref _Tp)
      (type_ref _Types)
      (type_ref _Up)
      (type_alias_decl type
        (template_ref _Template)
        (type_ref _Up)
        (type_ref _Types)))
    (type_alias_template_decl __replace_first_arg_t
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_alias_decl __replace_first_arg_t
        (template_ref __replace_first_arg)
        (type_ref _Tp)
        (type_ref _Up)))
    (type_alias_template_decl __make_not_void
      (template_type_parameter _Tp)
      (type_alias_decl __make_not_void
        (template_ref conditional)
        (decl_ref_expr
          (template_ref is_void)
          (type_ref _Tp))
        (type_ref class std::__undefined)
        (type_ref _Tp)))
    (class_template __ptr_traits_elem_1
      (template_type_parameter _Ptr))
    (class_template_partial_specialization __ptr_traits_elem_1
      (template_template_parameter _SomePointer
        (template_type_parameter)
        (template_type_parameter))
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (template_ref _SomePointer)
      (type_ref _Tp)
      (type_ref _Args)
      (type_alias_decl element_type
        (type_ref _Tp))
      (type_alias_decl pointer
        (template_ref _SomePointer)
        (type_ref _Tp)
        (type_ref _Args))
      (cxx_method pointer_to
        (type_ref std::__ptr_traits_elem_1<<type-parameter-0-1, type-parameter-0-2...> >::pointer)
        (parm_decl __e
          (template_ref __make_not_void)
          (type_ref std::__ptr_traits_elem_1<<type-parameter-0-1, type-parameter-0-2...> >::element_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref std::__ptr_traits_elem_1<<type-parameter-0-1, type-parameter-0-2...> >::pointer))
              (decl_ref_expr __e))))))
    (class_template __ptr_traits_elem
      (template_type_parameter _Ptr)
      (template_type_parameter)
      (cxx_base_specifier __ptr_traits_elem_1<_Ptr>
        (template_ref __ptr_traits_elem_1)
        (type_ref _Ptr)))
    (class_template_partial_specialization __ptr_traits_elem
      (template_type_parameter _Ptr)
      (type_ref _Ptr)
      (template_ref __void_t)
      (type_ref _Ptr)
      (type_alias_decl element_type
        (type_ref _Ptr))
      (cxx_method pointer_to
        (type_ref _Ptr)
        (parm_decl __e
          (template_ref __make_not_void)
          (type_ref std::__ptr_traits_elem<type-parameter-0-0>::element_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref _Ptr))
              (decl_ref_expr __e))))))
    (class_template pointer_traits
      (template_type_parameter _Ptr)
      (cxx_base_specifier __ptr_traits_elem<_Ptr>
        (template_ref __ptr_traits_elem)
        (type_ref _Ptr))
      (cxx_access_spec_decl)
      (type_alias_template_decl __difference_type
        (template_type_parameter _Tp)
        (type_alias_decl __difference_type
          (type_ref _Tp)))
      (class_template __rebind
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __replace_first_arg<_Tp, _Up>
          (template_ref __replace_first_arg)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __rebind
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (type_ref _Tp)
        (type_ref _Up)
        (type_alias_decl type
          (type_ref _Tp)
          (type_ref _Up)))
      (cxx_access_spec_decl)
      (type_alias_decl pointer
        (type_ref _Ptr))
      (type_alias_decl difference_type
        (template_ref __detected_or_t)
        (type_ref std::ptrdiff_t)
        (template_ref __difference_type)
        (type_ref _Ptr))
      (type_alias_template_decl rebind
        (template_type_parameter _Up)
        (type_alias_decl rebind
          (template_ref __rebind)
          (type_ref _Ptr)
          (type_ref _Up))))
    (class_template_partial_specialization pointer_traits
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl pointer
        (type_ref _Tp))
      (typedef_decl element_type
        (type_ref _Tp))
      (typedef_decl difference_type
        (type_ref std::ptrdiff_t))
      (type_alias_template_decl rebind
        (template_type_parameter _Up)
        (type_alias_decl rebind
          (type_ref _Up)))
      (cxx_method pointer_to
        (type_ref std::pointer_traits<type-parameter-0-0 *>::pointer)
        (parm_decl __r
          (template_ref __make_not_void)
          (type_ref std::pointer_traits<type-parameter-0-0 *>::element_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref addressof))
              (decl_ref_expr __r))))))
    (type_alias_template_decl __ptr_rebind
      (template_type_parameter _Ptr)
      (template_type_parameter _Tp)
      (type_alias_decl __ptr_rebind
        (template_ref pointer_traits)
        (type_ref _Ptr)
        (type_ref _Tp)))
    (function_template __to_address
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __ptr
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (static_assert
            (unary_operator
              (decl_ref_expr
                (namespace_ref std)
                (template_ref is_function)
                (type_ref _Tp)))
            (string_literal "not a function pointer")))
        (return_stmt
          (decl_ref_expr __ptr))))
    (function_template __to_address
      (template_type_parameter _Ptr)
      (namespace_ref std)
      (template_ref pointer_traits)
      (type_ref _Ptr)
      (parm_decl __ptr
        (type_ref _Ptr))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __to_address))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __ptr))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator.h
  (namespace std
    (visibility_attr default)
    (class_template reverse_iterator
      (template_type_parameter _Iterator)
      (cxx_base_specifier iterator<typename iterator_traits<_Iterator>::iterator_category, typename iterator_traits<_Iterator>::value_type, typename iterator_traits<_Iterator>::difference_type, typename iterator_traits<_Iterator>::pointer, typename iterator_traits<_Iterator>::reference>
        (template_ref iterator)
        (template_ref iterator_traits)
        (type_ref _Iterator)
        (template_ref iterator_traits)
        (type_ref _Iterator)
        (template_ref iterator_traits)
        (type_ref _Iterator)
        (template_ref iterator_traits)
        (type_ref _Iterator)
        (template_ref iterator_traits)
        (type_ref _Iterator))
      (friend_decl
        (class_template reverse_iterator
          (template_type_parameter _Iter)))
      (cxx_access_spec_decl)
      (field_decl current
        (type_ref _Iterator))
      (typedef_decl __traits_type
        (template_ref iterator_traits)
        (type_ref _Iterator))
      (cxx_access_spec_decl)
      (typedef_decl iterator_type
        (type_ref _Iterator))
      (typedef_decl pointer
        (type_ref std::reverse_iterator::__traits_type))
      (typedef_decl difference_type
        (type_ref std::reverse_iterator::__traits_type))
      (typedef_decl reference
        (type_ref std::reverse_iterator::__traits_type))
      (constructor reverse_iterator<_Iterator>
        (member_ref current)
        (compound_stmt))
      (constructor reverse_iterator<_Iterator>
        (parm_decl __x
          (type_ref std::reverse_iterator::iterator_type))
        (member_ref current)
        (decl_ref_expr __x)
        (compound_stmt))
      (constructor reverse_iterator<_Iterator>
        (parm_decl __x
          (type_ref reverse_iterator<_Iterator>))
        (member_ref current)
        (member_ref_expr
          (decl_ref_expr __x))
        (compound_stmt))
      (cxx_method operator=
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl
          (type_ref reverse_iterator<_Iterator>)))
      (function_template reverse_iterator<_Iterator>
        (template_type_parameter _Iter)
        (parm_decl __x
          (template_ref reverse_iterator)
          (type_ref _Iter))
        (member_ref current)
        (member_ref_expr
          (decl_ref_expr __x))
        (compound_stmt))
      (function_template operator=
        (template_type_parameter _Iter)
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl __x
          (template_ref reverse_iterator)
          (type_ref _Iter))
        (compound_stmt
          (binary_operator
            (member_ref_expr current)
            (member_ref_expr
              (decl_ref_expr __x)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method base
        (type_ref std::reverse_iterator::iterator_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr current))))
      (cxx_method operator*
        (type_ref std::reverse_iterator::reference)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref _Iterator)
              (member_ref_expr current)))
          (return_stmt
            (unary_operator
              (unary_operator
                (decl_ref_expr __tmp))))))
      (cxx_method operator->
        (type_ref std::reverse_iterator::pointer)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref _Iterator)
              (member_ref_expr current)))
          (unary_operator
            (decl_ref_expr __tmp))
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_to_pointer))
              (decl_ref_expr __tmp)))))
      (cxx_method operator++
        (type_ref reverse_iterator<_Iterator>)
        (compound_stmt
          (unary_operator
            (member_ref_expr current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref reverse_iterator<_Iterator>)
              (unary_operator
                (cxx_this_expr))))
          (unary_operator
            (member_ref_expr current))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method operator--
        (type_ref reverse_iterator<_Iterator>)
        (compound_stmt
          (unary_operator
            (member_ref_expr current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator--
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref reverse_iterator<_Iterator>)
              (unary_operator
                (cxx_this_expr))))
          (unary_operator
            (member_ref_expr current))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method operator+
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::reverse_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref reverse_iterator<_Iterator>)
              (binary_operator
                (member_ref_expr current)
                (decl_ref_expr __n))))))
      (cxx_method operator+=
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::reverse_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator-
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::reverse_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref reverse_iterator<_Iterator>)
              (binary_operator
                (member_ref_expr current)
                (decl_ref_expr __n))))))
      (cxx_method operator-=
        (type_ref reverse_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::reverse_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator[]
        (type_ref std::reverse_iterator::reference)
        (parm_decl __n
          (type_ref std::reverse_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (unary_operator
              (paren_expr
                (binary_operator
                  (unary_operator
                    (cxx_this_expr))
                  (decl_ref_expr __n)))))))
      (cxx_access_spec_decl)
      (function_template _S_to_pointer
        (template_type_parameter _Tp)
        (type_ref _Tp)
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __p))))
      (function_template _S_to_pointer
        (template_type_parameter _Tp)
        (type_ref std::reverse_iterator::pointer)
        (parm_decl __t
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __t)))))))
    (function_template operator==
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))))))
    (function_template operator!=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __y)))))))
    (function_template operator>
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __y)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __x)))))
    (function_template operator<=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __y)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator>=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y)))))))
    (function_template operator==
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator!=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator>
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator>=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator>=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator-
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref reverse_iterator)
        (type_ref _IteratorR))
      (binary_operator
        (call_expr
          (member_ref_expr
            (decl_ref_expr __y)))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __x))))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))))))
    (function_template operator+
      (template_type_parameter _Iterator)
      (template_ref reverse_iterator)
      (type_ref _Iterator)
      (parm_decl __n
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (parm_decl __x
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Iterator)
            (call_expr
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __x)))
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (decl_ref_expr __n))))))
    (function_template __make_reverse_iterator
      (template_type_parameter _Iterator)
      (template_ref reverse_iterator)
      (type_ref _Iterator)
      (parm_decl __i
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Iterator)
            (decl_ref_expr __i)))))
    (function_template make_reverse_iterator
      (template_type_parameter _Iterator)
      (template_ref reverse_iterator)
      (type_ref _Iterator)
      (parm_decl __i
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Iterator)
            (decl_ref_expr __i)))))
    (function_template __niter_base
      (template_type_parameter _Iterator)
      (parm_decl __it
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref __make_reverse_iterator))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __niter_base))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __it)))))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __make_reverse_iterator))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __niter_base))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __it))))))))
    (class_template_partial_specialization __is_move_iterator
      (template_type_parameter _Iterator)
      (template_ref reverse_iterator)
      (type_ref _Iterator)
      (cxx_base_specifier __is_move_iterator<_Iterator>
        (template_ref __is_move_iterator)
        (type_ref _Iterator)))
    (function_template __miter_base
      (template_type_parameter _Iterator)
      (parm_decl __it
        (template_ref reverse_iterator)
        (type_ref _Iterator))
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref __make_reverse_iterator))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __miter_base))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __it)))))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __make_reverse_iterator))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __miter_base))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __it))))))))
    (class_template back_insert_iterator
      (template_type_parameter _Container)
      (cxx_base_specifier iterator<struct std::output_iterator_tag, void, void, void, void>
        (template_ref iterator)
        (type_ref struct std::output_iterator_tag))
      (cxx_access_spec_decl)
      (field_decl container
        (type_ref _Container))
      (cxx_access_spec_decl)
      (typedef_decl container_type
        (type_ref _Container))
      (constructor back_insert_iterator<_Container>
        (parm_decl __x
          (type_ref _Container))
        (member_ref container)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __addressof))
          (decl_ref_expr __x))
        (compound_stmt))
      (cxx_method operator=
        (type_ref back_insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr container))
            (decl_ref_expr __value))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref back_insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr container))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __value)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator*
        (type_ref back_insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref back_insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref back_insert_iterator<_Container>)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr))))))
    (function_template back_inserter
      (template_type_parameter _Container)
      (template_ref back_insert_iterator)
      (type_ref _Container)
      (parm_decl __x
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref back_insert_iterator)
            (type_ref _Container)
            (decl_ref_expr __x)))))
    (class_template front_insert_iterator
      (template_type_parameter _Container)
      (cxx_base_specifier iterator<struct std::output_iterator_tag, void, void, void, void>
        (template_ref iterator)
        (type_ref struct std::output_iterator_tag))
      (cxx_access_spec_decl)
      (field_decl container
        (type_ref _Container))
      (cxx_access_spec_decl)
      (typedef_decl container_type
        (type_ref _Container))
      (constructor front_insert_iterator<_Container>
        (parm_decl __x
          (type_ref _Container))
        (member_ref container)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __addressof))
          (decl_ref_expr __x))
        (compound_stmt))
      (cxx_method operator=
        (type_ref front_insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr container))
            (decl_ref_expr __value))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref front_insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr container))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __value)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator*
        (type_ref front_insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref front_insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref front_insert_iterator<_Container>)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr))))))
    (function_template front_inserter
      (template_type_parameter _Container)
      (template_ref front_insert_iterator)
      (type_ref _Container)
      (parm_decl __x
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref front_insert_iterator)
            (type_ref _Container)
            (decl_ref_expr __x)))))
    (class_template insert_iterator
      (template_type_parameter _Container)
      (cxx_base_specifier iterator<struct std::output_iterator_tag, void, void, void, void>
        (template_ref iterator)
        (type_ref struct std::output_iterator_tag))
      (typedef_decl _Iter
        (type_ref _Container))
      (cxx_access_spec_decl)
      (field_decl container
        (type_ref _Container))
      (field_decl iter
        (type_ref std::insert_iterator::_Iter))
      (cxx_access_spec_decl)
      (typedef_decl container_type
        (type_ref _Container))
      (constructor insert_iterator<_Container>
        (parm_decl __x
          (type_ref _Container))
        (parm_decl __i
          (type_ref std::insert_iterator::_Iter))
        (member_ref container)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __addressof))
          (decl_ref_expr __x))
        (member_ref iter)
        (decl_ref_expr __i)
        (compound_stmt))
      (cxx_method operator=
        (type_ref insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (binary_operator
            (member_ref_expr iter)
            (call_expr
              (member_ref_expr
                (member_ref_expr container))
              (member_ref_expr iter)
              (decl_ref_expr __value)))
          (unary_operator
            (member_ref_expr iter))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref insert_iterator<_Container>)
        (parm_decl __value
          (type_ref _Container))
        (compound_stmt
          (binary_operator
            (member_ref_expr iter)
            (call_expr
              (member_ref_expr
                (member_ref_expr container))
              (member_ref_expr iter)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __value))))
          (unary_operator
            (member_ref_expr iter))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator*
        (type_ref insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref insert_iterator<_Container>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref insert_iterator<_Container>)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr))))))
    (function_template inserter
      (template_type_parameter _Container)
      (template_ref insert_iterator)
      (type_ref _Container)
      (parm_decl __x
        (type_ref _Container))
      (parm_decl __i
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref insert_iterator)
            (type_ref _Container)
            (decl_ref_expr __x)
            (decl_ref_expr __i))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (class_template __normal_iterator
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (cxx_access_spec_decl)
      (field_decl _M_current
        (type_ref _Iterator))
      (typedef_decl __traits_type
        (namespace_ref std)
        (template_ref iterator_traits)
        (type_ref _Iterator))
      (cxx_access_spec_decl)
      (typedef_decl iterator_type
        (type_ref _Iterator))
      (typedef_decl iterator_category
        (type_ref __gnu_cxx::__normal_iterator::__traits_type))
      (typedef_decl value_type
        (type_ref __gnu_cxx::__normal_iterator::__traits_type))
      (typedef_decl difference_type
        (type_ref __gnu_cxx::__normal_iterator::__traits_type))
      (typedef_decl reference
        (type_ref __gnu_cxx::__normal_iterator::__traits_type))
      (typedef_decl pointer
        (type_ref __gnu_cxx::__normal_iterator::__traits_type))
      (constructor __normal_iterator<_Iterator, _Container>
        (member_ref _M_current)
        (call_expr
          (type_ref _Iterator))
        (compound_stmt))
      (constructor __normal_iterator<_Iterator, _Container>
        (parm_decl __i
          (type_ref _Iterator))
        (member_ref _M_current)
        (decl_ref_expr __i)
        (compound_stmt))
      (function_template __normal_iterator<_Iterator, _Container>
        (template_type_parameter _Iter)
        (parm_decl __i
          (template_ref __normal_iterator)
          (type_ref _Iter)
          (template_ref __enable_if)
          (paren_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __are_same)
              (type_ref _Iter)
              (type_ref _Container)))
          (type_ref _Container))
        (member_ref _M_current)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __i)))
        (compound_stmt))
      (cxx_method operator*
        (type_ref __gnu_cxx::__normal_iterator::reference)
        (compound_stmt
          (return_stmt
            (unary_operator
              (member_ref_expr _M_current)))))
      (cxx_method operator->
        (type_ref __gnu_cxx::__normal_iterator::pointer)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_current))))
      (cxx_method operator++
        (type_ref __normal_iterator<_Iterator, _Container>)
        (compound_stmt
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref __normal_iterator<_Iterator, _Container>)
              (unary_operator
                (member_ref_expr _M_current))))))
      (cxx_method operator--
        (type_ref __normal_iterator<_Iterator, _Container>)
        (compound_stmt
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator--
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref __normal_iterator<_Iterator, _Container>)
              (unary_operator
                (member_ref_expr _M_current))))))
      (cxx_method operator[]
        (type_ref __gnu_cxx::__normal_iterator::reference)
        (parm_decl __n
          (type_ref __gnu_cxx::__normal_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (array_subscript_expr
              (member_ref_expr _M_current)
              (decl_ref_expr __n)))))
      (cxx_method operator+=
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl __n
          (type_ref __gnu_cxx::__normal_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator+
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl __n
          (type_ref __gnu_cxx::__normal_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref __normal_iterator<_Iterator, _Container>)
              (binary_operator
                (member_ref_expr _M_current)
                (decl_ref_expr __n))))))
      (cxx_method operator-=
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl __n
          (type_ref __gnu_cxx::__normal_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator-
        (type_ref __normal_iterator<_Iterator, _Container>)
        (parm_decl __n
          (type_ref __gnu_cxx::__normal_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref __normal_iterator<_Iterator, _Container>)
              (binary_operator
                (member_ref_expr _M_current)
                (decl_ref_expr __n))))))
      (cxx_method base
        (type_ref _Iterator)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_current)))))
    (function_template operator==
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator==
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator!=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator!=
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator<
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator<
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator>
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator>
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator<=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator<=
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator>=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator>=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator>=
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator>=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator-
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (template_type_parameter _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _IteratorL)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _IteratorR)
        (type_ref _Container))
      (binary_operator
        (call_expr
          (member_ref_expr
            (decl_ref_expr __lhs)))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __rhs))))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator-
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (template_ref __normal_iterator)
      (type_ref _Iterator)
      (type_ref _Container)
      (parm_decl __lhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __rhs
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs)))
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs)))))))
    (function_template operator+
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (template_ref __normal_iterator)
      (type_ref _Iterator)
      (type_ref _Container)
      (parm_decl __n
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (parm_decl __i
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref __normal_iterator)
            (type_ref _Iterator)
            (type_ref _Container)
            (call_expr
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __i)))
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (decl_ref_expr __n)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator.h
  (namespace std
    (visibility_attr default)
    (function_template __niter_base
      (template_type_parameter _Iterator)
      (template_type_parameter _Container)
      (type_ref _Iterator)
      (parm_decl __it
        (namespace_ref __gnu_cxx)
        (template_ref __normal_iterator)
        (type_ref _Iterator)
        (type_ref _Container))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __it))))))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_iterator.h
    (namespace __detail)
    (class_template move_iterator
      (template_type_parameter _Iterator)
      (field_decl _M_current
        (type_ref _Iterator))
      (type_alias_decl __traits_type
        (template_ref iterator_traits)
        (type_ref _Iterator))
      (type_alias_decl __base_ref
        (type_ref std::move_iterator::__traits_type))
      (friend_decl
        (class_template move_iterator
          (template_type_parameter _Iter2)))
      (cxx_access_spec_decl)
      (type_alias_decl iterator_type
        (type_ref _Iterator))
      (typedef_decl iterator_category
        (type_ref std::move_iterator::__traits_type))
      (typedef_decl value_type
        (type_ref std::move_iterator::__traits_type))
      (typedef_decl difference_type
        (type_ref std::move_iterator::__traits_type))
      (typedef_decl pointer
        (type_ref _Iterator))
      (typedef_decl reference
        (template_ref conditional)
        (decl_ref_expr
          (template_ref is_reference)
          (type_ref std::move_iterator::__base_ref))
        (template_ref remove_reference)
        (type_ref std::move_iterator::__base_ref)
        (type_ref std::move_iterator::__base_ref))
      (constructor move_iterator<_Iterator>
        (member_ref _M_current)
        (compound_stmt))
      (constructor move_iterator<_Iterator>
        (parm_decl __i
          (type_ref std::move_iterator::iterator_type))
        (member_ref _M_current)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __i))
        (compound_stmt))
      (function_template move_iterator<_Iterator>
        (template_type_parameter _Iter)
        (parm_decl __i
          (template_ref move_iterator)
          (type_ref _Iter))
        (member_ref _M_current)
        (member_ref_expr
          (decl_ref_expr __i))
        (compound_stmt))
      (function_template operator=
        (template_type_parameter _Iter)
        (type_ref move_iterator<_Iterator>)
        (parm_decl __i
          (template_ref move_iterator)
          (type_ref _Iter))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_current)
            (member_ref_expr
              (decl_ref_expr __i)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method base
        (type_ref std::move_iterator::iterator_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_current))))
      (cxx_method operator*
        (type_ref std::move_iterator::reference)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::move_iterator::reference)
              (unary_operator
                (member_ref_expr _M_current))))))
      (cxx_method operator->
        (type_ref std::move_iterator::pointer)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_current))))
      (cxx_method operator++
        (type_ref move_iterator<_Iterator>)
        (compound_stmt
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref move_iterator<_Iterator>)
        (parm_decl)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref move_iterator<_Iterator>)
              (unary_operator
                (cxx_this_expr))))
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method operator--
        (type_ref move_iterator<_Iterator>)
        (compound_stmt
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator--
        (type_ref move_iterator<_Iterator>)
        (parm_decl)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref move_iterator<_Iterator>)
              (unary_operator
                (cxx_this_expr))))
          (unary_operator
            (member_ref_expr _M_current))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method operator+
        (type_ref move_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::move_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref move_iterator<_Iterator>)
              (call_expr
                (member_ref_expr _M_current)
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr __n))))))
      (cxx_method operator+=
        (type_ref move_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::move_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator-
        (type_ref move_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::move_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref move_iterator<_Iterator>)
              (call_expr
                (member_ref_expr _M_current)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __n))))))
      (cxx_method operator-=
        (type_ref move_iterator<_Iterator>)
        (parm_decl __n
          (type_ref std::move_iterator::difference_type))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_current)
            (decl_ref_expr __n))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator[]
        (type_ref std::move_iterator::reference)
        (parm_decl __n
          (type_ref std::move_iterator::difference_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (array_subscript_expr
                (member_ref_expr _M_current)
                (decl_ref_expr __n)))))))
    (function_template operator==
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator!=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __y)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator>
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __y)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __x)))))
    (function_template operator>=
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y)))))))
    (function_template operator==
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator!=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __y)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator>
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __y)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __x)))))
    (function_template operator>=
      (template_type_parameter _Iterator)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y)))))))
    (function_template operator-
      (template_type_parameter _IteratorL)
      (template_type_parameter _IteratorR)
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _IteratorL))
      (parm_decl __y
        (template_ref move_iterator)
        (type_ref _IteratorR))
      (call_expr
        (call_expr
          (member_ref_expr
            (decl_ref_expr __x)))
        (decl_ref_expr
          (overloaded_decl_ref operator-))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __y))))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator+
      (template_type_parameter _Iterator)
      (template_ref move_iterator)
      (type_ref _Iterator)
      (parm_decl __n
        (template_ref move_iterator)
        (type_ref _Iterator))
      (parm_decl __x
        (template_ref move_iterator)
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __x)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (decl_ref_expr __n)))))
    (function_template make_move_iterator
      (template_type_parameter _Iterator)
      (template_ref move_iterator)
      (type_ref _Iterator)
      (parm_decl __i
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref move_iterator)
            (type_ref _Iterator)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __i))))))
    (function_template __make_move_if_noexcept_iterator
      (template_type_parameter _Iterator)
      (template_type_parameter _ReturnType
        (template_ref conditional)
        (decl_ref_expr
          (template_ref __move_if_noexcept_cond)
          (template_ref iterator_traits)
          (type_ref _Iterator))
        (type_ref _Iterator)
        (template_ref move_iterator)
        (type_ref _Iterator))
      (type_ref _ReturnType)
      (parm_decl __i
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (type_ref _ReturnType)
            (decl_ref_expr __i)))))
    (function_template __make_move_if_noexcept_iterator
      (template_type_parameter _Tp)
      (template_type_parameter _ReturnType
        (template_ref conditional)
        (decl_ref_expr
          (template_ref __move_if_noexcept_cond)
          (type_ref _Tp))
        (type_ref _Tp)
        (template_ref move_iterator)
        (type_ref _Tp))
      (type_ref _ReturnType)
      (parm_decl __i
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (type_ref _ReturnType)
            (decl_ref_expr __i)))))
    (function_template __niter_base
      (template_type_parameter _Iterator)
      (parm_decl __it
        (template_ref move_iterator)
        (type_ref _Iterator))
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref make_move_iterator))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __niter_base))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __it)))))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref make_move_iterator))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __niter_base))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __it))))))))
    (class_template_partial_specialization __is_move_iterator
      (template_type_parameter _Iterator)
      (template_ref move_iterator)
      (type_ref _Iterator)
      (enum_decl
        (enum_constant_decl __value
          (integer_literal 1)))
      (typedef_decl __type
        (type_ref struct std::__true_type)))
    (function_template __miter_base
      (template_type_parameter _Iterator)
      (parm_decl __it
        (template_ref move_iterator)
        (type_ref _Iterator))
      (call_expr
        (decl_ref_expr
          (overloaded_decl_ref __miter_base))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __it))))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __miter_base))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __it))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/debug/debug.h
  (namespace std
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/debug/debug.h
    (namespace __debug))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/debug/debug.h
  (namespace __gnu_debug
    (using_directive
      (namespace_ref std)
      (namespace_ref __debug))
    (class_template _Safe_iterator
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/predefined_ops.h
  (namespace __gnu_cxx
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/predefined_ops.h
    (namespace __ops
      (struct_decl _Iter_less_iter
        (function_template operator()
          (template_type_parameter _Iterator1)
          (template_type_parameter _Iterator2)
          (parm_decl __it1
            (type_ref _Iterator1))
          (parm_decl __it2
            (type_ref _Iterator2))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it1))
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (unary_operator
                  (decl_ref_expr __it2)))))))
      (function_decl __iter_less_iter
        (type_ref struct __gnu_cxx::__ops::_Iter_less_iter)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_less_iter
                (type_ref struct __gnu_cxx::__ops::_Iter_less_iter))))))
      (struct_decl _Iter_less_val
        (constructor _Iter_less_val)
        (constructor _Iter_less_val
          (parm_decl
            (type_ref struct __gnu_cxx::__ops::_Iter_less_iter))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (template_type_parameter _Value)
          (parm_decl __it
            (type_ref _Iterator))
          (parm_decl __val
            (type_ref _Value))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it))
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __val))))))
      (function_decl __iter_less_val
        (type_ref struct __gnu_cxx::__ops::_Iter_less_val)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_less_val
                (type_ref struct __gnu_cxx::__ops::_Iter_less_val))))))
      (function_decl __iter_comp_val
        (type_ref struct __gnu_cxx::__ops::_Iter_less_val)
        (parm_decl
          (type_ref struct __gnu_cxx::__ops::_Iter_less_iter))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_less_val
                (type_ref struct __gnu_cxx::__ops::_Iter_less_val))))))
      (struct_decl _Val_less_iter
        (constructor _Val_less_iter)
        (constructor _Val_less_iter
          (parm_decl
            (type_ref struct __gnu_cxx::__ops::_Iter_less_iter))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Value)
          (template_type_parameter _Iterator)
          (parm_decl __val
            (type_ref _Value))
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (call_expr
                (decl_ref_expr __val)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (unary_operator
                  (decl_ref_expr __it)))))))
      (function_decl __val_less_iter
        (type_ref struct __gnu_cxx::__ops::_Val_less_iter)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Val_less_iter
                (type_ref struct __gnu_cxx::__ops::_Val_less_iter))))))
      (function_decl __val_comp_iter
        (type_ref struct __gnu_cxx::__ops::_Val_less_iter)
        (parm_decl
          (type_ref struct __gnu_cxx::__ops::_Iter_less_iter))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Val_less_iter
                (type_ref struct __gnu_cxx::__ops::_Val_less_iter))))))
      (struct_decl _Iter_equal_to_iter
        (function_template operator()
          (template_type_parameter _Iterator1)
          (template_type_parameter _Iterator2)
          (parm_decl __it1
            (type_ref _Iterator1))
          (parm_decl __it2
            (type_ref _Iterator2))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it1))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (unary_operator
                  (decl_ref_expr __it2)))))))
      (function_decl __iter_equal_to_iter
        (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_iter)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_equal_to_iter
                (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_iter))))))
      (struct_decl _Iter_equal_to_val
        (function_template operator()
          (template_type_parameter _Iterator)
          (template_type_parameter _Value)
          (parm_decl __it
            (type_ref _Iterator))
          (parm_decl __val
            (type_ref _Value))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __val))))))
      (function_decl __iter_equal_to_val
        (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_val)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_equal_to_val
                (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_val))))))
      (function_decl __iter_comp_val
        (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_val)
        (parm_decl
          (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_iter))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr _Iter_equal_to_val
                (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_val))))))
      (class_template _Iter_comp_iter
        (template_type_parameter _Compare)
        (field_decl _M_comp
          (type_ref _Compare))
        (constructor _Iter_comp_iter<_Compare>
          (parm_decl __comp
            (type_ref _Compare))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __comp))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator1)
          (template_type_parameter _Iterator2)
          (parm_decl __it1
            (type_ref _Iterator1))
          (parm_decl __it2
            (type_ref _Iterator2))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_comp
                  (member_ref_expr _M_comp)
                  (unary_operator
                    (decl_ref_expr __it1))
                  (unary_operator
                    (decl_ref_expr __it2))))))))
      (function_template __iter_comp_iter
        (template_type_parameter _Compare)
        (template_ref _Iter_comp_iter)
        (type_ref _Compare)
        (parm_decl __comp
          (type_ref _Compare))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_comp_iter)
              (type_ref _Compare)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))))))
      (class_template _Iter_comp_val
        (template_type_parameter _Compare)
        (field_decl _M_comp
          (type_ref _Compare))
        (constructor _Iter_comp_val<_Compare>
          (parm_decl __comp
            (type_ref _Compare))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __comp))
          (compound_stmt))
        (constructor _Iter_comp_val<_Compare>
          (parm_decl __comp
            (template_ref _Iter_comp_iter)
            (type_ref _Compare))
          (member_ref _M_comp)
          (member_ref_expr
            (decl_ref_expr __comp))
          (compound_stmt))
        (constructor _Iter_comp_val<_Compare>
          (parm_decl __comp
            (template_ref _Iter_comp_iter)
            (type_ref _Compare))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __comp)))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (template_type_parameter _Value)
          (parm_decl __it
            (type_ref _Iterator))
          (parm_decl __val
            (type_ref _Value))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_comp
                  (member_ref_expr _M_comp)
                  (unary_operator
                    (decl_ref_expr __it))
                  (decl_ref_expr __val)))))))
      (function_template __iter_comp_val
        (template_type_parameter _Compare)
        (template_ref _Iter_comp_val)
        (type_ref _Compare)
        (parm_decl __comp
          (type_ref _Compare))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_comp_val)
              (type_ref _Compare)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))))))
      (function_template __iter_comp_val
        (template_type_parameter _Compare)
        (template_ref _Iter_comp_val)
        (type_ref _Compare)
        (parm_decl __comp
          (template_ref _Iter_comp_iter)
          (type_ref _Compare))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_comp_val)
              (type_ref _Compare)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))))))
      (class_template _Val_comp_iter
        (template_type_parameter _Compare)
        (field_decl _M_comp
          (type_ref _Compare))
        (constructor _Val_comp_iter<_Compare>
          (parm_decl __comp
            (type_ref _Compare))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __comp))
          (compound_stmt))
        (constructor _Val_comp_iter<_Compare>
          (parm_decl __comp
            (template_ref _Iter_comp_iter)
            (type_ref _Compare))
          (member_ref _M_comp)
          (member_ref_expr
            (decl_ref_expr __comp))
          (compound_stmt))
        (constructor _Val_comp_iter<_Compare>
          (parm_decl __comp
            (template_ref _Iter_comp_iter)
            (type_ref _Compare))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __comp)))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Value)
          (template_type_parameter _Iterator)
          (parm_decl __val
            (type_ref _Value))
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_comp
                  (member_ref_expr _M_comp)
                  (decl_ref_expr __val)
                  (unary_operator
                    (decl_ref_expr __it))))))))
      (function_template __val_comp_iter
        (template_type_parameter _Compare)
        (template_ref _Val_comp_iter)
        (type_ref _Compare)
        (parm_decl __comp
          (type_ref _Compare))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Val_comp_iter)
              (type_ref _Compare)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))))))
      (function_template __val_comp_iter
        (template_type_parameter _Compare)
        (template_ref _Val_comp_iter)
        (type_ref _Compare)
        (parm_decl __comp
          (template_ref _Iter_comp_iter)
          (type_ref _Compare))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Val_comp_iter)
              (type_ref _Compare)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))))))
      (class_template _Iter_equals_val
        (template_type_parameter _Value)
        (field_decl _M_value
          (type_ref _Value))
        (constructor _Iter_equals_val<_Value>
          (parm_decl __value
            (type_ref _Value))
          (member_ref _M_value)
          (decl_ref_expr __value)
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (member_ref_expr _M_value))))))
      (function_template __iter_equals_val
        (template_type_parameter _Value)
        (template_ref _Iter_equals_val)
        (type_ref _Value)
        (parm_decl __val
          (type_ref _Value))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_equals_val)
              (type_ref _Value)
              (decl_ref_expr __val)))))
      (class_template _Iter_equals_iter
        (template_type_parameter _Iterator1)
        (field_decl _M_it1
          (type_ref _Iterator1))
        (constructor _Iter_equals_iter<_Iterator1>
          (parm_decl __it1
            (type_ref _Iterator1))
          (member_ref _M_it1)
          (decl_ref_expr __it1)
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator2)
          (parm_decl __it2
            (type_ref _Iterator2))
          (compound_stmt
            (return_stmt
              (call_expr
                (unary_operator
                  (decl_ref_expr __it2))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (unary_operator
                  (member_ref_expr _M_it1)))))))
      (function_template __iter_comp_iter
        (template_type_parameter _Iterator)
        (template_ref _Iter_equals_iter)
        (type_ref _Iterator)
        (parm_decl
          (type_ref struct __gnu_cxx::__ops::_Iter_equal_to_iter))
        (parm_decl __it
          (type_ref _Iterator))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_equals_iter)
              (type_ref _Iterator)
              (decl_ref_expr __it)))))
      (class_template _Iter_pred
        (template_type_parameter _Predicate)
        (field_decl _M_pred
          (type_ref _Predicate))
        (constructor _Iter_pred<_Predicate>
          (parm_decl __pred
            (type_ref _Predicate))
          (member_ref _M_pred)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __pred))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_pred
                  (member_ref_expr _M_pred)
                  (unary_operator
                    (decl_ref_expr __it))))))))
      (function_template __pred_iter
        (template_type_parameter _Predicate)
        (template_ref _Iter_pred)
        (type_ref _Predicate)
        (parm_decl __pred
          (type_ref _Predicate))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_pred)
              (type_ref _Predicate)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __pred))))))
      (class_template _Iter_comp_to_val
        (template_type_parameter _Compare)
        (template_type_parameter _Value)
        (field_decl _M_comp
          (type_ref _Compare))
        (field_decl _M_value
          (type_ref _Value))
        (constructor _Iter_comp_to_val<_Compare, _Value>
          (parm_decl __comp
            (type_ref _Compare))
          (parm_decl __value
            (type_ref _Value))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __comp))
          (member_ref _M_value)
          (decl_ref_expr __value)
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_comp
                  (member_ref_expr _M_comp)
                  (unary_operator
                    (decl_ref_expr __it))
                  (member_ref_expr _M_value)))))))
      (function_template __iter_comp_val
        (template_type_parameter _Compare)
        (template_type_parameter _Value)
        (template_ref _Iter_comp_to_val)
        (type_ref _Compare)
        (type_ref _Value)
        (parm_decl __comp
          (type_ref _Compare))
        (parm_decl __val
          (type_ref _Value))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_comp_to_val)
              (type_ref _Compare)
              (type_ref _Value)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __comp))
              (decl_ref_expr __val)))))
      (class_template _Iter_comp_to_iter
        (template_type_parameter _Compare)
        (template_type_parameter _Iterator1)
        (field_decl _M_comp
          (type_ref _Compare))
        (field_decl _M_it1
          (type_ref _Iterator1))
        (constructor _Iter_comp_to_iter<_Compare, _Iterator1>
          (parm_decl __comp
            (type_ref _Compare))
          (parm_decl __it1
            (type_ref _Iterator1))
          (member_ref _M_comp)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __comp))
          (member_ref _M_it1)
          (decl_ref_expr __it1)
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator2)
          (parm_decl __it2
            (type_ref _Iterator2))
          (compound_stmt
            (return_stmt
              (call_expr
                (call_expr _M_comp
                  (member_ref_expr _M_comp)
                  (unary_operator
                    (decl_ref_expr __it2))
                  (unary_operator
                    (member_ref_expr _M_it1))))))))
      (function_template __iter_comp_iter
        (template_type_parameter _Compare)
        (template_type_parameter _Iterator)
        (template_ref _Iter_comp_to_iter)
        (type_ref _Compare)
        (type_ref _Iterator)
        (parm_decl __comp
          (template_ref _Iter_comp_iter)
          (type_ref _Compare))
        (parm_decl __it
          (type_ref _Iterator))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_comp_to_iter)
              (type_ref _Compare)
              (type_ref _Iterator)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (member_ref_expr
                  (decl_ref_expr __comp)))
              (decl_ref_expr __it)))))
      (class_template _Iter_negate
        (template_type_parameter _Predicate)
        (field_decl _M_pred
          (type_ref _Predicate))
        (constructor _Iter_negate<_Predicate>
          (parm_decl __pred
            (type_ref _Predicate))
          (member_ref _M_pred)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __pred))
          (compound_stmt))
        (function_template operator()
          (template_type_parameter _Iterator)
          (parm_decl __it
            (type_ref _Iterator))
          (compound_stmt
            (return_stmt
              (unary_operator
                (call_expr
                  (call_expr _M_pred
                    (member_ref_expr _M_pred)
                    (unary_operator
                      (decl_ref_expr __it)))))))))
      (function_template __negate
        (template_type_parameter _Predicate)
        (template_ref _Iter_negate)
        (type_ref _Predicate)
        (parm_decl __pred
          (template_ref _Iter_pred)
          (type_ref _Predicate))
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref _Iter_negate)
              (type_ref _Predicate)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (member_ref_expr
                  (decl_ref_expr __pred)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_algobase.h
  (namespace std
    (visibility_attr default)
    (function_template __memcmp
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __first1
        (type_ref _Tp))
      (parm_decl __first2
        (type_ref _Up))
      (parm_decl __num
        (type_ref std::size_t))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (cxx_unary_expr
                (type_ref _Tp))
              (cxx_unary_expr
                (type_ref _Up)))
            (string_literal "can be compared with memcmp")))
        (return_stmt
          (call_expr __builtin_memcmp
            (decl_ref_expr __builtin_memcmp)
            (decl_ref_expr __first1)
            (decl_ref_expr __first2)
            (binary_operator
              (cxx_unary_expr
                (type_ref _Tp))
              (decl_ref_expr __num))))))
    (function_template iter_swap
      (template_type_parameter _ForwardIterator1)
      (template_type_parameter _ForwardIterator2)
      (parm_decl __a
        (type_ref _ForwardIterator1))
      (parm_decl __b
        (type_ref _ForwardIterator2))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref swap))
          (unary_operator
            (decl_ref_expr __a))
          (unary_operator
            (decl_ref_expr __b)))))
    (function_template swap_ranges
      (template_type_parameter _ForwardIterator1)
      (template_type_parameter _ForwardIterator2)
      (type_ref _ForwardIterator2)
      (parm_decl __first1
        (type_ref _ForwardIterator1))
      (parm_decl __last1
        (type_ref _ForwardIterator1))
      (parm_decl __first2
        (type_ref _ForwardIterator2))
      (compound_stmt
        (null_stmt)
        (for_stmt
          (call_expr
            (decl_ref_expr __first1)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last1))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref iter_swap))
            (decl_ref_expr __first1)
            (decl_ref_expr __first2)))
        (return_stmt
          (decl_ref_expr __first2))))
    (function_template min
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __a
        (type_ref _Tp))
      (parm_decl __b
        (type_ref _Tp))
      (compound_stmt
        (if_stmt
          (call_expr
            (decl_ref_expr __b)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __a))
          (return_stmt
            (decl_ref_expr __b)))
        (return_stmt
          (decl_ref_expr __a))))
    (function_template max
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __a
        (type_ref _Tp))
      (parm_decl __b
        (type_ref _Tp))
      (compound_stmt
        (if_stmt
          (call_expr
            (decl_ref_expr __a)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __b))
          (return_stmt
            (decl_ref_expr __b)))
        (return_stmt
          (decl_ref_expr __a))))
    (function_template min
      (template_type_parameter _Tp)
      (template_type_parameter _Compare)
      (type_ref _Tp)
      (parm_decl __a
        (type_ref _Tp))
      (parm_decl __b
        (type_ref _Tp))
      (parm_decl __comp
        (type_ref _Compare))
      (compound_stmt
        (if_stmt
          (call_expr __comp
            (decl_ref_expr __comp)
            (decl_ref_expr __b)
            (decl_ref_expr __a))
          (return_stmt
            (decl_ref_expr __b)))
        (return_stmt
          (decl_ref_expr __a))))
    (function_template max
      (template_type_parameter _Tp)
      (template_type_parameter _Compare)
      (type_ref _Tp)
      (parm_decl __a
        (type_ref _Tp))
      (parm_decl __b
        (type_ref _Tp))
      (parm_decl __comp
        (type_ref _Compare))
      (compound_stmt
        (if_stmt
          (call_expr __comp
            (decl_ref_expr __comp)
            (decl_ref_expr __a)
            (decl_ref_expr __b))
          (return_stmt
            (decl_ref_expr __b)))
        (return_stmt
          (decl_ref_expr __a))))
    (function_template __niter_base
      (template_type_parameter _Iterator)
      (type_ref _Iterator)
      (parm_decl __it
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __it))))
    (function_template __niter_base
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (type_ref _Ite)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (namespace_ref std)
        (type_ref struct std::random_access_iterator_tag)))
    (function_template __niter_wrap
      (template_type_parameter _From)
      (template_type_parameter _To)
      (type_ref _From)
      (parm_decl __from
        (type_ref _From))
      (parm_decl __res
        (type_ref _To))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __from)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (paren_expr
              (call_expr
                (decl_ref_expr __res)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __niter_base))
                  (decl_ref_expr __from))))))))
    (function_template __niter_wrap
      (template_type_parameter _Iterator)
      (type_ref _Iterator)
      (parm_decl
        (type_ref _Iterator))
      (parm_decl __res
        (type_ref _Iterator))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __res))))
    (class_template __copy_move
      (template_non_type_parameter _IsMove)
      (template_non_type_parameter _IsSimple)
      (template_type_parameter _Category)
      (function_template __copy_m
        (template_type_parameter _II)
        (template_type_parameter _OI)
        (type_ref _OI)
        (parm_decl __first
          (type_ref _II))
        (parm_decl __last
          (type_ref _II))
        (parm_decl __result
          (type_ref _OI))
        (compound_stmt
          (for_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (binary_operator
              (unary_operator
                (decl_ref_expr __result))
              (cstyle_cast_expr
                (unary_operator
                  (decl_ref_expr __first))))
            (binary_operator
              (unary_operator
                (decl_ref_expr __result))
              (unary_operator
                (decl_ref_expr __first))))
          (return_stmt
            (decl_ref_expr __result)))))
    (class_template_partial_specialization __copy_move
      (template_type_parameter _Category)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref _Category)
      (function_template __copy_m
        (template_type_parameter _II)
        (template_type_parameter _OI)
        (type_ref _OI)
        (parm_decl __first
          (type_ref _II))
        (parm_decl __last
          (type_ref _II))
        (parm_decl __result
          (type_ref _OI))
        (compound_stmt
          (for_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (binary_operator
              (unary_operator
                (decl_ref_expr __result))
              (cstyle_cast_expr
                (unary_operator
                  (decl_ref_expr __first))))
            (binary_operator
              (unary_operator
                (decl_ref_expr __result))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (unary_operator
                  (decl_ref_expr __first)))))
          (return_stmt
            (decl_ref_expr __result)))))
    (struct_decl __copy_move
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_m
        (template_type_parameter _II)
        (template_type_parameter _OI)
        (type_ref _OI)
        (parm_decl __first
          (type_ref _II))
        (parm_decl __last
          (type_ref _II))
        (parm_decl __result
          (type_ref _OI))
        (compound_stmt
          (decl_stmt
            (typedef_decl _Distance
              (template_ref iterator_traits)
              (type_ref _II)))
          (for_stmt
            (decl_stmt
              (var_decl __n
                (type_ref _Distance)
                (call_expr
                  (decl_ref_expr __last)
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr __first))))
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (unary_operator
              (decl_ref_expr __n))
            (compound_stmt
              (binary_operator
                (unary_operator
                  (decl_ref_expr __result))
                (unary_operator
                  (decl_ref_expr __first)))
              (unary_operator
                (decl_ref_expr __first))
              (unary_operator
                (decl_ref_expr __result))))
          (return_stmt
            (decl_ref_expr __result)))))
    (struct_decl __copy_move
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_m
        (template_type_parameter _II)
        (template_type_parameter _OI)
        (type_ref _OI)
        (parm_decl __first
          (type_ref _II))
        (parm_decl __last
          (type_ref _II))
        (parm_decl __result
          (type_ref _OI))
        (compound_stmt
          (decl_stmt
            (typedef_decl _Distance
              (template_ref iterator_traits)
              (type_ref _II)))
          (for_stmt
            (decl_stmt
              (var_decl __n
                (type_ref _Distance)
                (call_expr
                  (decl_ref_expr __last)
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr __first))))
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (unary_operator
              (decl_ref_expr __n))
            (compound_stmt
              (binary_operator
                (unary_operator
                  (decl_ref_expr __result))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (unary_operator
                    (decl_ref_expr __first))))
              (unary_operator
                (decl_ref_expr __first))
              (unary_operator
                (decl_ref_expr __result))))
          (return_stmt
            (decl_ref_expr __result)))))
    (class_template_partial_specialization __copy_move
      (template_non_type_parameter _IsMove)
      (decl_ref_expr _IsMove)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_m
        (template_type_parameter _Tp)
        (type_ref _Tp)
        (parm_decl __first
          (type_ref _Tp))
        (parm_decl __last
          (type_ref _Tp))
        (parm_decl __result
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (type_alias_decl __assignable
              (template_ref conditional)
              (decl_ref_expr _IsMove)
              (template_ref is_move_assignable)
              (type_ref _Tp)
              (template_ref is_copy_assignable)
              (type_ref _Tp)))
          (decl_stmt
            (static_assert
              (decl_ref_expr
                (type_ref __assignable))
              (string_literal "type is not assignable")))
          (decl_stmt
            (var_decl _Num
              (type_ref std::ptrdiff_t)
              (call_expr
                (decl_ref_expr __last)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first))))
          (if_stmt
            (decl_ref_expr _Num)
            (call_expr __builtin_memmove
              (decl_ref_expr __builtin_memmove)
              (decl_ref_expr __result)
              (decl_ref_expr __first)
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Tp))
                (decl_ref_expr _Num))))
          (return_stmt
            (call_expr
              (decl_ref_expr __result)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (decl_ref_expr _Num))))))
    (class_template _Deque_iterator
      (template_type_parameter _Tp)
      (template_type_parameter _Ref)
      (template_type_parameter _Ptr))
    (struct_decl _Bit_iterator)
    (class_template char_traits
      (template_type_parameter _CharT))
    (class_template istreambuf_iterator
      (template_type_parameter _CharT)
      (template_type_parameter _Traits))
    (class_template ostreambuf_iterator
      (template_type_parameter _CharT)
      (template_type_parameter _Traits))
    (function_template __copy_move_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _CharT)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (template_ref ostreambuf_iterator)
      (type_ref _CharT)
      (template_ref char_traits)
      (type_ref _CharT)
      (parm_decl
        (type_ref _CharT))
      (parm_decl
        (type_ref _CharT))
      (parm_decl
        (template_ref ostreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT)))
    (function_template __copy_move_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _CharT)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (template_ref ostreambuf_iterator)
      (type_ref _CharT)
      (template_ref char_traits)
      (type_ref _CharT)
      (parm_decl
        (type_ref _CharT))
      (parm_decl
        (type_ref _CharT))
      (parm_decl
        (template_ref ostreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT)))
    (function_template __copy_move_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _CharT)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (type_ref _CharT)
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (type_ref _CharT)))
    (function_template __copy_move_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _CharT)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _CharT)
      (type_ref _CharT)
      (type_ref _CharT)
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _CharT)
        (type_ref _CharT)
        (type_ref _CharT)))
    (function_template __copy_move_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Category
            (template_ref iterator_traits)
            (type_ref _II)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __copy_move)
              (decl_ref_expr _IsMove)
              (decl_ref_expr
                (template_ref __memcpyable)
                (type_ref _OI)
                (type_ref _II))
              (type_ref _Category))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (function_template __copy_move_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _Tp)
      (template_type_parameter _Ref)
      (template_type_parameter _Ptr)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (type_ref _OI)))
    (function_template __copy_move_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _ITp)
      (template_type_parameter _IRef)
      (template_type_parameter _IPtr)
      (template_type_parameter _OTp)
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _OTp)
      (type_ref _OTp)
      (type_ref _OTp)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _ITp)
        (type_ref _IRef)
        (type_ref _IPtr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _ITp)
        (type_ref _IRef)
        (type_ref _IPtr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _OTp)
        (type_ref _OTp)
        (type_ref _OTp)))
    (function_template __copy_move_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_random_access_iter)
        (type_ref _II))
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (parm_decl
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp)))
    (function_template __copy_move_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_a2)
              (decl_ref_expr _IsMove))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (function_template __copy_move_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __niter_wrap))
            (decl_ref_expr __result)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __copy_move_a1)
                (decl_ref_expr _IsMove))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __first))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __last))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __result)))))))
    (function_template __copy_move_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (type_ref _OI)))
    (function_template __copy_move_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (namespace_ref __gnu_debug)
      (template_ref _Safe_iterator)
      (type_ref _Ite)
      (type_ref _Seq)
      (type_ref _Cat)
      (parm_decl
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat)))
    (function_template __copy_move_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _IIte)
      (template_type_parameter _ISeq)
      (template_type_parameter _ICat)
      (template_type_parameter _OIte)
      (template_type_parameter _OSeq)
      (template_type_parameter _OCat)
      (namespace_ref __gnu_debug)
      (template_ref _Safe_iterator)
      (type_ref _OIte)
      (type_ref _OSeq)
      (type_ref _OCat)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _IIte)
        (type_ref _ISeq)
        (type_ref _ICat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _IIte)
        (type_ref _ISeq)
        (type_ref _ICat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _OIte)
        (type_ref _OSeq)
        (type_ref _OCat)))
    (function_template __copy_n_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _OutputIterator)
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _OutputIterator))
      (parm_decl)
      (compound_stmt
        (if_stmt
          (call_expr
            (decl_ref_expr __n)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (compound_stmt
            (while_stmt
              (cxx_bool_literal_expr)
              (compound_stmt
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __result))
                  (unary_operator
                    (decl_ref_expr __first)))
                (unary_operator
                  (decl_ref_expr __result))
                (if_stmt
                  (call_expr
                    (unary_operator
                      (decl_ref_expr __n))
                    (decl_ref_expr
                      (overloaded_decl_ref operator>))
                    (integer_literal 0))
                  (unary_operator
                    (decl_ref_expr __first))
                  (break_stmt))))))
        (return_stmt
          (decl_ref_expr __result))))
    (function_template __copy_n_a
      (template_type_parameter _CharT)
      (template_type_parameter _Size)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (type_ref _CharT)
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (type_ref _Size))
      (parm_decl
        (type_ref _CharT))
      (parm_decl))
    (function_template __copy_n_a
      (template_type_parameter _CharT)
      (template_type_parameter _Size)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_char)
        (type_ref _CharT))
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _CharT)
      (type_ref _CharT)
      (type_ref _CharT)
      (parm_decl
        (template_ref istreambuf_iterator)
        (type_ref _CharT)
        (template_ref char_traits)
        (type_ref _CharT))
      (parm_decl
        (type_ref _Size))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _CharT)
        (type_ref _CharT)
        (type_ref _CharT))
      (parm_decl))
    (function_template copy
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_a)
              (decl_ref_expr
                (template_ref __is_move_iterator)
                (type_ref _II)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __last))
            (decl_ref_expr __result)))))
    (function_template move
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_a)
              (cxx_bool_literal_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __last))
            (decl_ref_expr __result)))))
    (class_template __copy_move_backward
      (template_non_type_parameter _IsMove)
      (template_non_type_parameter _IsSimple)
      (template_type_parameter _Category)
      (function_template __copy_move_b
        (template_type_parameter _BI1)
        (template_type_parameter _BI2)
        (type_ref _BI2)
        (parm_decl __first
          (type_ref _BI1))
        (parm_decl __last
          (type_ref _BI1))
        (parm_decl __result
          (type_ref _BI2))
        (compound_stmt
          (while_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (binary_operator
              (unary_operator
                (unary_operator
                  (decl_ref_expr __result)))
              (unary_operator
                (unary_operator
                  (decl_ref_expr __last)))))
          (return_stmt
            (decl_ref_expr __result)))))
    (class_template_partial_specialization __copy_move_backward
      (template_type_parameter _Category)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref _Category)
      (function_template __copy_move_b
        (template_type_parameter _BI1)
        (template_type_parameter _BI2)
        (type_ref _BI2)
        (parm_decl __first
          (type_ref _BI1))
        (parm_decl __last
          (type_ref _BI1))
        (parm_decl __result
          (type_ref _BI2))
        (compound_stmt
          (while_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (binary_operator
              (unary_operator
                (unary_operator
                  (decl_ref_expr __result)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (unary_operator
                  (unary_operator
                    (decl_ref_expr __last))))))
          (return_stmt
            (decl_ref_expr __result)))))
    (struct_decl __copy_move_backward
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_move_b
        (template_type_parameter _BI1)
        (template_type_parameter _BI2)
        (type_ref _BI2)
        (parm_decl __first
          (type_ref _BI1))
        (parm_decl __last
          (type_ref _BI1))
        (parm_decl __result
          (type_ref _BI2))
        (compound_stmt
          (decl_stmt
            (var_decl __n
              (template_ref iterator_traits)
              (type_ref _BI1)
              (call_expr
                (decl_ref_expr __last)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first))))
          (for_stmt
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (unary_operator
              (decl_ref_expr __n))
            (binary_operator
              (unary_operator
                (unary_operator
                  (decl_ref_expr __result)))
              (unary_operator
                (unary_operator
                  (decl_ref_expr __last)))))
          (return_stmt
            (decl_ref_expr __result)))))
    (struct_decl __copy_move_backward
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_move_b
        (template_type_parameter _BI1)
        (template_type_parameter _BI2)
        (type_ref _BI2)
        (parm_decl __first
          (type_ref _BI1))
        (parm_decl __last
          (type_ref _BI1))
        (parm_decl __result
          (type_ref _BI2))
        (compound_stmt
          (decl_stmt
            (var_decl __n
              (template_ref iterator_traits)
              (type_ref _BI1)
              (call_expr
                (decl_ref_expr __last)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first))))
          (for_stmt
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (unary_operator
              (decl_ref_expr __n))
            (binary_operator
              (unary_operator
                (unary_operator
                  (decl_ref_expr __result)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (unary_operator
                  (unary_operator
                    (decl_ref_expr __last))))))
          (return_stmt
            (decl_ref_expr __result)))))
    (class_template_partial_specialization __copy_move_backward
      (template_non_type_parameter _IsMove)
      (decl_ref_expr _IsMove)
      (cxx_bool_literal_expr)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __copy_move_b
        (template_type_parameter _Tp)
        (type_ref _Tp)
        (parm_decl __first
          (type_ref _Tp))
        (parm_decl __last
          (type_ref _Tp))
        (parm_decl __result
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (type_alias_decl __assignable
              (template_ref conditional)
              (decl_ref_expr _IsMove)
              (template_ref is_move_assignable)
              (type_ref _Tp)
              (template_ref is_copy_assignable)
              (type_ref _Tp)))
          (decl_stmt
            (static_assert
              (decl_ref_expr
                (type_ref __assignable))
              (string_literal "type is not assignable")))
          (decl_stmt
            (var_decl _Num
              (type_ref std::ptrdiff_t)
              (call_expr
                (decl_ref_expr __last)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first))))
          (if_stmt
            (decl_ref_expr _Num)
            (call_expr __builtin_memmove
              (decl_ref_expr __builtin_memmove)
              (call_expr
                (decl_ref_expr __result)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr _Num))
              (decl_ref_expr __first)
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Tp))
                (decl_ref_expr _Num))))
          (return_stmt
            (call_expr
              (decl_ref_expr __result)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (decl_ref_expr _Num))))))
    (function_template __copy_move_backward_a2
      (template_non_type_parameter _IsMove)
      (template_type_parameter _BI1)
      (template_type_parameter _BI2)
      (type_ref _BI2)
      (parm_decl __first
        (type_ref _BI1))
      (parm_decl __last
        (type_ref _BI1))
      (parm_decl __result
        (type_ref _BI2))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Category
            (template_ref iterator_traits)
            (type_ref _BI1)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __copy_move_backward)
              (decl_ref_expr _IsMove)
              (decl_ref_expr
                (template_ref __memcpyable)
                (type_ref _BI2)
                (type_ref _BI1))
              (type_ref _Category))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (function_template __copy_move_backward_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _BI1)
      (template_type_parameter _BI2)
      (type_ref _BI2)
      (parm_decl __first
        (type_ref _BI1))
      (parm_decl __last
        (type_ref _BI1))
      (parm_decl __result
        (type_ref _BI2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_backward_a2)
              (decl_ref_expr _IsMove))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (function_template __copy_move_backward_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _Tp)
      (template_type_parameter _Ref)
      (template_type_parameter _Ptr)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (type_ref _OI)))
    (function_template __copy_move_backward_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _ITp)
      (template_type_parameter _IRef)
      (template_type_parameter _IPtr)
      (template_type_parameter _OTp)
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _OTp)
      (type_ref _OTp)
      (type_ref _OTp)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _ITp)
        (type_ref _IRef)
        (type_ref _IPtr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _ITp)
        (type_ref _IRef)
        (type_ref _IPtr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _OTp)
        (type_ref _OTp)
        (type_ref _OTp)))
    (function_template __copy_move_backward_a1
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_random_access_iter)
        (type_ref _II))
      (namespace_ref std)
      (template_ref _Deque_iterator)
      (type_ref _Tp)
      (type_ref _Tp)
      (type_ref _Tp)
      (parm_decl
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp)))
    (function_template __copy_move_backward_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _II))
      (parm_decl __last
        (type_ref _II))
      (parm_decl __result
        (type_ref _OI))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __niter_wrap))
            (decl_ref_expr __result)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __copy_move_backward_a1)
                (decl_ref_expr _IsMove))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __first))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __last))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __niter_base))
                (decl_ref_expr __result)))))))
    (function_template __copy_move_backward_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (template_type_parameter _OI)
      (type_ref _OI)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (type_ref _OI)))
    (function_template __copy_move_backward_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _II)
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (namespace_ref __gnu_debug)
      (template_ref _Safe_iterator)
      (type_ref _Ite)
      (type_ref _Seq)
      (type_ref _Cat)
      (parm_decl
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat)))
    (function_template __copy_move_backward_a
      (template_non_type_parameter _IsMove)
      (template_type_parameter _IIte)
      (template_type_parameter _ISeq)
      (template_type_parameter _ICat)
      (template_type_parameter _OIte)
      (template_type_parameter _OSeq)
      (template_type_parameter _OCat)
      (namespace_ref __gnu_debug)
      (template_ref _Safe_iterator)
      (type_ref _OIte)
      (type_ref _OSeq)
      (type_ref _OCat)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _IIte)
        (type_ref _ISeq)
        (type_ref _ICat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _IIte)
        (type_ref _ISeq)
        (type_ref _ICat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _OIte)
        (type_ref _OSeq)
        (type_ref _OCat)))
    (function_template copy_backward
      (template_type_parameter _BI1)
      (template_type_parameter _BI2)
      (type_ref _BI2)
      (parm_decl __first
        (type_ref _BI1))
      (parm_decl __last
        (type_ref _BI1))
      (parm_decl __result
        (type_ref _BI2))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_backward_a)
              (decl_ref_expr
                (template_ref __is_move_iterator)
                (type_ref _BI1)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __last))
            (decl_ref_expr __result)))))
    (function_template move_backward
      (template_type_parameter _BI1)
      (template_type_parameter _BI2)
      (type_ref _BI2)
      (parm_decl __first
        (type_ref _BI1))
      (parm_decl __last
        (type_ref _BI1))
      (parm_decl __result
        (type_ref _BI2))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __copy_move_backward_a)
              (cxx_bool_literal_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __miter_base))
              (decl_ref_expr __last))
            (decl_ref_expr __result)))))
    (function_template __fill_a1
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __is_scalar)
          (type_ref _Tp)))
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (for_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (unary_operator
            (decl_ref_expr __first))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first))
            (decl_ref_expr __value)))))
    (function_template __fill_a1
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_scalar)
        (type_ref _Tp))
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl __tmp
            (type_ref _Tp)
            (decl_ref_expr __value)))
        (for_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (unary_operator
            (decl_ref_expr __first))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first))
            (decl_ref_expr __tmp)))))
    (function_template __fill_a1
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_byte)
        (type_ref _Tp))
      (parm_decl __first
        (type_ref _Tp))
      (parm_decl __last
        (type_ref _Tp))
      (parm_decl __c
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl __tmp
            (type_ref _Tp)
            (decl_ref_expr __c)))
        (if_stmt
          (var_decl __len
            (type_ref std::size_t)
            (call_expr
              (decl_ref_expr __last)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (decl_ref_expr __first)))
          (decl_ref_expr __len)
          (call_expr __builtin_memset
            (decl_ref_expr __builtin_memset)
            (decl_ref_expr __first)
            (cxx_static_cast_expr
              (decl_ref_expr __tmp))
            (decl_ref_expr __len)))))
    (function_template __fill_a1
      (template_type_parameter _Ite)
      (template_type_parameter _Cont)
      (template_type_parameter _Tp)
      (parm_decl __first
        (namespace_ref __gnu_cxx)
        (template_ref __normal_iterator)
        (type_ref _Ite)
        (type_ref _Cont))
      (parm_decl __last
        (namespace_ref __gnu_cxx)
        (template_ref __normal_iterator)
        (type_ref _Ite)
        (type_ref _Cont))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __fill_a1))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __first)))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __last)))
          (decl_ref_expr __value))))
    (function_template __fill_a1
      (template_type_parameter _Tp)
      (template_type_parameter _VTp)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (parm_decl
        (type_ref _VTp)))
    (function_decl __fill_a1
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::_Bit_iterator))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::_Bit_iterator))
      (parm_decl))
    (function_template __fill_a
      (template_type_parameter _FIte)
      (template_type_parameter _Tp)
      (parm_decl __first
        (type_ref _FIte))
      (parm_decl __last
        (type_ref _FIte))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __fill_a1))
          (decl_ref_expr __first)
          (decl_ref_expr __last)
          (decl_ref_expr __value))))
    (function_template __fill_a
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (template_type_parameter _Tp)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl
        (type_ref _Tp)))
    (function_template fill
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (null_stmt)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __fill_a))
          (decl_ref_expr __first)
          (decl_ref_expr __last)
          (decl_ref_expr __value))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __n))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __n)))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __n)))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __n)))))
    (function_decl __size_to_integer
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __n)))))
    (function_template __fill_n_a1
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __is_scalar)
          (type_ref _Tp)))
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _OutputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (for_stmt
          (call_expr
            (decl_ref_expr __n)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (binary_operator
            (unary_operator
              (decl_ref_expr __n))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first))))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first))
            (decl_ref_expr __value)))
        (return_stmt
          (decl_ref_expr __first))))
    (function_template __fill_n_a1
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_scalar)
        (type_ref _Tp))
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _OutputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl __tmp
            (type_ref _Tp)
            (decl_ref_expr __value)))
        (for_stmt
          (call_expr
            (decl_ref_expr __n)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (binary_operator
            (unary_operator
              (decl_ref_expr __n))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first))))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first))
            (decl_ref_expr __tmp)))
        (return_stmt
          (decl_ref_expr __first))))
    (function_template __fill_n_a
      (template_type_parameter _Ite)
      (template_type_parameter _Seq)
      (template_type_parameter _Cat)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (namespace_ref __gnu_debug)
      (template_ref _Safe_iterator)
      (type_ref _Ite)
      (type_ref _Seq)
      (type_ref _Cat)
      (parm_decl __first
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Ite)
        (type_ref _Seq)
        (type_ref _Cat))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::input_iterator_tag)))
    (function_template __fill_n_a
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _OutputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::output_iterator_tag))
      (compound_stmt
        (decl_stmt
          (static_assert
            (call_expr
              (template_ref is_integral)
              (type_ref _Size)
              (init_list_expr))
            (string_literal "fill_n must pass integral size")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __fill_n_a1))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __value)))))
    (function_template __fill_n_a
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _OutputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (decl_stmt
          (static_assert
            (call_expr
              (template_ref is_integral)
              (type_ref _Size)
              (init_list_expr))
            (string_literal "fill_n must pass integral size")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __fill_n_a1))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __value)))))
    (function_template __fill_n_a
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _OutputIterator)
      (parm_decl __first
        (type_ref _OutputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (decl_stmt
          (static_assert
            (call_expr
              (template_ref is_integral)
              (type_ref _Size)
              (init_list_expr))
            (string_literal "fill_n must pass integral size")))
        (if_stmt
          (call_expr
            (decl_ref_expr __n)
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr __first)))
        (null_stmt)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __fill_a))
          (decl_ref_expr __first)
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (decl_ref_expr __n))
          (decl_ref_expr __value))
        (return_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (decl_ref_expr __n)))))
    (function_template fill_n
      (template_type_parameter _OI)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _OI)
      (parm_decl __first
        (type_ref _OI))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __value
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __fill_n_a))
            (decl_ref_expr __first)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __size_to_integer))
              (decl_ref_expr __n))
            (decl_ref_expr __value)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __iterator_category))
              (decl_ref_expr __first))))))
    (class_template __equal
      (template_non_type_parameter _BoolType)
      (function_template equal
        (template_type_parameter _II1)
        (template_type_parameter _II2)
        (parm_decl __first1
          (type_ref _II1))
        (parm_decl __last1
          (type_ref _II1))
        (parm_decl __first2
          (type_ref _II2))
        (compound_stmt
          (for_stmt
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (binary_operator
              (unary_operator
                (decl_ref_expr __first1))
              (cstyle_cast_expr
                (unary_operator
                  (decl_ref_expr __first2))))
            (if_stmt
              (unary_operator
                (paren_expr
                  (call_expr
                    (unary_operator
                      (decl_ref_expr __first1))
                    (decl_ref_expr
                      (overloaded_decl_ref operator==))
                    (unary_operator
                      (decl_ref_expr __first2)))))
              (return_stmt
                (cxx_bool_literal_expr))))
          (return_stmt
            (cxx_bool_literal_expr)))))
    (struct_decl __equal
      (cxx_bool_literal_expr)
      (function_template equal
        (template_type_parameter _Tp)
        (parm_decl __first1
          (type_ref _Tp))
        (parm_decl __last1
          (type_ref _Tp))
        (parm_decl __first2
          (type_ref _Tp))
        (compound_stmt
          (if_stmt
            (var_decl __len
              (type_ref std::size_t)
              (paren_expr
                (call_expr
                  (decl_ref_expr __last1)
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr __first1))))
            (decl_ref_expr __len)
            (return_stmt
              (unary_operator
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __memcmp))
                  (decl_ref_expr __first1)
                  (decl_ref_expr __first2)
                  (decl_ref_expr __len)))))
          (return_stmt
            (cxx_bool_literal_expr)))))
    (function_template __equal_aux1
      (template_type_parameter _Tp)
      (template_type_parameter _Ref)
      (template_type_parameter _Ptr)
      (template_type_parameter _II)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_random_access_iter)
        (type_ref _II))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr))
      (parm_decl
        (type_ref _II)))
    (function_template __equal_aux1
      (template_type_parameter _Tp1)
      (template_type_parameter _Ref1)
      (template_type_parameter _Ptr1)
      (template_type_parameter _Tp2)
      (template_type_parameter _Ref2)
      (template_type_parameter _Ptr2)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp2)
        (type_ref _Ref2)
        (type_ref _Ptr2)))
    (function_template __equal_aux1
      (template_type_parameter _II)
      (template_type_parameter _Tp)
      (template_type_parameter _Ref)
      (template_type_parameter _Ptr)
      (namespace_ref __gnu_cxx)
      (template_ref __enable_if)
      (decl_ref_expr
        (template_ref __is_random_access_iter)
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (type_ref _II))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp)
        (type_ref _Ref)
        (type_ref _Ptr)))
    (function_template __equal_aux1
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType1
            (template_ref iterator_traits)
            (type_ref _II1)))
        (decl_stmt
          (var_decl __simple
            (paren_expr
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr
                      (template_ref __is_integer)
                      (type_ref _ValueType1))
                    (decl_ref_expr
                      (template_ref __is_pointer)
                      (type_ref _ValueType1))))
                (decl_ref_expr
                  (template_ref __memcmpable)
                  (type_ref _II1)
                  (type_ref _II2))))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __equal)
              (decl_ref_expr __simple))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)))))
    (function_template __equal_aux
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __equal_aux1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __first1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __first2))))))
    (function_template __equal_aux
      (template_type_parameter _II1)
      (template_type_parameter _Seq1)
      (template_type_parameter _Cat1)
      (template_type_parameter _II2)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (type_ref _II2)))
    (function_template __equal_aux
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (template_type_parameter _Seq2)
      (template_type_parameter _Cat2)
      (parm_decl
        (type_ref _II1))
      (parm_decl
        (type_ref _II1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II2)
        (type_ref _Seq2)
        (type_ref _Cat2)))
    (function_template __equal_aux
      (template_type_parameter _II1)
      (template_type_parameter _Seq1)
      (template_type_parameter _Cat1)
      (template_type_parameter _II2)
      (template_type_parameter _Seq2)
      (template_type_parameter _Cat2)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _II2)
        (type_ref _Seq2)
        (type_ref _Cat2)))
    (class_template __lc_rai
      (template_type_parameter)
      (template_type_parameter)
      (function_template __newlast1
        (template_type_parameter _II1)
        (template_type_parameter _II2)
        (type_ref _II1)
        (parm_decl
          (type_ref _II1))
        (parm_decl __last1
          (type_ref _II1))
        (parm_decl
          (type_ref _II2))
        (parm_decl
          (type_ref _II2))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __last1))))
      (function_template __cnd2
        (template_type_parameter _II)
        (parm_decl __first
          (type_ref _II))
        (parm_decl __last
          (type_ref _II))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))))))
    (struct_decl __lc_rai
      (type_ref struct std::random_access_iterator_tag)
      (type_ref struct std::random_access_iterator_tag)
      (function_template __newlast1
        (template_type_parameter _RAI1)
        (template_type_parameter _RAI2)
        (type_ref _RAI1)
        (parm_decl __first1
          (type_ref _RAI1))
        (parm_decl __last1
          (type_ref _RAI1))
        (parm_decl __first2
          (type_ref _RAI2))
        (parm_decl __last2
          (type_ref _RAI2))
        (compound_stmt
          (decl_stmt
            (var_decl __diff1
              (template_ref iterator_traits)
              (type_ref _RAI1)
              (call_expr
                (decl_ref_expr __last1)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first1))))
          (decl_stmt
            (var_decl __diff2
              (template_ref iterator_traits)
              (type_ref _RAI2)
              (call_expr
                (decl_ref_expr __last2)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first2))))
          (return_stmt
            (conditional_operator
              (call_expr
                (decl_ref_expr __diff2)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __diff1))
              (call_expr
                (decl_ref_expr __first1)
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr __diff2))
              (decl_ref_expr __last1)))))
      (function_template __cnd2
        (template_type_parameter _RAI)
        (parm_decl
          (type_ref _RAI))
        (parm_decl
          (type_ref _RAI))
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (function_template __lexicographical_compare_impl
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (template_type_parameter _Compare)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (parm_decl __comp
        (type_ref _Compare))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Category1
            (template_ref iterator_traits)
            (type_ref _II1)))
        (decl_stmt
          (typedef_decl _Category2
            (template_ref iterator_traits)
            (type_ref _II2)))
        (decl_stmt
          (typedef_decl __rai_type
            (namespace_ref std)
            (template_ref __lc_rai)
            (type_ref _Category1)
            (type_ref _Category2)))
        (binary_operator
          (decl_ref_expr __last1)
          (call_expr
            (decl_ref_expr
              (type_ref __rai_type))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)))
        (for_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr
                (type_ref __rai_type))
              (decl_ref_expr __first2)
              (decl_ref_expr __last2)))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (compound_stmt
            (if_stmt
              (call_expr __comp
                (decl_ref_expr __comp)
                (decl_ref_expr __first1)
                (decl_ref_expr __first2))
              (return_stmt
                (cxx_bool_literal_expr)))
            (if_stmt
              (call_expr __comp
                (decl_ref_expr __comp)
                (decl_ref_expr __first2)
                (decl_ref_expr __first1))
              (return_stmt
                (cxx_bool_literal_expr)))))
        (return_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr __first2)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last2))))))
    (class_template __lexicographical_compare
      (template_non_type_parameter _BoolType)
      (function_template __lc
        (template_type_parameter _II1)
        (template_type_parameter _II2)
        (parm_decl __first1
          (type_ref _II1))
        (parm_decl __last1
          (type_ref _II1))
        (parm_decl __first2
          (type_ref _II2))
        (parm_decl __last2
          (type_ref _II2))
        (compound_stmt
          (decl_stmt
            (using_declaration __iter_less_iter
              (namespace_ref __gnu_cxx)
              (namespace_ref __ops)
              (overloaded_decl_ref __iter_less_iter)))
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __lexicographical_compare_impl))
              (decl_ref_expr __first1)
              (decl_ref_expr __last1)
              (decl_ref_expr __first2)
              (decl_ref_expr __last2)
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __iter_less_iter)))))))
      (function_template __3way
        (template_type_parameter _II1)
        (template_type_parameter _II2)
        (parm_decl __first1
          (type_ref _II1))
        (parm_decl __last1
          (type_ref _II1))
        (parm_decl __first2
          (type_ref _II2))
        (parm_decl __last2
          (type_ref _II2))
        (compound_stmt
          (while_stmt
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (compound_stmt
              (if_stmt
                (call_expr
                  (decl_ref_expr __first2)
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (decl_ref_expr __last2))
                (return_stmt
                  (unary_operator
                    (integer_literal 1))))
              (if_stmt
                (call_expr
                  (unary_operator
                    (decl_ref_expr __first1))
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (unary_operator
                    (decl_ref_expr __first2)))
                (return_stmt
                  (unary_operator
                    (integer_literal 1))))
              (if_stmt
                (call_expr
                  (unary_operator
                    (decl_ref_expr __first2))
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (unary_operator
                    (decl_ref_expr __first1)))
                (return_stmt
                  (unary_operator
                    (integer_literal 1))))
              (unary_operator
                (decl_ref_expr __first1))
              (unary_operator
                (decl_ref_expr __first2))))
          (return_stmt
            (binary_operator
              (call_expr
                (call_expr
                  (decl_ref_expr __first2)
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (decl_ref_expr __last2)))
              (integer_literal 1))))))
    (struct_decl __lexicographical_compare
      (cxx_bool_literal_expr)
      (function_template __lc
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __first1
          (type_ref _Tp))
        (parm_decl __last1
          (type_ref _Tp))
        (parm_decl __first2
          (type_ref _Up))
        (parm_decl __last2
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __3way))
                (decl_ref_expr __first1)
                (decl_ref_expr __last1)
                (decl_ref_expr __first2)
                (decl_ref_expr __last2))
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (integer_literal 0)))))
      (function_template __3way
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref std::ptrdiff_t)
        (parm_decl __first1
          (type_ref _Tp))
        (parm_decl __last1
          (type_ref _Tp))
        (parm_decl __first2
          (type_ref _Up))
        (parm_decl __last2
          (type_ref _Up))
        (compound_stmt
          (decl_stmt
            (var_decl __len1
              (type_ref std::size_t)
              (call_expr
                (decl_ref_expr __last1)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first1))))
          (decl_stmt
            (var_decl __len2
              (type_ref std::size_t)
              (call_expr
                (decl_ref_expr __last2)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __first2))))
          (if_stmt
            (var_decl __len
              (type_ref std::size_t)
              (call_expr min
                (decl_ref_expr min
                  (namespace_ref std))
                (decl_ref_expr __len1)
                (decl_ref_expr __len2)))
            (decl_ref_expr __len)
            (if_stmt
              (var_decl __result
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __memcmp))
                  (decl_ref_expr __first1)
                  (decl_ref_expr __first2)
                  (decl_ref_expr __len)))
              (decl_ref_expr __result)
              (return_stmt
                (decl_ref_expr __result))))
          (return_stmt
            (cxx_functional_cast_expr
              (type_ref std::ptrdiff_t)
              (binary_operator
                (decl_ref_expr __len1)
                (decl_ref_expr __len2)))))))
    (function_template __lexicographical_compare_aux1
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType1
            (template_ref iterator_traits)
            (type_ref _II1)))
        (decl_stmt
          (typedef_decl _ValueType2
            (template_ref iterator_traits)
            (type_ref _II2)))
        (decl_stmt
          (var_decl __simple
            (paren_expr
              (binary_operator
                (binary_operator
                  (decl_ref_expr
                    (template_ref __is_memcmp_ordered_with)
                    (type_ref _ValueType1)
                    (type_ref _ValueType2))
                  (decl_ref_expr
                    (template_ref __is_pointer)
                    (type_ref _II1)))
                (decl_ref_expr
                  (template_ref __is_pointer)
                  (type_ref _II2))))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __lexicographical_compare)
              (decl_ref_expr __simple))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)))))
    (function_template __lexicographical_compare_aux1
      (template_type_parameter _Tp1)
      (template_type_parameter _Ref1)
      (template_type_parameter _Ptr1)
      (template_type_parameter _Tp2)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (type_ref _Tp2))
      (parm_decl
        (type_ref _Tp2)))
    (function_template __lexicographical_compare_aux1
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_type_parameter _Ref2)
      (template_type_parameter _Ptr2)
      (parm_decl
        (type_ref _Tp1))
      (parm_decl
        (type_ref _Tp1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp2)
        (type_ref _Ref2)
        (type_ref _Ptr2))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp2)
        (type_ref _Ref2)
        (type_ref _Ptr2)))
    (function_template __lexicographical_compare_aux1
      (template_type_parameter _Tp1)
      (template_type_parameter _Ref1)
      (template_type_parameter _Ptr1)
      (template_type_parameter _Tp2)
      (template_type_parameter _Ref2)
      (template_type_parameter _Ptr2)
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp1)
        (type_ref _Ref1)
        (type_ref _Ptr1))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp2)
        (type_ref _Ref2)
        (type_ref _Ptr2))
      (parm_decl
        (namespace_ref std)
        (template_ref _Deque_iterator)
        (type_ref _Tp2)
        (type_ref _Ref2)
        (type_ref _Ptr2)))
    (function_template __lexicographical_compare_aux
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __lexicographical_compare_aux1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __first1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __first2))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __last2))))))
    (function_template __lexicographical_compare_aux
      (template_type_parameter _Iter1)
      (template_type_parameter _Seq1)
      (template_type_parameter _Cat1)
      (template_type_parameter _II2)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (type_ref _II2))
      (parm_decl
        (type_ref _II2)))
    (function_template __lexicographical_compare_aux
      (template_type_parameter _II1)
      (template_type_parameter _Iter2)
      (template_type_parameter _Seq2)
      (template_type_parameter _Cat2)
      (parm_decl
        (type_ref _II1))
      (parm_decl
        (type_ref _II1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter2)
        (type_ref _Seq2)
        (type_ref _Cat2))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter2)
        (type_ref _Seq2)
        (type_ref _Cat2)))
    (function_template __lexicographical_compare_aux
      (template_type_parameter _Iter1)
      (template_type_parameter _Seq1)
      (template_type_parameter _Cat1)
      (template_type_parameter _Iter2)
      (template_type_parameter _Seq2)
      (template_type_parameter _Cat2)
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter1)
        (type_ref _Seq1)
        (type_ref _Cat1))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter2)
        (type_ref _Seq2)
        (type_ref _Cat2))
      (parm_decl
        (namespace_ref __gnu_debug)
        (template_ref _Safe_iterator)
        (type_ref _Iter2)
        (type_ref _Seq2)
        (type_ref _Cat2)))
    (function_template __lower_bound
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_type_parameter _Compare)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __val
        (type_ref _Tp))
      (parm_decl __comp
        (type_ref _Compare))
      (compound_stmt
        (decl_stmt
          (typedef_decl _DistanceType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (var_decl __len
            (type_ref _DistanceType)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref distance))
              (decl_ref_expr __first)
              (decl_ref_expr __last))))
        (while_stmt
          (call_expr
            (decl_ref_expr __len)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (compound_stmt
            (decl_stmt
              (var_decl __half
                (type_ref _DistanceType)
                (binary_operator
                  (decl_ref_expr __len)
                  (integer_literal 1))))
            (decl_stmt
              (var_decl __middle
                (type_ref _ForwardIterator)
                (decl_ref_expr __first)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref advance))
              (decl_ref_expr __middle)
              (decl_ref_expr __half))
            (if_stmt
              (call_expr __comp
                (decl_ref_expr __comp)
                (decl_ref_expr __middle)
                (decl_ref_expr __val))
              (compound_stmt
                (binary_operator
                  (decl_ref_expr __first)
                  (decl_ref_expr __middle))
                (unary_operator
                  (decl_ref_expr __first))
                (binary_operator
                  (decl_ref_expr __len)
                  (call_expr
                    (call_expr
                      (decl_ref_expr __len)
                      (decl_ref_expr
                        (overloaded_decl_ref operator-))
                      (decl_ref_expr __half))
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (integer_literal 1))))
              (binary_operator
                (decl_ref_expr __len)
                (decl_ref_expr __half)))))
        (return_stmt
          (decl_ref_expr __first))))
    (function_template lower_bound
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __val
        (type_ref _Tp))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __lower_bound))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __val)
            (call_expr __iter_less_val
              (decl_ref_expr __iter_less_val
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clz
              (decl_ref_expr __builtin_clz)
              (decl_ref_expr __n))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clz
              (decl_ref_expr __builtin_clz)
              (decl_ref_expr __n))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clzl
              (decl_ref_expr __builtin_clzl)
              (decl_ref_expr __n))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clzl
              (decl_ref_expr __builtin_clzl)
              (decl_ref_expr __n))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clzll
              (decl_ref_expr __builtin_clzll)
              (decl_ref_expr __n))))))
    (function_decl __lg
      (parm_decl __n)
      (compound_stmt
        (return_stmt
          (binary_operator
            (binary_operator
              (binary_operator
                (cstyle_cast_expr
                  (cxx_unary_expr))
                (integer_literal))
              (integer_literal 1))
            (call_expr __builtin_clzll
              (decl_ref_expr __builtin_clzll)
              (decl_ref_expr __n))))))
    (function_template equal
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __equal_aux))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)))))
    (function_template equal
      (template_type_parameter _IIter1)
      (template_type_parameter _IIter2)
      (template_type_parameter _BinaryPredicate)
      (parm_decl __first1
        (type_ref _IIter1))
      (parm_decl __last1
        (type_ref _IIter1))
      (parm_decl __first2
        (type_ref _IIter2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (null_stmt)
        (for_stmt
          (call_expr
            (decl_ref_expr __first1)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last1))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (if_stmt
            (unary_operator
              (call_expr
                (call_expr __binary_pred
                  (decl_ref_expr __binary_pred)
                  (unary_operator
                    (decl_ref_expr __first1))
                  (unary_operator
                    (decl_ref_expr __first2)))))
            (return_stmt
              (cxx_bool_literal_expr))))
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_template __equal4
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _RATag
            (type_ref struct std::random_access_iterator_tag)))
        (decl_stmt
          (type_alias_decl _Cat1
            (template_ref iterator_traits)
            (type_ref _II1)))
        (decl_stmt
          (type_alias_decl _Cat2
            (template_ref iterator_traits)
            (type_ref _II2)))
        (decl_stmt
          (type_alias_decl _RAIters
            (template_ref __and_)
            (template_ref is_same)
            (type_ref _Cat1)
            (type_ref _RATag)
            (template_ref is_same)
            (type_ref _Cat2)
            (type_ref _RATag)))
        (if_stmt
          (call_expr
            (type_ref _RAIters))
          (compound_stmt
            (decl_stmt
              (var_decl __d1
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref distance))
                  (decl_ref_expr __first1)
                  (decl_ref_expr __last1))))
            (decl_stmt
              (var_decl __d2
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref distance))
                  (decl_ref_expr __first2)
                  (decl_ref_expr __last2))))
            (if_stmt
              (call_expr
                (decl_ref_expr __d1)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __d2))
              (return_stmt
                (cxx_bool_literal_expr)))
            (return_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref equal))
                (decl_ref_expr __first1)
                (decl_ref_expr __last1)
                (decl_ref_expr __first2)))))
        (for_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr __first2)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last2)))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (if_stmt
            (unary_operator
              (paren_expr
                (call_expr
                  (unary_operator
                    (decl_ref_expr __first1))
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (unary_operator
                    (decl_ref_expr __first2)))))
            (return_stmt
              (cxx_bool_literal_expr))))
        (return_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr __first2)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last2))))))
    (function_template __equal4
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (template_type_parameter _BinaryPredicate)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _RATag
            (type_ref struct std::random_access_iterator_tag)))
        (decl_stmt
          (type_alias_decl _Cat1
            (template_ref iterator_traits)
            (type_ref _II1)))
        (decl_stmt
          (type_alias_decl _Cat2
            (template_ref iterator_traits)
            (type_ref _II2)))
        (decl_stmt
          (type_alias_decl _RAIters
            (template_ref __and_)
            (template_ref is_same)
            (type_ref _Cat1)
            (type_ref _RATag)
            (template_ref is_same)
            (type_ref _Cat2)
            (type_ref _RATag)))
        (if_stmt
          (call_expr
            (type_ref _RAIters))
          (compound_stmt
            (decl_stmt
              (var_decl __d1
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref distance))
                  (decl_ref_expr __first1)
                  (decl_ref_expr __last1))))
            (decl_stmt
              (var_decl __d2
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref distance))
                  (decl_ref_expr __first2)
                  (decl_ref_expr __last2))))
            (if_stmt
              (call_expr
                (decl_ref_expr __d1)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __d2))
              (return_stmt
                (cxx_bool_literal_expr)))
            (return_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref equal))
                (decl_ref_expr __first1)
                (decl_ref_expr __last1)
                (decl_ref_expr __first2)
                (decl_ref_expr __binary_pred)))))
        (for_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr __first2)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last2)))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (if_stmt
            (unary_operator
              (call_expr
                (call_expr __binary_pred
                  (decl_ref_expr __binary_pred)
                  (unary_operator
                    (decl_ref_expr __first1))
                  (unary_operator
                    (decl_ref_expr __first2)))))
            (return_stmt
              (cxx_bool_literal_expr))))
        (return_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last1))
            (call_expr
              (decl_ref_expr __first2)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last2))))))
    (function_template equal
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __equal4))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)))))
    (function_template equal
      (template_type_parameter _IIter1)
      (template_type_parameter _IIter2)
      (template_type_parameter _BinaryPredicate)
      (parm_decl __first1
        (type_ref _IIter1))
      (parm_decl __last1
        (type_ref _IIter1))
      (parm_decl __first2
        (type_ref _IIter2))
      (parm_decl __last2
        (type_ref _IIter2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __equal4))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)
            (decl_ref_expr __binary_pred)))))
    (function_template lexicographical_compare
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __lexicographical_compare_aux))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)))))
    (function_template lexicographical_compare
      (template_type_parameter _II1)
      (template_type_parameter _II2)
      (template_type_parameter _Compare)
      (parm_decl __first1
        (type_ref _II1))
      (parm_decl __last1
        (type_ref _II1))
      (parm_decl __first2
        (type_ref _II2))
      (parm_decl __last2
        (type_ref _II2))
      (parm_decl __comp
        (type_ref _Compare))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __lexicographical_compare_impl))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)
            (call_expr
              (decl_ref_expr
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)
                (overloaded_decl_ref __iter_comp_iter))
              (decl_ref_expr __comp))))))
    (function_template __mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _BinaryPredicate)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (while_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first1)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last1))
            (call_expr __binary_pred
              (decl_ref_expr __binary_pred)
              (decl_ref_expr __first1)
              (decl_ref_expr __first2)))
          (compound_stmt
            (unary_operator
              (decl_ref_expr __first1))
            (unary_operator
              (decl_ref_expr __first2))))
        (return_stmt
          (call_expr
            (template_ref pair)
            (type_ref _InputIterator1)
            (type_ref _InputIterator2)
            (decl_ref_expr __first1)
            (decl_ref_expr __first2)))))
    (function_template mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __mismatch))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (call_expr __iter_equal_to_iter
              (decl_ref_expr __iter_equal_to_iter
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)))))))
    (function_template mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _BinaryPredicate)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __mismatch))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (call_expr
              (decl_ref_expr
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)
                (overloaded_decl_ref __iter_comp_iter))
              (decl_ref_expr __binary_pred))))))
    (function_template __mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _BinaryPredicate)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __last2
        (type_ref _InputIterator2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (while_stmt
          (binary_operator
            (binary_operator
              (call_expr
                (decl_ref_expr __first1)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __last1))
              (call_expr
                (decl_ref_expr __first2)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __last2)))
            (call_expr __binary_pred
              (decl_ref_expr __binary_pred)
              (decl_ref_expr __first1)
              (decl_ref_expr __first2)))
          (compound_stmt
            (unary_operator
              (decl_ref_expr __first1))
            (unary_operator
              (decl_ref_expr __first2))))
        (return_stmt
          (call_expr
            (template_ref pair)
            (type_ref _InputIterator1)
            (type_ref _InputIterator2)
            (decl_ref_expr __first1)
            (decl_ref_expr __first2)))))
    (function_template mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __last2
        (type_ref _InputIterator2))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __mismatch))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)
            (call_expr __iter_equal_to_iter
              (decl_ref_expr __iter_equal_to_iter
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)))))))
    (function_template mismatch
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _BinaryPredicate)
      (template_ref pair)
      (type_ref _InputIterator1)
      (type_ref _InputIterator2)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __last2
        (type_ref _InputIterator2))
      (parm_decl __binary_pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (null_stmt)
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __mismatch))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (decl_ref_expr __last2)
            (call_expr
              (decl_ref_expr
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops)
                (overloaded_decl_ref __iter_comp_iter))
              (decl_ref_expr __binary_pred))))))
    (function_template __find_if
      (template_type_parameter _InputIterator)
      (template_type_parameter _Predicate)
      (type_ref _InputIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __pred
        (type_ref _Predicate))
      (parm_decl
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (while_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (unary_operator
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first))))
          (unary_operator
            (decl_ref_expr __first)))
        (return_stmt
          (decl_ref_expr __first))))
    (function_template __find_if
      (template_type_parameter _RandomAccessIterator)
      (template_type_parameter _Predicate)
      (type_ref _RandomAccessIterator)
      (parm_decl __first
        (type_ref _RandomAccessIterator))
      (parm_decl __last
        (type_ref _RandomAccessIterator))
      (parm_decl __pred
        (type_ref _Predicate))
      (parm_decl
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (decl_stmt
          (var_decl __trip_count
            (template_ref iterator_traits)
            (type_ref _RandomAccessIterator)
            (binary_operator
              (paren_expr
                (call_expr
                  (decl_ref_expr __last)
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr __first)))
              (integer_literal 2))))
        (for_stmt
          (call_expr
            (decl_ref_expr __trip_count)
            (decl_ref_expr
              (overloaded_decl_ref operator>))
            (integer_literal 0))
          (unary_operator
            (decl_ref_expr __trip_count))
          (compound_stmt
            (if_stmt
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first))
              (return_stmt
                (decl_ref_expr __first)))
            (unary_operator
              (decl_ref_expr __first))
            (if_stmt
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first))
              (return_stmt
                (decl_ref_expr __first)))
            (unary_operator
              (decl_ref_expr __first))
            (if_stmt
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first))
              (return_stmt
                (decl_ref_expr __first)))
            (unary_operator
              (decl_ref_expr __first))
            (if_stmt
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first))
              (return_stmt
                (decl_ref_expr __first)))
            (unary_operator
              (decl_ref_expr __first))))
        (switch_stmt
          (call_expr
            (decl_ref_expr __last)
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (decl_ref_expr __first))
          (compound_stmt
            (case_stmt
              (integer_literal 3)
              (if_stmt
                (call_expr __pred
                  (decl_ref_expr __pred)
                  (decl_ref_expr __first))
                (return_stmt
                  (decl_ref_expr __first))))
            (unary_operator
              (decl_ref_expr __first))
            (case_stmt
              (integer_literal 2)
              (if_stmt
                (call_expr __pred
                  (decl_ref_expr __pred)
                  (decl_ref_expr __first))
                (return_stmt
                  (decl_ref_expr __first))))
            (unary_operator
              (decl_ref_expr __first))
            (case_stmt
              (integer_literal 1)
              (if_stmt
                (call_expr __pred
                  (decl_ref_expr __pred)
                  (decl_ref_expr __first))
                (return_stmt
                  (decl_ref_expr __first))))
            (unary_operator
              (decl_ref_expr __first))
            (case_stmt
              (integer_literal 0)
              (default_stmt
                (return_stmt
                  (decl_ref_expr __last))))))))
    (function_template __find_if
      (template_type_parameter _Iterator)
      (template_type_parameter _Predicate)
      (type_ref _Iterator)
      (parm_decl __first
        (type_ref _Iterator))
      (parm_decl __last
        (type_ref _Iterator))
      (parm_decl __pred
        (type_ref _Predicate))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __find_if))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __pred)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __iterator_category))
              (decl_ref_expr __first))))))
    (function_template __count_if
      (template_type_parameter _InputIterator)
      (template_type_parameter _Predicate)
      (template_ref iterator_traits)
      (type_ref _InputIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __pred
        (type_ref _Predicate))
      (compound_stmt
        (decl_stmt
          (var_decl __n
            (template_ref iterator_traits)
            (type_ref _InputIterator)
            (integer_literal 0)))
        (for_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (unary_operator
            (decl_ref_expr __first))
          (if_stmt
            (call_expr __pred
              (decl_ref_expr __pred)
              (decl_ref_expr __first))
            (unary_operator
              (decl_ref_expr __n))))
        (return_stmt
          (decl_ref_expr __n))))
    (function_template __is_permutation
      (template_type_parameter _ForwardIterator1)
      (template_type_parameter _ForwardIterator2)
      (template_type_parameter _BinaryPredicate)
      (parm_decl __first1
        (type_ref _ForwardIterator1))
      (parm_decl __last1
        (type_ref _ForwardIterator1))
      (parm_decl __first2
        (type_ref _ForwardIterator2))
      (parm_decl __pred
        (type_ref _BinaryPredicate))
      (compound_stmt
        (for_stmt
          (call_expr
            (decl_ref_expr __first1)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last1))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first1))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __first2))))
          (if_stmt
            (unary_operator
              (call_expr __pred
                (decl_ref_expr __pred)
                (decl_ref_expr __first1)
                (decl_ref_expr __first2)))
            (break_stmt)))
        (if_stmt
          (call_expr
            (decl_ref_expr __first1)
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (decl_ref_expr __last1))
          (return_stmt
            (cxx_bool_literal_expr)))
        (decl_stmt
          (var_decl __last2
            (type_ref _ForwardIterator2)
            (decl_ref_expr __first2)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref advance))
          (decl_ref_expr __last2)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref distance))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)))
        (for_stmt
          (decl_stmt
            (var_decl __scan
              (type_ref _ForwardIterator1)
              (decl_ref_expr __first1)))
          (call_expr
            (decl_ref_expr __scan)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last1))
          (unary_operator
            (decl_ref_expr __scan))
          (compound_stmt
            (if_stmt
              (call_expr
                (decl_ref_expr __scan)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __find_if))
                  (decl_ref_expr __first1)
                  (decl_ref_expr __scan)
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref __gnu_cxx)
                      (namespace_ref __ops)
                      (overloaded_decl_ref __iter_comp_iter))
                    (decl_ref_expr __pred)
                    (decl_ref_expr __scan))))
              (continue_stmt))
            (decl_stmt
              (var_decl __matches
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __count_if))
                  (decl_ref_expr __first2)
                  (decl_ref_expr __last2)
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref __gnu_cxx)
                      (namespace_ref __ops)
                      (overloaded_decl_ref __iter_comp_iter))
                    (decl_ref_expr __pred)
                    (decl_ref_expr __scan)))))
            (if_stmt
              (binary_operator
                (call_expr
                  (integer_literal 0)
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (decl_ref_expr __matches))
                (call_expr
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __count_if))
                    (decl_ref_expr __scan)
                    (decl_ref_expr __last1)
                    (call_expr
                      (decl_ref_expr
                        (namespace_ref __gnu_cxx)
                        (namespace_ref __ops)
                        (overloaded_decl_ref __iter_comp_iter))
                      (decl_ref_expr __pred)
                      (decl_ref_expr __scan)))
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __matches)))
              (return_stmt
                (cxx_bool_literal_expr)))))
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_template is_permutation
      (template_type_parameter _ForwardIterator1)
      (template_type_parameter _ForwardIterator2)
      (parm_decl __first1
        (type_ref _ForwardIterator1))
      (parm_decl __last1
        (type_ref _ForwardIterator1))
      (parm_decl __first2
        (type_ref _ForwardIterator2))
      (compound_stmt
        (null_stmt)
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __is_permutation))
            (decl_ref_expr __first1)
            (decl_ref_expr __last1)
            (decl_ref_expr __first2)
            (call_expr __iter_equal_to_iter
              (decl_ref_expr __iter_equal_to_iter
                (namespace_ref __gnu_cxx)
                (namespace_ref __ops))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/exception.h
  (namespace std
    (class_decl exception
      (cxx_access_spec_decl)
      (constructor exception
        (compound_stmt))
      (destructor ~exception)
      (constructor exception
        (parm_decl
          (type_ref class std::exception))
        (compound_stmt))
      (cxx_method operator=
        (type_ref class std::exception)
        (parm_decl
          (type_ref class std::exception)))
      (constructor exception
        (parm_decl
          (type_ref class std::exception))
        (compound_stmt))
      (cxx_method operator=
        (type_ref class std::exception)
        (parm_decl
          (type_ref class std::exception)))
      (cxx_method what)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/new
  (namespace std
    (class_decl bad_alloc
      (cxx_base_specifier class std::exception
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (constructor bad_alloc
        (compound_stmt))
      (constructor bad_alloc
        (parm_decl
          (type_ref class std::bad_alloc)))
      (cxx_method operator=
        (type_ref class std::bad_alloc)
        (parm_decl
          (type_ref class std::bad_alloc)))
      (destructor ~bad_alloc)
      (cxx_method what))
    (class_decl bad_array_new_length
      (cxx_base_specifier class std::bad_alloc
        (type_ref class std::bad_alloc))
      (cxx_access_spec_decl)
      (constructor bad_array_new_length
        (compound_stmt))
      (destructor ~bad_array_new_length)
      (cxx_method what))
    (struct_decl nothrow_t
      (constructor nothrow_t))
    (var_decl nothrow
      (type_ref struct std::nothrow_t))
    (typedef_decl new_handler)
    (function_decl set_new_handler
      (type_ref std::new_handler)
      (parm_decl
        (type_ref std::new_handler)))
    (function_decl get_new_handler
      (type_ref std::new_handler)))
  (function_decl operator new
    (visibility_attr default)
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t)))
  (function_decl operator new[]
    (visibility_attr default)
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t)))
  (function_decl operator delete
    (visibility_attr default)
    (parm_decl))
  (function_decl operator delete[]
    (visibility_attr default)
    (parm_decl))
  (function_decl operator new
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t))
    (parm_decl
      (namespace_ref std)
      (type_ref struct std::nothrow_t)))
  (function_decl operator new[]
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t))
    (parm_decl
      (namespace_ref std)
      (type_ref struct std::nothrow_t)))
  (function_decl operator delete
    (parm_decl)
    (parm_decl
      (namespace_ref std)
      (type_ref struct std::nothrow_t)))
  (function_decl operator delete[]
    (parm_decl)
    (parm_decl
      (namespace_ref std)
      (type_ref struct std::nothrow_t)))
  (function_decl operator new
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t))
    (parm_decl __p)
    (compound_stmt
      (return_stmt
        (decl_ref_expr __p))))
  (function_decl operator new[]
    (parm_decl
      (namespace_ref std)
      (type_ref std::size_t))
    (parm_decl __p)
    (compound_stmt
      (return_stmt
        (decl_ref_expr __p))))
  (function_decl operator delete
    (parm_decl)
    (parm_decl)
    (compound_stmt))
  (function_decl operator delete[]
    (parm_decl)
    (parm_decl)
    (compound_stmt))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/new_allocator.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (class_template new_allocator
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl size_type
        (namespace_ref std)
        (type_ref std::size_t))
      (typedef_decl difference_type
        (namespace_ref std)
        (type_ref std::ptrdiff_t))
      (typedef_decl pointer
        (type_ref _Tp))
      (typedef_decl const_pointer
        (type_ref _Tp))
      (typedef_decl reference
        (type_ref _Tp))
      (typedef_decl const_reference
        (type_ref _Tp))
      (class_template rebind
        (template_type_parameter _Tp1)
        (typedef_decl other
          (template_ref new_allocator)
          (type_ref _Tp1)))
      (typedef_decl propagate_on_container_move_assignment
        (namespace_ref std)
        (type_ref std::true_type))
      (constructor new_allocator<_Tp>
        (compound_stmt))
      (constructor new_allocator<_Tp>
        (parm_decl
          (type_ref new_allocator<_Tp>))
        (compound_stmt))
      (function_template new_allocator<_Tp>
        (template_type_parameter _Tp1)
        (parm_decl
          (template_ref new_allocator)
          (type_ref _Tp1))
        (compound_stmt))
      (destructor ~new_allocator<_Tp>
        (compound_stmt))
      (cxx_method address
        (type_ref __gnu_cxx::new_allocator::pointer)
        (parm_decl __x
          (type_ref __gnu_cxx::new_allocator::reference))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (decl_ref_expr __x)))))
      (cxx_method address
        (type_ref __gnu_cxx::new_allocator::const_pointer)
        (parm_decl __x
          (type_ref __gnu_cxx::new_allocator::const_reference))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (decl_ref_expr __x)))))
      (cxx_method allocate
        (type_ref _Tp)
        (parm_decl __n
          (type_ref __gnu_cxx::new_allocator::size_type))
        (parm_decl
          (cxx_static_cast_expr
            (integer_literal 0)))
        (compound_stmt
          (decl_stmt
            (static_assert
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Tp))
                (integer_literal 0))
              (string_literal "cannot allocate incomplete types")))
          (if_stmt
            (call_expr __builtin_expect
              (decl_ref_expr __builtin_expect)
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (call_expr
                  (member_ref_expr
                    (cxx_this_expr))))
              (cxx_bool_literal_expr))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (decl_ref_expr __n)
                  (paren_expr
                    (binary_operator
                      (cxx_functional_cast_expr
                        (namespace_ref std)
                        (type_ref std::size_t)
                        (unary_operator
                          (integer_literal 1)))
                      (cxx_unary_expr
                        (type_ref _Tp)))))
                (call_expr __throw_bad_array_new_length
                  (decl_ref_expr __throw_bad_array_new_length
                    (namespace_ref std))))
              (call_expr __throw_bad_alloc
                (decl_ref_expr __throw_bad_alloc
                  (namespace_ref std)))))
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (call_expr operator new
                (decl_ref_expr operator new)
                (binary_operator
                  (decl_ref_expr __n)
                  (cxx_unary_expr
                    (type_ref _Tp))))))))
      (cxx_method deallocate
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __t
          (type_ref __gnu_cxx::new_allocator::size_type))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref operator delete))
            (decl_ref_expr __p))))
      (cxx_method max_size
        (type_ref __gnu_cxx::new_allocator::size_type)
        (compound_stmt
          (return_stmt
            (call_expr _M_max_size
              (member_ref_expr _M_max_size)))))
      (function_template construct
        (template_type_parameter _Up)
        (template_type_parameter _Args)
        (parm_decl __p
          (type_ref _Up))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (cxx_new_expr
            (cstyle_cast_expr
              (decl_ref_expr __p))
            (type_ref _Up)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template destroy
        (template_type_parameter _Up)
        (parm_decl __p
          (type_ref _Up))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __p)
              (type_ref _Up)))))
      (friend_decl
        (function_template operator==
          (template_type_parameter _Up)
          (parm_decl
            (type_ref new_allocator<_Tp>))
          (parm_decl
            (template_ref new_allocator)
            (type_ref _Up))
          (compound_stmt
            (return_stmt
              (cxx_bool_literal_expr)))))
      (friend_decl
        (function_template operator!=
          (template_type_parameter _Up)
          (parm_decl
            (type_ref new_allocator<_Tp>))
          (parm_decl
            (template_ref new_allocator)
            (type_ref _Up))
          (compound_stmt
            (return_stmt
              (cxx_bool_literal_expr)))))
      (cxx_access_spec_decl)
      (cxx_method _M_max_size
        (type_ref __gnu_cxx::new_allocator::size_type)
        (compound_stmt
          (return_stmt
            (binary_operator
              (cxx_functional_cast_expr
                (namespace_ref std)
                (type_ref std::size_t)
                (integer_literal))
              (cxx_unary_expr
                (type_ref _Tp))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/x86_64-linux-gnu/c++/11/bits/c++allocator.h
  (namespace std
    (type_alias_template_decl __allocator_base
      (template_type_parameter _Tp)
      (type_alias_decl __allocator_base
        (namespace_ref __gnu_cxx)
        (template_ref new_allocator)
        (type_ref _Tp))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/memoryfwd.h
  (namespace std
    (visibility_attr default)
    (class_template allocator
      (template_type_parameter))
    (class_decl allocator)
    (class_template uses_allocator
      (template_type_parameter)
      (template_type_parameter))
    (class_template allocator_traits
      (template_type_parameter)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/allocator.h
  (namespace std
    (visibility_attr default)
    (class_decl allocator
      (cxx_access_spec_decl)
      (typedef_decl value_type)
      (typedef_decl size_type
        (type_ref std::size_t))
      (typedef_decl difference_type
        (type_ref std::ptrdiff_t))
      (typedef_decl pointer)
      (typedef_decl const_pointer)
      (class_template rebind
        (template_type_parameter _Tp1)
        (typedef_decl other
          (template_ref allocator)
          (type_ref _Tp1)))
      (type_alias_decl propagate_on_container_move_assignment
        (type_ref std::true_type))
      (type_alias_decl is_always_equal
        (type_ref std::true_type)))
    (class_template allocator
      (template_type_parameter _Tp)
      (cxx_base_specifier __allocator_base<_Tp>
        (template_ref __allocator_base)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl size_type
        (type_ref std::size_t))
      (typedef_decl difference_type
        (type_ref std::ptrdiff_t))
      (typedef_decl pointer
        (type_ref _Tp))
      (typedef_decl const_pointer
        (type_ref _Tp))
      (typedef_decl reference
        (type_ref _Tp))
      (typedef_decl const_reference
        (type_ref _Tp))
      (class_template rebind
        (template_type_parameter _Tp1)
        (typedef_decl other
          (template_ref allocator)
          (type_ref _Tp1)))
      (type_alias_decl propagate_on_container_move_assignment
        (type_ref std::true_type))
      (type_alias_decl is_always_equal
        (type_ref std::true_type))
      (constructor allocator<type-parameter-0-0>
        (compound_stmt))
      (constructor allocator<type-parameter-0-0>
        (parm_decl __a
          (type_ref allocator<type-parameter-0-0>))
        (template_ref __allocator_base)
        (type_ref _Tp)
        (decl_ref_expr __a)
        (compound_stmt))
      (cxx_method operator=
        (type_ref allocator<type-parameter-0-0>)
        (parm_decl
          (type_ref allocator<type-parameter-0-0>)))
      (function_template allocator<type-parameter-0-0>
        (template_type_parameter _Tp1)
        (parm_decl
          (template_ref allocator)
          (type_ref _Tp1))
        (compound_stmt))
      (destructor ~allocator<type-parameter-0-0>
        (compound_stmt))
      (friend_decl
        (function_decl operator==
          (parm_decl
            (type_ref allocator<type-parameter-0-0>))
          (parm_decl
            (type_ref allocator<type-parameter-0-0>))
          (compound_stmt
            (return_stmt
              (cxx_bool_literal_expr)))))
      (friend_decl
        (function_decl operator!=
          (parm_decl
            (type_ref allocator<type-parameter-0-0>))
          (parm_decl
            (type_ref allocator<type-parameter-0-0>))
          (compound_stmt
            (return_stmt
              (cxx_bool_literal_expr))))))
    (function_template operator==
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl
        (template_ref allocator)
        (type_ref _T1))
      (parm_decl
        (template_ref allocator)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_template operator!=
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (parm_decl
        (template_ref allocator)
        (type_ref _T1))
      (parm_decl
        (template_ref allocator)
        (type_ref _T2))
      (compound_stmt
        (return_stmt
          (cxx_bool_literal_expr))))
    (class_template_partial_specialization allocator
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (function_template allocator<const type-parameter-0-0>
        (template_type_parameter _Up)
        (parm_decl
          (template_ref allocator)
          (type_ref _Up))
        (compound_stmt)))
    (class_template_partial_specialization allocator
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (function_template allocator<volatile type-parameter-0-0>
        (template_type_parameter _Up)
        (parm_decl
          (template_ref allocator)
          (type_ref _Up))
        (compound_stmt)))
    (class_template_partial_specialization allocator
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (function_template allocator<const volatile type-parameter-0-0>
        (template_type_parameter _Up)
        (parm_decl
          (template_ref allocator)
          (type_ref _Up))
        (compound_stmt)))
    (class_decl allocator)
    (class_decl allocator)
    (class_template __alloc_swap
      (template_type_parameter _Alloc)
      (template_non_type_parameter
        (type_ref _Alloc))
      (cxx_method _S_do_it
        (parm_decl
          (type_ref _Alloc))
        (parm_decl
          (type_ref _Alloc))
        (compound_stmt)))
    (class_template_partial_specialization __alloc_swap
      (template_type_parameter _Alloc)
      (type_ref _Alloc)
      (cxx_bool_literal_expr)
      (cxx_method _S_do_it
        (parm_decl __one
          (type_ref _Alloc))
        (parm_decl __two
          (type_ref _Alloc))
        (compound_stmt
          (if_stmt
            (call_expr
              (decl_ref_expr __one)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __two))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref swap))
              (decl_ref_expr __one)
              (decl_ref_expr __two))))))
    (class_template __alloc_neq
      (template_type_parameter _Alloc)
      (template_non_type_parameter
        (type_ref _Alloc))
      (cxx_method _S_do_it
        (parm_decl
          (type_ref _Alloc))
        (parm_decl
          (type_ref _Alloc))
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (class_template_partial_specialization __alloc_neq
      (template_type_parameter _Alloc)
      (type_ref _Alloc)
      (cxx_bool_literal_expr)
      (cxx_method _S_do_it
        (parm_decl __one
          (type_ref _Alloc))
        (parm_decl __two
          (type_ref _Alloc))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __one)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __two))))))
    (class_template __shrink_to_fit_aux
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_copy_constructible)
          (type_ref _Tp)
          (template_ref is_nothrow_move_constructible)
          (type_ref _Tp)))
      (cxx_method _S_do_it
        (parm_decl
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (class_template_partial_specialization __shrink_to_fit_aux
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_method _S_do_it
        (parm_decl __c
          (type_ref _Tp))
        (compound_stmt
          (cxx_try_stmt
            (compound_stmt
              (call_expr
                (member_ref_expr
                  (call_expr
                    (type_ref _Tp)
                    (call_expr
                      (decl_ref_expr
                        (overloaded_decl_ref __make_move_if_noexcept_iterator))
                      (call_expr
                        (member_ref_expr
                          (decl_ref_expr __c))))
                    (call_expr
                      (decl_ref_expr
                        (overloaded_decl_ref __make_move_if_noexcept_iterator))
                      (call_expr
                        (member_ref_expr
                          (decl_ref_expr __c))))
                    (call_expr
                      (member_ref_expr
                        (decl_ref_expr __c)))))
                (decl_ref_expr __c))
              (return_stmt
                (cxx_bool_literal_expr)))
            (cxx_catch_stmt
              (compound_stmt
                (return_stmt
                  (cxx_bool_literal_expr)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_construct.h
  (namespace std
    (visibility_attr default)
    (function_template _Construct
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (parm_decl __p
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (cxx_new_expr
          (cxx_static_cast_expr
            (decl_ref_expr __p))
          (type_ref _Tp)
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args))))))
    (function_template _Construct_novalue
      (template_type_parameter _T1)
      (parm_decl __p
        (type_ref _T1))
      (compound_stmt
        (cxx_new_expr
          (cxx_static_cast_expr
            (decl_ref_expr __p))
          (type_ref _T1))))
    (function_template _Destroy
      (template_type_parameter _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator)))
    (function_template _Destroy
      (template_type_parameter _Tp)
      (parm_decl __pointer
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __pointer)
            (type_ref _Tp)))))
    (class_template _Destroy_aux
      (template_non_type_parameter)
      (function_template __destroy
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (compound_stmt
          (for_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (unary_operator
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref _Destroy))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __addressof))
                (unary_operator
                  (decl_ref_expr __first))))))))
    (struct_decl _Destroy_aux
      (cxx_bool_literal_expr)
      (function_template __destroy
        (template_type_parameter _ForwardIterator)
        (parm_decl
          (type_ref _ForwardIterator))
        (parm_decl
          (type_ref _ForwardIterator))
        (compound_stmt)))
    (function_template _Destroy
      (template_type_parameter _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Value_type
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref is_destructible)
              (type_ref _Value_type))
            (string_literal "value type is destructible")))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (template_ref _Destroy_aux)
            (type_ref _Value_type))
          (decl_ref_expr __first)
          (decl_ref_expr __last))))
    (class_template _Destroy_n_aux
      (template_non_type_parameter)
      (function_template __destroy_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __count
          (type_ref _Size))
        (compound_stmt
          (for_stmt
            (call_expr
              (decl_ref_expr __count)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (binary_operator
              (cstyle_cast_expr
                (unary_operator
                  (decl_ref_expr __first)))
              (unary_operator
                (decl_ref_expr __count)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref _Destroy))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __addressof))
                (unary_operator
                  (decl_ref_expr __first)))))
          (return_stmt
            (decl_ref_expr __first)))))
    (struct_decl _Destroy_n_aux
      (cxx_bool_literal_expr)
      (function_template __destroy_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __count
          (type_ref _Size))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref advance))
            (decl_ref_expr __first)
            (decl_ref_expr __count))
          (return_stmt
            (decl_ref_expr __first)))))
    (function_template _Destroy_n
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __count
        (type_ref _Size))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Value_type
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref is_destructible)
              (type_ref _Value_type))
            (string_literal "value type is destructible")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref _Destroy_n_aux)
              (type_ref _Value_type))
            (decl_ref_expr __first)
            (decl_ref_expr __count))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/alloc_traits.h
  (namespace std
    (visibility_attr default)
    (struct_decl __allocator_traits_base
      (class_template __rebind
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __replace_first_arg<_Tp, _Up>
          (template_ref __replace_first_arg)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __rebind
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Up)
        (type_alias_decl type
          (type_ref _Tp)
          (type_ref _Tp)
          (type_ref _Up)))
      (cxx_access_spec_decl)
      (type_alias_template_decl __pointer
        (template_type_parameter _Tp)
        (type_alias_decl __pointer
          (type_ref _Tp)))
      (type_alias_template_decl __c_pointer
        (template_type_parameter _Tp)
        (type_alias_decl __c_pointer
          (type_ref _Tp)))
      (type_alias_template_decl __v_pointer
        (template_type_parameter _Tp)
        (type_alias_decl __v_pointer
          (type_ref _Tp)))
      (type_alias_template_decl __cv_pointer
        (template_type_parameter _Tp)
        (type_alias_decl __cv_pointer
          (type_ref _Tp)))
      (type_alias_template_decl __pocca
        (template_type_parameter _Tp)
        (type_alias_decl __pocca
          (type_ref _Tp)))
      (type_alias_template_decl __pocma
        (template_type_parameter _Tp)
        (type_alias_decl __pocma
          (type_ref _Tp)))
      (type_alias_template_decl __pocs
        (template_type_parameter _Tp)
        (type_alias_decl __pocs
          (type_ref _Tp)))
      (type_alias_template_decl __equal
        (template_type_parameter _Tp)
        (type_alias_decl __equal
          (type_ref _Tp))))
    (type_alias_template_decl __alloc_rebind
      (template_type_parameter _Alloc)
      (template_type_parameter _Up)
      (type_alias_decl __alloc_rebind
        (type_ref struct std::__allocator_traits_base)
        (template_ref __rebind)
        (type_ref _Alloc)
        (type_ref _Up)))
    (class_template allocator_traits
      (template_type_parameter _Alloc)
      (cxx_base_specifier struct std::__allocator_traits_base
        (type_ref struct std::__allocator_traits_base))
      (typedef_decl allocator_type
        (type_ref _Alloc))
      (typedef_decl value_type
        (type_ref _Alloc))
      (type_alias_decl pointer
        (template_ref __detected_or_t)
        (type_ref std::allocator_traits::value_type)
        (template_ref __pointer)
        (type_ref _Alloc))
      (cxx_access_spec_decl)
      (class_template _Ptr
        (template_template_parameter _Func
          (template_type_parameter))
        (template_type_parameter _Tp)
        (template_type_parameter)
        (type_alias_decl type
          (template_ref pointer_traits)
          (type_ref std::allocator_traits::pointer)
          (type_ref _Tp)))
      (class_template_partial_specialization _Ptr
        (template_template_parameter _Func
          (template_type_parameter))
        (template_type_parameter _Tp)
        (template_ref _Func)
        (type_ref _Tp)
        (template_ref __void_t)
        (template_ref _Func)
        (type_ref _Alloc)
        (type_alias_decl type
          (template_ref _Func)
          (type_ref _Alloc)))
      (class_template _Diff
        (template_type_parameter _A2)
        (template_type_parameter _PtrT)
        (template_type_parameter)
        (type_alias_decl type
          (template_ref pointer_traits)
          (type_ref _PtrT)))
      (class_template_partial_specialization _Diff
        (template_type_parameter _A2)
        (template_type_parameter _PtrT)
        (type_ref _A2)
        (type_ref _PtrT)
        (template_ref __void_t)
        (type_ref _A2)
        (type_alias_decl type
          (type_ref _A2)))
      (class_template _Size
        (template_type_parameter _A2)
        (template_type_parameter _DiffT)
        (template_type_parameter)
        (cxx_base_specifier make_unsigned<_DiffT>
          (template_ref make_unsigned)
          (type_ref _DiffT)))
      (class_template_partial_specialization _Size
        (template_type_parameter _A2)
        (template_type_parameter _DiffT)
        (type_ref _A2)
        (type_ref _DiffT)
        (template_ref __void_t)
        (type_ref _A2)
        (type_alias_decl type
          (type_ref _A2)))
      (cxx_access_spec_decl)
      (type_alias_decl const_pointer
        (template_ref _Ptr)
        (template_ref __c_pointer)
        (type_ref std::allocator_traits::value_type))
      (type_alias_decl void_pointer
        (template_ref _Ptr)
        (template_ref __v_pointer))
      (type_alias_decl const_void_pointer
        (template_ref _Ptr)
        (template_ref __cv_pointer))
      (type_alias_decl difference_type
        (template_ref _Diff)
        (type_ref _Alloc)
        (type_ref std::allocator_traits::pointer))
      (type_alias_decl size_type
        (template_ref _Size)
        (type_ref _Alloc)
        (type_ref std::allocator_traits::difference_type))
      (type_alias_decl propagate_on_container_copy_assignment
        (template_ref __detected_or_t)
        (type_ref std::false_type)
        (template_ref __pocca)
        (type_ref _Alloc))
      (type_alias_decl propagate_on_container_move_assignment
        (template_ref __detected_or_t)
        (type_ref std::false_type)
        (template_ref __pocma)
        (type_ref _Alloc))
      (type_alias_decl propagate_on_container_swap
        (template_ref __detected_or_t)
        (type_ref std::false_type)
        (template_ref __pocs)
        (type_ref _Alloc))
      (type_alias_decl is_always_equal
        (template_ref __detected_or_t)
        (template_ref is_empty)
        (type_ref _Alloc)
        (template_ref __equal)
        (type_ref _Alloc))
      (type_alias_template_decl rebind_alloc
        (template_type_parameter _Tp)
        (type_alias_decl rebind_alloc
          (template_ref __alloc_rebind)
          (type_ref _Alloc)
          (type_ref _Tp)))
      (type_alias_template_decl rebind_traits
        (template_type_parameter _Tp)
        (type_alias_decl rebind_traits
          (template_ref allocator_traits)
          (template_ref rebind_alloc)
          (type_ref _Tp)))
      (cxx_access_spec_decl)
      (function_template _S_allocate
        (template_type_parameter _Alloc2)
        (parm_decl __a
          (type_ref _Alloc2))
        (parm_decl __n
          (type_ref std::allocator_traits::size_type))
        (parm_decl __hint
          (type_ref std::allocator_traits::const_void_pointer))
        (parm_decl)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __n)
          (decl_ref_expr __hint))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))
              (decl_ref_expr __n)
              (decl_ref_expr __hint)))))
      (function_template _S_allocate
        (template_type_parameter _Alloc2)
        (type_ref std::allocator_traits::pointer)
        (parm_decl __a
          (type_ref _Alloc2))
        (parm_decl __n
          (type_ref std::allocator_traits::size_type))
        (parm_decl
          (type_ref std::allocator_traits::const_void_pointer))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))
              (decl_ref_expr __n)))))
      (class_template __construct_helper
        (template_type_parameter _Tp)
        (template_type_parameter _Args)
        (function_template __test
          (template_type_parameter _Alloc2)
          (template_type_parameter
            (call_expr
              (member_ref_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Alloc2))))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref declval)
                  (type_ref _Tp)))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref declval)
                    (type_ref _Args))))))
          (type_ref std::true_type)
          (parm_decl))
        (function_template __test
          (template_type_parameter)
          (type_ref std::false_type))
        (type_alias_decl type
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __test)
              (type_ref _Alloc))
            (integer_literal 0))))
      (type_alias_template_decl __has_construct
        (template_type_parameter _Tp)
        (template_type_parameter _Args)
        (type_alias_decl __has_construct
          (template_ref __construct_helper)
          (type_ref _Tp)
          (type_ref _Args)))
      (function_template _S_construct
        (template_type_parameter _Tp)
        (template_type_parameter _Args)
        (template_ref _Require)
        (template_ref __has_construct)
        (type_ref _Tp)
        (type_ref _Args)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template _S_construct
        (template_type_parameter _Tp)
        (template_type_parameter _Args)
        (template_ref _Require)
        (template_ref __and_)
        (template_ref __not_)
        (template_ref __has_construct)
        (type_ref _Tp)
        (type_ref _Args)
        (template_ref is_constructible)
        (type_ref _Tp)
        (type_ref _Args)
        (parm_decl
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (cxx_new_expr
            (cstyle_cast_expr
              (decl_ref_expr __p))
            (type_ref _Tp)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template _S_destroy
        (template_type_parameter _Alloc2)
        (template_type_parameter _Tp)
        (parm_decl __a
          (type_ref _Alloc2))
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __p))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p))))
      (function_template _S_destroy
        (template_type_parameter _Alloc2)
        (template_type_parameter _Tp)
        (parm_decl
          (type_ref _Alloc2))
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Destroy))
            (decl_ref_expr __p))))
      (function_template _S_max_size
        (template_type_parameter _Alloc2)
        (parm_decl __a
          (type_ref _Alloc2))
        (parm_decl)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))))))
      (function_template _S_max_size
        (template_type_parameter _Alloc2)
        (type_ref std::allocator_traits::size_type)
        (parm_decl
          (type_ref _Alloc2))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr
                (namespace_ref __gnu_cxx)
                (template_ref __numeric_traits)
                (type_ref std::allocator_traits::size_type))
              (cxx_unary_expr
                (type_ref std::allocator_traits::value_type))))))
      (function_template _S_select
        (template_type_parameter _Alloc2)
        (parm_decl __a
          (type_ref _Alloc2))
        (parm_decl)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))))))
      (function_template _S_select
        (template_type_parameter _Alloc2)
        (type_ref _Alloc2)
        (parm_decl __a
          (type_ref _Alloc2))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __a))))
      (cxx_access_spec_decl)
      (cxx_method allocate
        (type_ref std::allocator_traits::pointer)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __n
          (type_ref std::allocator_traits::size_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))
              (decl_ref_expr __n)))))
      (cxx_method allocate
        (type_ref std::allocator_traits::pointer)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __n
          (type_ref std::allocator_traits::size_type))
        (parm_decl __hint
          (type_ref std::allocator_traits::const_void_pointer))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_allocate))
              (decl_ref_expr __a)
              (decl_ref_expr __n)
              (decl_ref_expr __hint)
              (integer_literal 0)))))
      (cxx_method deallocate
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref std::allocator_traits::pointer))
        (parm_decl __n
          (type_ref std::allocator_traits::size_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p)
            (decl_ref_expr __n))))
      (function_template construct
        (template_type_parameter _Tp)
        (template_type_parameter _Args)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __args
          (type_ref _Args))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _S_construct))
          (decl_ref_expr __a)
          (decl_ref_expr __p)
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args))))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _S_construct))
            (decl_ref_expr __a)
            (decl_ref_expr __p)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template destroy
        (template_type_parameter _Tp)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _S_destroy))
            (decl_ref_expr __a)
            (decl_ref_expr __p)
            (integer_literal 0))))
      (cxx_method max_size
        (type_ref std::allocator_traits::size_type)
        (parm_decl __a
          (type_ref _Alloc))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_max_size))
              (decl_ref_expr __a)
              (integer_literal 0)))))
      (cxx_method select_on_container_copy_construction
        (type_ref _Alloc)
        (parm_decl __rhs
          (type_ref _Alloc))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_select))
              (decl_ref_expr __rhs)
              (integer_literal 0))))))
    (class_template_partial_specialization allocator_traits
      (template_type_parameter _Tp)
      (template_ref allocator)
      (type_ref _Tp)
      (type_alias_decl allocator_type
        (template_ref allocator)
        (type_ref _Tp))
      (type_alias_decl value_type
        (type_ref _Tp))
      (type_alias_decl pointer
        (type_ref _Tp))
      (type_alias_decl const_pointer
        (type_ref _Tp))
      (type_alias_decl void_pointer)
      (type_alias_decl const_void_pointer)
      (type_alias_decl difference_type
        (namespace_ref std)
        (type_ref std::ptrdiff_t))
      (type_alias_decl size_type
        (namespace_ref std)
        (type_ref std::size_t))
      (type_alias_decl propagate_on_container_copy_assignment
        (type_ref std::false_type))
      (type_alias_decl propagate_on_container_move_assignment
        (type_ref std::true_type))
      (type_alias_decl propagate_on_container_swap
        (type_ref std::false_type))
      (type_alias_decl is_always_equal
        (type_ref std::true_type))
      (type_alias_template_decl rebind_alloc
        (template_type_parameter _Up)
        (type_alias_decl rebind_alloc
          (template_ref allocator)
          (type_ref _Up)))
      (type_alias_template_decl rebind_traits
        (template_type_parameter _Up)
        (type_alias_decl rebind_traits
          (template_ref allocator_traits)
          (template_ref allocator)
          (type_ref _Up)))
      (cxx_method allocate
        (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::pointer)
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (parm_decl __n
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::size_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))
              (decl_ref_expr __n)))))
      (cxx_method allocate
        (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::pointer)
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (parm_decl __n
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::size_type))
        (parm_decl __hint
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::const_void_pointer))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))
              (decl_ref_expr __n)
              (decl_ref_expr __hint)))))
      (cxx_method deallocate
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (parm_decl __p
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::pointer))
        (parm_decl __n
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::size_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p)
            (decl_ref_expr __n))))
      (function_template construct
        (template_type_parameter _Up)
        (template_type_parameter _Args)
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (parm_decl __p
          (type_ref _Up))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template destroy
        (template_type_parameter _Up)
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (parm_decl __p
          (type_ref _Up))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __a))
            (decl_ref_expr __p))))
      (cxx_method max_size
        (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::size_type)
        (parm_decl __a
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))))))
      (cxx_method select_on_container_copy_construction
        (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type)
        (parm_decl __rhs
          (type_ref std::allocator_traits<allocator<type-parameter-0-0> >::allocator_type))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __rhs)))))
    (struct_decl allocator_traits
      (template_ref allocator)
      (type_alias_decl allocator_type
        (template_ref allocator))
      (type_alias_decl value_type)
      (type_alias_decl pointer)
      (type_alias_decl const_pointer)
      (type_alias_decl void_pointer)
      (type_alias_decl const_void_pointer)
      (type_alias_decl difference_type
        (namespace_ref std)
        (type_ref std::ptrdiff_t))
      (type_alias_decl size_type
        (namespace_ref std)
        (type_ref std::size_t))
      (type_alias_decl propagate_on_container_copy_assignment
        (type_ref std::false_type))
      (type_alias_decl propagate_on_container_move_assignment
        (type_ref std::true_type))
      (type_alias_decl propagate_on_container_swap
        (type_ref std::false_type))
      (type_alias_decl is_always_equal
        (type_ref std::true_type))
      (type_alias_template_decl rebind_alloc
        (template_type_parameter _Up)
        (type_alias_decl rebind_alloc
          (template_ref allocator)
          (type_ref _Up)))
      (type_alias_template_decl rebind_traits
        (template_type_parameter _Up)
        (type_alias_decl rebind_traits
          (template_ref allocator_traits)
          (template_ref allocator)
          (type_ref _Up)))
      (cxx_method allocate
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type))
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::size_type))
        (parm_decl
          (cxx_null_ptr_literal_expr)))
      (cxx_method deallocate
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type))
        (parm_decl)
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::size_type)))
      (function_template construct
        (template_type_parameter _Up)
        (template_type_parameter _Args)
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type))
        (parm_decl __p
          (type_ref _Up))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Construct))
            (decl_ref_expr __p)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template destroy
        (template_type_parameter _Up)
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type))
        (parm_decl __p
          (type_ref _Up))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Destroy))
            (decl_ref_expr __p))))
      (cxx_method max_size
        (type_ref std::allocator_traits<class std::allocator<void> >::size_type)
        (parm_decl
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type)))
      (cxx_method select_on_container_copy_construction
        (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type)
        (parm_decl __rhs
          (type_ref std::allocator_traits<class std::allocator<void> >::allocator_type))
        (compound_stmt
          (return_stmt
            (call_expr allocator
              (decl_ref_expr __rhs))))))
    (function_template __do_alloc_on_copy
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::true_type))
      (compound_stmt
        (binary_operator
          (decl_ref_expr __one)
          (decl_ref_expr __two))))
    (function_template __do_alloc_on_copy
      (template_type_parameter _Alloc)
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::false_type))
      (compound_stmt))
    (function_template __alloc_on_copy
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (compound_stmt
        (decl_stmt
          (typedef_decl __traits
            (template_ref allocator_traits)
            (type_ref _Alloc)))
        (decl_stmt
          (typedef_decl __pocca
            (type_ref __traits)))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __do_alloc_on_copy))
          (decl_ref_expr __one)
          (decl_ref_expr __two)
          (call_expr
            (type_ref __pocca)))))
    (function_template __alloc_on_copy
      (template_type_parameter _Alloc)
      (type_ref _Alloc)
      (parm_decl __a
        (type_ref _Alloc))
      (compound_stmt
        (decl_stmt
          (typedef_decl __traits
            (template_ref allocator_traits)
            (type_ref _Alloc)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __traits))
            (decl_ref_expr __a)))))
    (function_template __do_alloc_on_move
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::true_type))
      (compound_stmt
        (binary_operator
          (decl_ref_expr __one)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __two)))))
    (function_template __do_alloc_on_move
      (template_type_parameter _Alloc)
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::false_type))
      (compound_stmt))
    (function_template __alloc_on_move
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (compound_stmt
        (decl_stmt
          (typedef_decl __traits
            (template_ref allocator_traits)
            (type_ref _Alloc)))
        (decl_stmt
          (typedef_decl __pocma
            (type_ref __traits)))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __do_alloc_on_move))
          (decl_ref_expr __one)
          (decl_ref_expr __two)
          (call_expr
            (type_ref __pocma)))))
    (function_template __do_alloc_on_swap
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::true_type))
      (compound_stmt
        (decl_stmt
          (using_declaration swap
            (namespace_ref std)
            (overloaded_decl_ref swap)))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref swap))
          (decl_ref_expr __one)
          (decl_ref_expr __two))))
    (function_template __do_alloc_on_swap
      (template_type_parameter _Alloc)
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref _Alloc))
      (parm_decl
        (type_ref std::false_type))
      (compound_stmt))
    (function_template __alloc_on_swap
      (template_type_parameter _Alloc)
      (parm_decl __one
        (type_ref _Alloc))
      (parm_decl __two
        (type_ref _Alloc))
      (compound_stmt
        (decl_stmt
          (typedef_decl __traits
            (template_ref allocator_traits)
            (type_ref _Alloc)))
        (decl_stmt
          (typedef_decl __pocs
            (type_ref __traits)))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __do_alloc_on_swap))
          (decl_ref_expr __one)
          (decl_ref_expr __two)
          (call_expr
            (type_ref __pocs)))))
    (class_template __is_alloc_insertable_impl
      (template_type_parameter _Alloc)
      (template_type_parameter _Tp)
      (template_type_parameter _ValueT
        (template_ref __remove_cvref_t)
        (type_ref _Alloc))
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_alloc_insertable_impl
      (template_type_parameter _Alloc)
      (template_type_parameter _Tp)
      (template_type_parameter _ValueT)
      (type_ref _Alloc)
      (type_ref _Tp)
      (type_ref _ValueT)
      (template_ref __void_t)
      (call_expr
        (decl_ref_expr
          (template_ref allocator_traits)
          (type_ref _Alloc))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref declval)
            (type_ref _Alloc)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref declval)
            (type_ref _ValueT)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref declval)
            (type_ref _Tp))))
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template __is_copy_insertable
      (template_type_parameter _Alloc)
      (cxx_base_specifier __is_alloc_insertable_impl<_Alloc, const typename _Alloc::value_type &>::type
        (template_ref __is_alloc_insertable_impl)
        (type_ref _Alloc)
        (type_ref _Alloc)))
    (class_template_partial_specialization __is_copy_insertable
      (template_type_parameter _Tp)
      (template_ref allocator)
      (type_ref _Tp)
      (cxx_base_specifier is_copy_constructible<_Tp>
        (template_ref is_copy_constructible)
        (type_ref _Tp)))
    (class_template __is_move_insertable
      (template_type_parameter _Alloc)
      (cxx_base_specifier __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
        (template_ref __is_alloc_insertable_impl)
        (type_ref _Alloc)
        (type_ref _Alloc)))
    (class_template_partial_specialization __is_move_insertable
      (template_type_parameter _Tp)
      (template_ref allocator)
      (type_ref _Tp)
      (cxx_base_specifier is_move_constructible<_Tp>
        (template_ref is_move_constructible)
        (type_ref _Tp)))
    (class_template __is_allocator
      (template_type_parameter _Alloc)
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __is_allocator
      (template_type_parameter _Alloc)
      (type_ref _Alloc)
      (template_ref __void_t)
      (type_ref _Alloc)
      (call_expr
        (member_ref_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Alloc))))
        (cxx_functional_cast_expr
          (type_ref std::size_t)
          (init_list_expr)))
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (type_alias_template_decl _RequireAllocator
      (template_type_parameter _Alloc)
      (type_alias_decl _RequireAllocator
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __is_allocator)
          (type_ref _Alloc))
        (type_ref _Alloc)))
    (type_alias_template_decl _RequireNotAllocator
      (template_type_parameter _Alloc)
      (type_alias_decl _RequireNotAllocator
        (template_ref enable_if)
        (unary_operator
          (decl_ref_expr
            (template_ref __is_allocator)
            (type_ref _Alloc)))
        (type_ref _Alloc)))
    (function_template _Destroy
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (for_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (unary_operator
            (decl_ref_expr __first))
          (call_expr
            (decl_ref_expr
              (template_ref allocator_traits)
              (type_ref _Allocator))
            (decl_ref_expr __alloc)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (unary_operator
                (decl_ref_expr __first)))))))
    (function_template _Destroy
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _Destroy))
          (decl_ref_expr __first)
          (decl_ref_expr __last)))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/alloc_traits.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (class_template __alloc_traits
      (template_type_parameter _Alloc)
      (template_type_parameter
        (type_ref _Alloc))
      (cxx_base_specifier std::allocator_traits<_Alloc>
        (namespace_ref std)
        (template_ref allocator_traits)
        (type_ref _Alloc))
      (typedef_decl allocator_type
        (type_ref _Alloc))
      (typedef_decl _Base_type
        (namespace_ref std)
        (template_ref allocator_traits)
        (type_ref _Alloc))
      (typedef_decl value_type
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (typedef_decl pointer
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (typedef_decl const_pointer
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (typedef_decl size_type
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (typedef_decl difference_type
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (typedef_decl reference
        (type_ref __gnu_cxx::__alloc_traits::value_type))
      (typedef_decl const_reference
        (type_ref __gnu_cxx::__alloc_traits::value_type))
      (using_declaration allocate
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (using_declaration deallocate
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (using_declaration construct
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (using_declaration destroy
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (using_declaration max_size
        (type_ref __gnu_cxx::__alloc_traits::_Base_type))
      (cxx_access_spec_decl)
      (type_alias_template_decl __is_custom_pointer
        (template_type_parameter _Ptr)
        (type_alias_decl __is_custom_pointer
          (namespace_ref std)
          (template_ref __and_)
          (namespace_ref std)
          (template_ref is_same)
          (type_ref __gnu_cxx::__alloc_traits::pointer)
          (type_ref _Ptr)
          (namespace_ref std)
          (template_ref __not_)
          (namespace_ref std)
          (template_ref is_pointer)
          (type_ref _Ptr)))
      (cxx_access_spec_decl)
      (function_template construct
        (template_type_parameter _Ptr)
        (template_type_parameter _Args)
        (namespace_ref std)
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref __is_custom_pointer)
          (type_ref _Ptr))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type))
            (decl_ref_expr __a)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __to_address))
              (decl_ref_expr __p))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (function_template destroy
        (template_type_parameter _Ptr)
        (namespace_ref std)
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref __is_custom_pointer)
          (type_ref _Ptr))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Ptr))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type))
            (decl_ref_expr __a)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __to_address))
              (decl_ref_expr __p)))))
      (cxx_method _S_select_on_copy
        (type_ref _Alloc)
        (parm_decl __a
          (type_ref _Alloc))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref __gnu_cxx::__alloc_traits::_Base_type))
              (decl_ref_expr __a)))))
      (cxx_method _S_on_swap
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __b
          (type_ref _Alloc))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __alloc_on_swap))
            (decl_ref_expr __a)
            (decl_ref_expr __b))))
      (cxx_method _S_propagate_on_copy_assign
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type)))))
      (cxx_method _S_propagate_on_move_assign
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type)))))
      (cxx_method _S_propagate_on_swap
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type)))))
      (cxx_method _S_always_equal
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (type_ref __gnu_cxx::__alloc_traits::_Base_type)))))
      (cxx_method _S_nothrow_move
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr _S_propagate_on_move_assign
                (decl_ref_expr _S_propagate_on_move_assign))
              (call_expr _S_always_equal
                (decl_ref_expr _S_always_equal))))))
      (class_template rebind
        (template_type_parameter _Tp)
        (typedef_decl other
          (type_ref __gnu_cxx::__alloc_traits::_Base_type)
          (type_ref _Tp)))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_uninitialized.h
  (namespace std
    (visibility_attr default)
    (class_template __uninitialized_copy
      (template_non_type_parameter _TrivialValueTypes)
      (function_template __uninit_copy
        (template_type_parameter _InputIterator)
        (template_type_parameter _ForwardIterator)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _InputIterator))
        (parm_decl __last
          (type_ref _InputIterator))
        (parm_decl __result
          (type_ref _ForwardIterator))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __result)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __first)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __last))
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __first))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __cur))))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))
                  (unary_operator
                    (decl_ref_expr __first))))
              (return_stmt
                (decl_ref_expr __cur)))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __result)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_copy
      (cxx_bool_literal_expr)
      (function_template __uninit_copy
        (template_type_parameter _InputIterator)
        (template_type_parameter _ForwardIterator)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _InputIterator))
        (parm_decl __last
          (type_ref _InputIterator))
        (parm_decl __result
          (type_ref _ForwardIterator))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref copy))
              (decl_ref_expr __first)
              (decl_ref_expr __last)
              (decl_ref_expr __result))))))
    (function_template uninitialized_copy
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType1
            (template_ref iterator_traits)
            (type_ref _InputIterator)))
        (decl_stmt
          (typedef_decl _ValueType2
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref is_constructible)
              (type_ref _ValueType2)
              (unary_operator
                (decl_ref_expr __first)))
            (string_literal "result type must be constructible from value type of input range")))
        (decl_stmt
          (typedef_decl _RefType1
            (template_ref iterator_traits)
            (type_ref _InputIterator)))
        (decl_stmt
          (typedef_decl _RefType2
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (var_decl __assignable
            (decl_ref_expr
              (template_ref is_assignable)
              (type_ref _RefType2)
              (type_ref _RefType1))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (template_ref __uninitialized_copy)
              (binary_operator
                (binary_operator
                  (type_ref _ValueType1)
                  (type_ref _ValueType2))
                (decl_ref_expr __assignable)))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (class_template __uninitialized_fill
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_fill
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Tp)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __cur)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __last))
                (unary_operator
                  (decl_ref_expr __cur))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))
                  (decl_ref_expr __x))))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_fill
      (cxx_bool_literal_expr)
      (function_template __uninit_fill
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Tp)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref fill))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __x)))))
    (function_template uninitialized_fill
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref is_constructible)
              (type_ref _ValueType)
              (type_ref _Tp))
            (string_literal "result type must be constructible from input type")))
        (decl_stmt
          (var_decl __assignable
            (decl_ref_expr
              (template_ref is_copy_assignable)
              (type_ref _ValueType))))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (template_ref __uninitialized_fill)
            (binary_operator
              (type_ref _ValueType)
              (decl_ref_expr __assignable)))
          (decl_ref_expr __first)
          (decl_ref_expr __last)
          (decl_ref_expr __x))))
    (class_template __uninitialized_fill_n
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_fill_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (template_type_parameter _Tp)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __n)
                  (decl_ref_expr
                    (overloaded_decl_ref operator>))
                  (integer_literal 0))
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __n))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __cur))))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))
                  (decl_ref_expr __x)))
              (return_stmt
                (decl_ref_expr __cur)))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_fill_n
      (cxx_bool_literal_expr)
      (function_template __uninit_fill_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (template_type_parameter _Tp)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref fill_n))
              (decl_ref_expr __first)
              (decl_ref_expr __n)
              (decl_ref_expr __x))))))
    (function_template uninitialized_fill_n
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (template_ref is_constructible)
              (type_ref _ValueType)
              (type_ref _Tp))
            (string_literal "result type must be constructible from input type")))
        (decl_stmt
          (var_decl __can_fill
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_integral)
              (type_ref _Size)
              (template_ref is_copy_assignable)
              (type_ref _ValueType))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __uninitialized_fill_n)
              (binary_operator
                (type_ref _ValueType)
                (decl_ref_expr __can_fill)))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __x)))))
    (function_template __uninitialized_copy_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __result)))
        (cxx_try_stmt
          (compound_stmt
            (decl_stmt
              (typedef_decl __traits
                (namespace_ref __gnu_cxx)
                (template_ref __alloc_traits)
                (type_ref _Allocator)))
            (for_stmt
              (call_expr
                (decl_ref_expr __first)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __last))
              (binary_operator
                (unary_operator
                  (decl_ref_expr __first))
                (cstyle_cast_expr
                  (unary_operator
                    (decl_ref_expr __cur))))
              (call_expr
                (decl_ref_expr
                  (type_ref __traits))
                (decl_ref_expr __alloc)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))
                (unary_operator
                  (decl_ref_expr __first))))
            (return_stmt
              (decl_ref_expr __cur)))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __cur)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_copy_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref uninitialized_copy))
            (decl_ref_expr __first)
            (decl_ref_expr __last)
            (decl_ref_expr __result)))))
    (function_template __uninitialized_move_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __uninitialized_copy_a))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref make_move_iterator))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref make_move_iterator))
              (decl_ref_expr __last))
            (decl_ref_expr __result)
            (decl_ref_expr __alloc)))))
    (function_template __uninitialized_move_if_noexcept_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __uninitialized_copy_a))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __make_move_if_noexcept_iterator))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __make_move_if_noexcept_iterator))
              (decl_ref_expr __last))
            (decl_ref_expr __result)
            (decl_ref_expr __alloc)))))
    (function_template __uninitialized_fill_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_type_parameter _Allocator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __first)))
        (cxx_try_stmt
          (compound_stmt
            (decl_stmt
              (typedef_decl __traits
                (namespace_ref __gnu_cxx)
                (template_ref __alloc_traits)
                (type_ref _Allocator)))
            (for_stmt
              (call_expr
                (decl_ref_expr __cur)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __last))
              (unary_operator
                (decl_ref_expr __cur))
              (call_expr
                (decl_ref_expr
                  (type_ref __traits))
                (decl_ref_expr __alloc)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))
                (decl_ref_expr __x))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __first)
                (decl_ref_expr __cur)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_fill_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_type_parameter _Tp2)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp2))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref uninitialized_fill))
          (decl_ref_expr __first)
          (decl_ref_expr __last)
          (decl_ref_expr __x))))
    (function_template __uninitialized_fill_n_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __first)))
        (cxx_try_stmt
          (compound_stmt
            (decl_stmt
              (typedef_decl __traits
                (namespace_ref __gnu_cxx)
                (template_ref __alloc_traits)
                (type_ref _Allocator)))
            (for_stmt
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (integer_literal 0))
              (binary_operator
                (unary_operator
                  (decl_ref_expr __n))
                (cstyle_cast_expr
                  (unary_operator
                    (decl_ref_expr __cur))))
              (call_expr
                (decl_ref_expr
                  (type_ref __traits))
                (decl_ref_expr __alloc)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))
                (decl_ref_expr __x)))
            (return_stmt
              (decl_ref_expr __cur)))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __first)
                (decl_ref_expr __cur)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_fill_n_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (template_type_parameter _Tp2)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref uninitialized_fill_n))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __x)))))
    (function_template __uninitialized_copy_move
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __last2
        (type_ref _InputIterator2))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __mid
            (type_ref _ForwardIterator)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __uninitialized_copy_a))
              (decl_ref_expr __first1)
              (decl_ref_expr __last1)
              (decl_ref_expr __result)
              (decl_ref_expr __alloc))))
        (cxx_try_stmt
          (compound_stmt
            (return_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __uninitialized_move_a))
                (decl_ref_expr __first2)
                (decl_ref_expr __last2)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_move_copy
      (template_type_parameter _InputIterator1)
      (template_type_parameter _InputIterator2)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first1
        (type_ref _InputIterator1))
      (parm_decl __last1
        (type_ref _InputIterator1))
      (parm_decl __first2
        (type_ref _InputIterator2))
      (parm_decl __last2
        (type_ref _InputIterator2))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __mid
            (type_ref _ForwardIterator)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __uninitialized_move_a))
              (decl_ref_expr __first1)
              (decl_ref_expr __last1)
              (decl_ref_expr __result)
              (decl_ref_expr __alloc))))
        (cxx_try_stmt
          (compound_stmt
            (return_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __uninitialized_copy_a))
                (decl_ref_expr __first2)
                (decl_ref_expr __last2)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_fill_move
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_type_parameter _InputIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __mid
        (type_ref _ForwardIterator))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __uninitialized_fill_a))
          (decl_ref_expr __result)
          (decl_ref_expr __mid)
          (decl_ref_expr __x)
          (decl_ref_expr __alloc))
        (cxx_try_stmt
          (compound_stmt
            (return_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __uninitialized_move_a))
                (decl_ref_expr __first)
                (decl_ref_expr __last)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __mid)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_move_fill
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_type_parameter _Allocator)
      (parm_decl __first1
        (type_ref _InputIterator))
      (parm_decl __last1
        (type_ref _InputIterator))
      (parm_decl __first2
        (type_ref _ForwardIterator))
      (parm_decl __last2
        (type_ref _ForwardIterator))
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __mid2
            (type_ref _ForwardIterator)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __uninitialized_move_a))
              (decl_ref_expr __first1)
              (decl_ref_expr __last1)
              (decl_ref_expr __first2)
              (decl_ref_expr __alloc))))
        (cxx_try_stmt
          (compound_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __uninitialized_fill_a))
              (decl_ref_expr __mid2)
              (decl_ref_expr __last2)
              (decl_ref_expr __x)
              (decl_ref_expr __alloc)))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __first2)
                (decl_ref_expr __mid2)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (class_template __uninitialized_default_1
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_default
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __cur)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __last))
                (unary_operator
                  (decl_ref_expr __cur))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur))))))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_default_1
      (cxx_bool_literal_expr)
      (function_template __uninit_default
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (compound_stmt
          (if_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last))
            (return_stmt))
          (decl_stmt
            (var_decl __val
              (template_ref iterator_traits)
              (type_ref _ForwardIterator)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __addressof))
                (unary_operator
                  (decl_ref_expr __first)))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Construct))
            (decl_ref_expr __val))
          (if_stmt
            (call_expr
              (unary_operator
                (decl_ref_expr __first))
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __last))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref fill))
              (decl_ref_expr __first)
              (decl_ref_expr __last)
              (unary_operator
                (decl_ref_expr __val)))))))
    (class_template __uninitialized_default_n_1
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_default_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __n)
                  (decl_ref_expr
                    (overloaded_decl_ref operator>))
                  (integer_literal 0))
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __n))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __cur))))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))))
              (return_stmt
                (decl_ref_expr __cur)))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_default_n_1
      (cxx_bool_literal_expr)
      (function_template __uninit_default_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (compound_stmt
          (if_stmt
            (call_expr
              (decl_ref_expr __n)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (integer_literal 0))
            (compound_stmt
              (decl_stmt
                (var_decl __val
                  (template_ref iterator_traits)
                  (type_ref _ForwardIterator)
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __first)))))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Construct))
                (decl_ref_expr __val))
              (unary_operator
                (decl_ref_expr __first))
              (binary_operator
                (decl_ref_expr __first)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref fill_n))
                  (decl_ref_expr __first)
                  (call_expr
                    (decl_ref_expr __n)
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (integer_literal 1))
                  (unary_operator
                    (decl_ref_expr __val))))))
          (return_stmt
            (decl_ref_expr __first)))))
    (function_template __uninitialized_default
      (template_type_parameter _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (var_decl __assignable
            (decl_ref_expr
              (template_ref is_copy_assignable)
              (type_ref _ValueType))))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (template_ref __uninitialized_default_1)
            (binary_operator
              (type_ref _ValueType)
              (decl_ref_expr __assignable)))
          (decl_ref_expr __first)
          (decl_ref_expr __last))))
    (function_template __uninitialized_default_n
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (var_decl __can_fill
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_integral)
              (type_ref _Size)
              (template_ref is_copy_assignable)
              (type_ref _ValueType))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __uninitialized_default_n_1)
              (binary_operator
                (type_ref _ValueType)
                (decl_ref_expr __can_fill)))
            (decl_ref_expr __first)
            (decl_ref_expr __n)))))
    (function_template __uninitialized_default_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __first)))
        (cxx_try_stmt
          (compound_stmt
            (decl_stmt
              (typedef_decl __traits
                (namespace_ref __gnu_cxx)
                (template_ref __alloc_traits)
                (type_ref _Allocator)))
            (for_stmt
              (call_expr
                (decl_ref_expr __cur)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (decl_ref_expr __last))
              (unary_operator
                (decl_ref_expr __cur))
              (call_expr
                (decl_ref_expr
                  (type_ref __traits))
                (decl_ref_expr __alloc)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur))))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __first)
                (decl_ref_expr __cur)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_default_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __uninitialized_default))
          (decl_ref_expr __first)
          (decl_ref_expr __last))))
    (function_template __uninitialized_default_n_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __first)))
        (cxx_try_stmt
          (compound_stmt
            (decl_stmt
              (typedef_decl __traits
                (namespace_ref __gnu_cxx)
                (template_ref __alloc_traits)
                (type_ref _Allocator)))
            (for_stmt
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (integer_literal 0))
              (binary_operator
                (unary_operator
                  (decl_ref_expr __n))
                (cstyle_cast_expr
                  (unary_operator
                    (decl_ref_expr __cur))))
              (call_expr
                (decl_ref_expr
                  (type_ref __traits))
                (decl_ref_expr __alloc)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))))
            (return_stmt
              (decl_ref_expr __cur)))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __first)
                (decl_ref_expr __cur)
                (decl_ref_expr __alloc))
              (cxx_throw_expr))))))
    (function_template __uninitialized_default_n_a
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (template_type_parameter _Tp)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl
        (template_ref allocator)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __uninitialized_default_n))
            (decl_ref_expr __first)
            (decl_ref_expr __n)))))
    (class_template __uninitialized_default_novalue_1
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_default_novalue
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __cur)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __last))
                (unary_operator
                  (decl_ref_expr __cur))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct_novalue))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur))))))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_default_novalue_1
      (cxx_bool_literal_expr)
      (function_template __uninit_default_novalue
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __last
          (type_ref _ForwardIterator))
        (compound_stmt)))
    (class_template __uninitialized_default_novalue_n_1
      (template_non_type_parameter _TrivialValueType)
      (function_template __uninit_default_novalue_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (compound_stmt
          (decl_stmt
            (var_decl __cur
              (type_ref _ForwardIterator)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (for_stmt
                (call_expr
                  (decl_ref_expr __n)
                  (decl_ref_expr
                    (overloaded_decl_ref operator>))
                  (integer_literal 0))
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __n))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __cur))))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct_novalue))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))))
              (return_stmt
                (decl_ref_expr __cur)))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_default_novalue_n_1
      (cxx_bool_literal_expr)
      (function_template __uninit_default_novalue_n
        (template_type_parameter _ForwardIterator)
        (template_type_parameter _Size)
        (type_ref _ForwardIterator)
        (parm_decl __first
          (type_ref _ForwardIterator))
        (parm_decl __n
          (type_ref _Size))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref next))
              (decl_ref_expr __first)
              (decl_ref_expr __n))))))
    (function_template __uninitialized_default_novalue
      (template_type_parameter _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __last
        (type_ref _ForwardIterator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (template_ref __uninitialized_default_novalue_1)
            (decl_ref_expr
              (template_ref is_trivially_default_constructible)
              (type_ref _ValueType)))
          (decl_ref_expr __first)
          (decl_ref_expr __last))))
    (function_template __uninitialized_default_novalue_n
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Size)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _ForwardIterator))
      (parm_decl __n
        (type_ref _Size))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __uninitialized_default_novalue_n_1)
              (decl_ref_expr
                (template_ref is_trivially_default_constructible)
                (type_ref _ValueType)))
            (decl_ref_expr __first)
            (decl_ref_expr __n)))))
    (function_template __uninitialized_copy_n
      (template_type_parameter _InputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __result)))
        (cxx_try_stmt
          (compound_stmt
            (for_stmt
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (integer_literal 0))
              (binary_operator
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __n))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __first))))
                (unary_operator
                  (decl_ref_expr __cur)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Construct))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))
                (unary_operator
                  (decl_ref_expr __first))))
            (return_stmt
              (decl_ref_expr __cur)))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __cur))
              (cxx_throw_expr))))))
    (function_template __uninitialized_copy_n
      (template_type_parameter _RandomAccessIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _RandomAccessIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref uninitialized_copy))
            (decl_ref_expr __first)
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (decl_ref_expr __n))
            (decl_ref_expr __result)))))
    (function_template __uninitialized_copy_n_pair
      (template_type_parameter _InputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (template_ref pair)
      (type_ref _InputIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl
        (type_ref struct std::input_iterator_tag))
      (compound_stmt
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __result)))
        (cxx_try_stmt
          (compound_stmt
            (for_stmt
              (call_expr
                (decl_ref_expr __n)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (integer_literal 0))
              (binary_operator
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __n))
                  (cstyle_cast_expr
                    (unary_operator
                      (decl_ref_expr __first))))
                (unary_operator
                  (decl_ref_expr __cur)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Construct))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __cur)))
                (unary_operator
                  (decl_ref_expr __first))))
            (return_stmt
              (init_list_expr
                (decl_ref_expr __first)
                (decl_ref_expr __cur))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Destroy))
                (decl_ref_expr __result)
                (decl_ref_expr __cur))
              (cxx_throw_expr))))))
    (function_template __uninitialized_copy_n_pair
      (template_type_parameter _RandomAccessIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (template_ref pair)
      (type_ref _RandomAccessIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _RandomAccessIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl
        (type_ref struct std::random_access_iterator_tag))
      (compound_stmt
        (decl_stmt
          (var_decl __second_res
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref uninitialized_copy))
              (decl_ref_expr __first)
              (call_expr
                (decl_ref_expr __first)
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr __n))
              (decl_ref_expr __result))))
        (decl_stmt
          (var_decl __first_res
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref next))
              (decl_ref_expr __first)
              (decl_ref_expr __n))))
        (return_stmt
          (init_list_expr
            (decl_ref_expr __first_res)
            (decl_ref_expr __second_res)))))
    (function_template uninitialized_copy_n
      (template_type_parameter _InputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __uninitialized_copy_n))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __result)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __iterator_category))
              (decl_ref_expr __first))))))
    (function_template __uninitialized_copy_n_pair
      (template_type_parameter _InputIterator)
      (template_type_parameter _Size)
      (template_type_parameter _ForwardIterator)
      (template_ref pair)
      (type_ref _InputIterator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __n
        (type_ref _Size))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __uninitialized_copy_n_pair))
            (decl_ref_expr __first)
            (decl_ref_expr __n)
            (decl_ref_expr __result)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __iterator_category))
              (decl_ref_expr __first))))))
    (function_template __relocate_object_a
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_type_parameter _Allocator)
      (parm_decl __dest
        (type_ref _Tp))
      (parm_decl __orig
        (type_ref _Up))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (typedef_decl __traits
            (namespace_ref std)
            (template_ref allocator_traits)
            (type_ref _Allocator)))
        (call_expr
          (decl_ref_expr
            (type_ref __traits))
          (decl_ref_expr __alloc)
          (decl_ref_expr __dest)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (unary_operator
              (decl_ref_expr __orig))))
        (call_expr
          (decl_ref_expr
            (type_ref __traits))
          (decl_ref_expr __alloc)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __addressof))
            (unary_operator
              (decl_ref_expr __orig))))))
    (class_template __is_bitwise_relocatable
      (template_type_parameter _Tp)
      (template_type_parameter)
      (cxx_base_specifier is_trivial<_Tp>
        (template_ref is_trivial)
        (type_ref _Tp)))
    (function_template __relocate_a_1
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_ref __enable_if_t)
      (decl_ref_expr
        (namespace_ref std)
        (template_ref __is_bitwise_relocatable)
        (type_ref _Tp))
      (type_ref _Tp)
      (parm_decl __first
        (type_ref _Tp))
      (parm_decl __last
        (type_ref _Tp))
      (parm_decl __result
        (type_ref _Tp))
      (parm_decl
        (template_ref allocator)
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (var_decl __count
            (type_ref std::ptrdiff_t)
            (call_expr
              (decl_ref_expr __last)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (decl_ref_expr __first))))
        (if_stmt
          (binary_operator
            (decl_ref_expr __count)
            (integer_literal 0))
          (call_expr __builtin_memmove
            (decl_ref_expr __builtin_memmove)
            (decl_ref_expr __result)
            (decl_ref_expr __first)
            (binary_operator
              (decl_ref_expr __count)
              (cxx_unary_expr
                (type_ref _Tp)))))
        (return_stmt
          (call_expr
            (decl_ref_expr __result)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (decl_ref_expr __count)))))
    (function_template __relocate_a_1
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (template_ref iterator_traits)
            (type_ref _InputIterator)))
        (decl_stmt
          (typedef_decl _ValueType2
            (template_ref iterator_traits)
            (type_ref _ForwardIterator)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (namespace_ref std)
              (template_ref is_same)
              (type_ref _ValueType)
              (type_ref _ValueType2))
            (string_literal "relocation is only possible for values of the same type")))
        (decl_stmt
          (var_decl __cur
            (type_ref _ForwardIterator)
            (decl_ref_expr __result)))
        (for_stmt
          (call_expr
            (decl_ref_expr __first)
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (decl_ref_expr __last))
          (binary_operator
            (unary_operator
              (decl_ref_expr __first))
            (cstyle_cast_expr
              (unary_operator
                (decl_ref_expr __cur))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __relocate_object_a))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (unary_operator
                (decl_ref_expr __cur)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (unary_operator
                (decl_ref_expr __first)))
            (decl_ref_expr __alloc)))
        (return_stmt
          (decl_ref_expr __cur))))
    (function_template __relocate_a
      (template_type_parameter _InputIterator)
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Allocator)
      (type_ref _ForwardIterator)
      (parm_decl __first
        (type_ref _InputIterator))
      (parm_decl __last
        (type_ref _InputIterator))
      (parm_decl __result
        (type_ref _ForwardIterator))
      (parm_decl __alloc
        (type_ref _Allocator))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __relocate_a_1))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __first))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __last))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __niter_base))
              (decl_ref_expr __result))
            (decl_ref_expr __alloc))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_tempbuf.h
  (namespace std
    (visibility_attr default)
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_tempbuf.h
    (namespace __detail
      (function_template __return_temporary_buffer
        (template_type_parameter _Tp)
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __len
          (type_ref std::size_t))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref operator delete))
            (decl_ref_expr __p)))))
    (function_template get_temporary_buffer
      (template_type_parameter _Tp)
      (template_ref pair)
      (type_ref _Tp)
      (type_ref std::ptrdiff_t)
      (parm_decl __len
        (type_ref std::ptrdiff_t))
      (compound_stmt
        (decl_stmt
          (var_decl __max
            (type_ref std::ptrdiff_t)
            (binary_operator
              (decl_ref_expr __max
                (namespace_ref __gnu_cxx)
                (template_ref __numeric_traits)
                (type_ref std::ptrdiff_t))
              (cxx_unary_expr
                (type_ref _Tp)))))
        (if_stmt
          (binary_operator
            (decl_ref_expr __len)
            (decl_ref_expr __max))
          (binary_operator
            (decl_ref_expr __len)
            (decl_ref_expr __max)))
        (while_stmt
          (binary_operator
            (decl_ref_expr __len)
            (integer_literal 0))
          (compound_stmt
            (decl_stmt
              (var_decl __tmp
                (type_ref _Tp)
                (cxx_static_cast_expr
                  (type_ref _Tp)
                  (call_expr operator new
                    (decl_ref_expr operator new)
                    (binary_operator
                      (decl_ref_expr __len)
                      (cxx_unary_expr
                        (type_ref _Tp)))
                    (decl_ref_expr nothrow
                      (namespace_ref std))))))
            (if_stmt
              (call_expr
                (decl_ref_expr __tmp)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (integer_literal 0))
              (return_stmt
                (call_expr
                  (namespace_ref std)
                  (template_ref pair)
                  (type_ref _Tp)
                  (type_ref std::ptrdiff_t)
                  (decl_ref_expr __tmp)
                  (decl_ref_expr __len))))
            (binary_operator
              (decl_ref_expr __len)
              (conditional_operator
                (binary_operator
                  (decl_ref_expr __len)
                  (integer_literal 1))
                (integer_literal 0)
                (paren_expr
                  (binary_operator
                    (paren_expr
                      (binary_operator
                        (decl_ref_expr __len)
                        (integer_literal 1)))
                    (integer_literal 2)))))))
        (return_stmt
          (call_expr
            (namespace_ref std)
            (template_ref pair)
            (type_ref _Tp)
            (type_ref std::ptrdiff_t)
            (cxx_static_cast_expr
              (type_ref _Tp)
              (integer_literal 0))
            (integer_literal 0)))))
    (function_template return_temporary_buffer
      (template_type_parameter _Tp)
      (parm_decl __p
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref operator delete))
          (decl_ref_expr __p))))
    (class_template _Temporary_buffer
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl pointer
        (type_ref std::_Temporary_buffer::value_type))
      (typedef_decl iterator
        (type_ref std::_Temporary_buffer::pointer))
      (typedef_decl size_type
        (type_ref std::ptrdiff_t))
      (cxx_access_spec_decl)
      (field_decl _M_original_len
        (type_ref std::_Temporary_buffer::size_type))
      (field_decl _M_len
        (type_ref std::_Temporary_buffer::size_type))
      (field_decl _M_buffer
        (type_ref std::_Temporary_buffer::pointer))
      (cxx_access_spec_decl)
      (cxx_method size
        (type_ref std::_Temporary_buffer::size_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_len))))
      (cxx_method requested_size
        (type_ref std::_Temporary_buffer::size_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_original_len))))
      (cxx_method begin
        (type_ref std::_Temporary_buffer::iterator)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_buffer))))
      (cxx_method end
        (type_ref std::_Temporary_buffer::iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr _M_buffer)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (member_ref_expr _M_len)))))
      (constructor _Temporary_buffer<_ForwardIterator, _Tp>
        (parm_decl __seed
          (type_ref _ForwardIterator))
        (parm_decl __original_len
          (type_ref std::_Temporary_buffer::size_type)))
      (destructor ~_Temporary_buffer<_ForwardIterator, _Tp>
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Destroy))
            (member_ref_expr _M_buffer)
            (call_expr
              (member_ref_expr _M_buffer)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (member_ref_expr _M_len)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (namespace_ref __detail)
              (overloaded_decl_ref __return_temporary_buffer))
            (member_ref_expr _M_buffer)
            (member_ref_expr _M_len))))
      (cxx_access_spec_decl)
      (constructor _Temporary_buffer<_ForwardIterator, _Tp>
        (parm_decl
          (type_ref _Temporary_buffer<_ForwardIterator, _Tp>)))
      (cxx_method operator=
        (parm_decl
          (type_ref _Temporary_buffer<_ForwardIterator, _Tp>))))
    (class_template __uninitialized_construct_buf_dispatch
      (template_non_type_parameter)
      (function_template __ucr
        (template_type_parameter _Pointer)
        (template_type_parameter _ForwardIterator)
        (parm_decl __first
          (type_ref _Pointer))
        (parm_decl __last
          (type_ref _Pointer))
        (parm_decl __seed
          (type_ref _ForwardIterator))
        (compound_stmt
          (if_stmt
            (call_expr
              (decl_ref_expr __first)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __last))
            (return_stmt))
          (decl_stmt
            (var_decl __cur
              (type_ref _Pointer)
              (decl_ref_expr __first)))
          (cxx_try_stmt
            (compound_stmt
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref _Construct))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __addressof))
                  (unary_operator
                    (decl_ref_expr __first)))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (unary_operator
                    (decl_ref_expr __seed))))
              (decl_stmt
                (var_decl __prev
                  (type_ref _Pointer)
                  (decl_ref_expr __cur)))
              (unary_operator
                (decl_ref_expr __cur))
              (for_stmt
                (call_expr
                  (decl_ref_expr __cur)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (decl_ref_expr __last))
                (binary_operator
                  (unary_operator
                    (decl_ref_expr __cur))
                  (unary_operator
                    (decl_ref_expr __prev)))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Construct))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __addressof))
                    (unary_operator
                      (decl_ref_expr __cur)))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref move))
                    (unary_operator
                      (decl_ref_expr __prev)))))
              (binary_operator
                (unary_operator
                  (decl_ref_expr __seed))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (unary_operator
                    (decl_ref_expr __prev)))))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref _Destroy))
                  (decl_ref_expr __first)
                  (decl_ref_expr __cur))
                (cxx_throw_expr)))))))
    (struct_decl __uninitialized_construct_buf_dispatch
      (cxx_bool_literal_expr)
      (function_template __ucr
        (template_type_parameter _Pointer)
        (template_type_parameter _ForwardIterator)
        (parm_decl
          (type_ref _Pointer))
        (parm_decl
          (type_ref _Pointer))
        (parm_decl
          (type_ref _ForwardIterator))
        (compound_stmt)))
    (function_template __uninitialized_construct_buf
      (template_type_parameter _Pointer)
      (template_type_parameter _ForwardIterator)
      (parm_decl __first
        (type_ref _Pointer))
      (parm_decl __last
        (type_ref _Pointer))
      (parm_decl __seed
        (type_ref _ForwardIterator))
      (compound_stmt
        (decl_stmt
          (typedef_decl _ValueType
            (namespace_ref std)
            (template_ref iterator_traits)
            (type_ref _Pointer)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (template_ref __uninitialized_construct_buf_dispatch)
            (type_ref _ValueType))
          (decl_ref_expr __first)
          (decl_ref_expr __last)
          (decl_ref_expr __seed))))
    (constructor _Temporary_buffer<_ForwardIterator, _Tp>
      (template_type_parameter _ForwardIterator)
      (template_type_parameter _Tp)
      (template_ref _Temporary_buffer)
      (type_ref _ForwardIterator)
      (type_ref _Tp)
      (parm_decl __seed
        (type_ref _ForwardIterator))
      (parm_decl __original_len
        (type_ref std::_Temporary_buffer::size_type))
      (member_ref _M_original_len)
      (decl_ref_expr __original_len)
      (member_ref _M_len)
      (integer_literal 0)
      (member_ref _M_buffer)
      (integer_literal 0)
      (compound_stmt
        (decl_stmt
          (var_decl __p
            (namespace_ref std)
            (template_ref pair)
            (type_ref std::_Temporary_buffer::pointer)
            (type_ref std::_Temporary_buffer::size_type)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get_temporary_buffer)
                (type_ref std::_Temporary_buffer::value_type))
              (member_ref_expr _M_original_len))))
        (if_stmt
          (member_ref_expr
            (decl_ref_expr __p))
          (compound_stmt
            (cxx_try_stmt
              (compound_stmt
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __uninitialized_construct_buf))
                  (member_ref_expr
                    (decl_ref_expr __p))
                  (call_expr
                    (member_ref_expr
                      (decl_ref_expr __p))
                    (decl_ref_expr
                      (overloaded_decl_ref operator+))
                    (member_ref_expr
                      (decl_ref_expr __p)))
                  (decl_ref_expr __seed))
                (binary_operator
                  (member_ref_expr _M_buffer)
                  (member_ref_expr
                    (decl_ref_expr __p)))
                (binary_operator
                  (member_ref_expr _M_len)
                  (member_ref_expr
                    (decl_ref_expr __p))))
              (cxx_catch_stmt
                (compound_stmt
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (namespace_ref __detail)
                      (overloaded_decl_ref __return_temporary_buffer))
                    (member_ref_expr
                      (decl_ref_expr __p))
                    (member_ref_expr
                      (decl_ref_expr __p)))
                  (cxx_throw_expr)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_raw_storage_iter.h
  (namespace std
    (visibility_attr default)
    (class_template raw_storage_iterator
      (template_type_parameter _OutputIterator)
      (template_type_parameter _Tp)
      (cxx_base_specifier iterator<struct std::output_iterator_tag, void, void, void, void>
        (template_ref iterator)
        (type_ref struct std::output_iterator_tag))
      (cxx_access_spec_decl)
      (field_decl _M_iter
        (type_ref _OutputIterator))
      (cxx_access_spec_decl)
      (constructor raw_storage_iterator<_OutputIterator, _Tp>
        (parm_decl __x
          (type_ref _OutputIterator))
        (member_ref _M_iter)
        (decl_ref_expr __x)
        (compound_stmt))
      (cxx_method operator*
        (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
        (parm_decl __element
          (type_ref _Tp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Construct))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (unary_operator
                (member_ref_expr _M_iter)))
            (decl_ref_expr __element))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
        (parm_decl __element
          (type_ref _Tp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref _Construct))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (unary_operator
                (member_ref_expr _M_iter)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __element)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
        (compound_stmt
          (unary_operator
            (member_ref_expr _M_iter))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator++
        (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
        (parm_decl)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref raw_storage_iterator<_OutputIterator, _Tp>)
              (unary_operator
                (cxx_this_expr))))
          (unary_operator
            (member_ref_expr _M_iter))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method base
        (type_ref _OutputIterator)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_iter))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bit
  (namespace std
    (visibility_attr default)
    (function_template __rotl
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __s)
      (compound_stmt
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (namespace_ref __gnu_cxx)
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (call_expr
            (paren_expr
              (binary_operator
                (decl_ref_expr _Nd)
                (paren_expr
                  (call_expr
                    (decl_ref_expr _Nd)
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (integer_literal 1)))))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 0))
          (compound_stmt
            (decl_stmt
              (var_decl __uNd
                (decl_ref_expr _Nd)))
            (decl_stmt
              (var_decl __r
                (decl_ref_expr __s)))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (decl_ref_expr __r)
                        (decl_ref_expr __uNd)))))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (unary_operator
                            (decl_ref_expr __r)))
                        (decl_ref_expr __uNd)))))))))
        (decl_stmt
          (var_decl __r
            (binary_operator
              (decl_ref_expr __s)
              (decl_ref_expr _Nd))))
        (if_stmt
          (binary_operator
            (decl_ref_expr __r)
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr __x))
          (if_stmt
            (binary_operator
              (decl_ref_expr __r)
              (integer_literal 0))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (decl_ref_expr __r)))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (call_expr
                            (decl_ref_expr _Nd)
                            (decl_ref_expr
                              (overloaded_decl_ref operator-))
                            (decl_ref_expr __r)))
                        (decl_ref_expr _Nd)))))))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (unary_operator
                      (decl_ref_expr __r))))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (call_expr
                            (decl_ref_expr _Nd)
                            (decl_ref_expr
                              (overloaded_decl_ref operator+))
                            (decl_ref_expr __r)))
                        (decl_ref_expr _Nd)))))))))))
    (function_template __rotr
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (parm_decl __s)
      (compound_stmt
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (namespace_ref __gnu_cxx)
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (call_expr
            (paren_expr
              (binary_operator
                (decl_ref_expr _Nd)
                (paren_expr
                  (call_expr
                    (decl_ref_expr _Nd)
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (integer_literal 1)))))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 0))
          (compound_stmt
            (decl_stmt
              (var_decl __uNd
                (decl_ref_expr _Nd)))
            (decl_stmt
              (var_decl __r
                (decl_ref_expr __s)))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (decl_ref_expr __r)
                        (decl_ref_expr __uNd)))))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (unary_operator
                            (decl_ref_expr __r)))
                        (decl_ref_expr __uNd)))))))))
        (decl_stmt
          (var_decl __r
            (binary_operator
              (decl_ref_expr __s)
              (decl_ref_expr _Nd))))
        (if_stmt
          (binary_operator
            (decl_ref_expr __r)
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr __x))
          (if_stmt
            (binary_operator
              (decl_ref_expr __r)
              (integer_literal 0))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (decl_ref_expr __r)))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (call_expr
                            (decl_ref_expr _Nd)
                            (decl_ref_expr
                              (overloaded_decl_ref operator-))
                            (decl_ref_expr __r)))
                        (decl_ref_expr _Nd)))))))
            (return_stmt
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (unary_operator
                      (decl_ref_expr __r))))
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __x)
                    (paren_expr
                      (binary_operator
                        (paren_expr
                          (call_expr
                            (decl_ref_expr _Nd)
                            (decl_ref_expr
                              (overloaded_decl_ref operator+))
                            (decl_ref_expr __r)))
                        (decl_ref_expr _Nd)))))))))))
    (function_template __countl_zero
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (using_declaration __int_traits
            (namespace_ref __gnu_cxx)
            (overloaded_decl_ref __int_traits)))
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (call_expr
            (decl_ref_expr __x)
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr _Nd)))
        (decl_stmt
          (var_decl _Nd_ull
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_ul
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_u
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (if_stmt
          (call_expr
            (decl_ref_expr _Nd)
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (decl_ref_expr _Nd_u))
          (compound_stmt
            (decl_stmt
              (var_decl __diff
                (call_expr
                  (decl_ref_expr _Nd_u)
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr _Nd))))
            (return_stmt
              (call_expr
                (call_expr __builtin_clz
                  (decl_ref_expr __builtin_clz)
                  (decl_ref_expr __x))
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (decl_ref_expr __diff))))
          (if_stmt
            (call_expr
              (decl_ref_expr _Nd)
              (decl_ref_expr
                (overloaded_decl_ref operator<=))
              (decl_ref_expr _Nd_ul))
            (compound_stmt
              (decl_stmt
                (var_decl __diff
                  (call_expr
                    (decl_ref_expr _Nd_ul)
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (decl_ref_expr _Nd))))
              (return_stmt
                (call_expr
                  (call_expr __builtin_clzl
                    (decl_ref_expr __builtin_clzl)
                    (decl_ref_expr __x))
                  (decl_ref_expr
                    (overloaded_decl_ref operator-))
                  (decl_ref_expr __diff))))
            (if_stmt
              (call_expr
                (decl_ref_expr _Nd)
                (decl_ref_expr
                  (overloaded_decl_ref operator<=))
                (decl_ref_expr _Nd_ull))
              (compound_stmt
                (decl_stmt
                  (var_decl __diff
                    (call_expr
                      (decl_ref_expr _Nd_ull)
                      (decl_ref_expr
                        (overloaded_decl_ref operator-))
                      (decl_ref_expr _Nd))))
                (return_stmt
                  (call_expr
                    (call_expr __builtin_clzll
                      (decl_ref_expr __builtin_clzll)
                      (decl_ref_expr __x))
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (decl_ref_expr __diff))))
              (compound_stmt
                (decl_stmt
                  (static_assert
                    (call_expr
                      (decl_ref_expr _Nd)
                      (decl_ref_expr
                        (overloaded_decl_ref operator<=))
                      (paren_expr
                        (binary_operator
                          (integer_literal 2)
                          (decl_ref_expr _Nd_ull))))
                    (string_literal "Maximum supported integer size is 128-bit")))
                (decl_stmt
                  (var_decl __high
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr _Nd_ull))))
                (if_stmt
                  (binary_operator
                    (decl_ref_expr __high)
                    (integer_literal 0))
                  (compound_stmt
                    (decl_stmt
                      (var_decl __diff
                        (call_expr
                          (paren_expr
                            (binary_operator
                              (integer_literal 2)
                              (decl_ref_expr _Nd_ull)))
                          (decl_ref_expr
                            (overloaded_decl_ref operator-))
                          (decl_ref_expr _Nd))))
                    (return_stmt
                      (binary_operator
                        (call_expr __builtin_clzll
                          (decl_ref_expr __builtin_clzll)
                          (decl_ref_expr __high))
                        (decl_ref_expr __diff)))))
                (decl_stmt
                  (var_decl __max_ull
                    (decl_ref_expr __max
                      (template_ref __int_traits))))
                (decl_stmt
                  (var_decl __low
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr __max_ull))))
                (return_stmt
                  (call_expr
                    (paren_expr
                      (call_expr
                        (decl_ref_expr _Nd)
                        (decl_ref_expr
                          (overloaded_decl_ref operator-))
                        (decl_ref_expr _Nd_ull)))
                    (decl_ref_expr
                      (overloaded_decl_ref operator+))
                    (call_expr __builtin_clzll
                      (decl_ref_expr __builtin_clzll)
                      (decl_ref_expr __low))))))))))
    (function_template __countl_one
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __countl_zero)
              (type_ref _Tp))
            (cstyle_cast_expr
              (type_ref _Tp)
              (unary_operator
                (decl_ref_expr __x)))))))
    (function_template __countr_zero
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (using_declaration __int_traits
            (namespace_ref __gnu_cxx)
            (overloaded_decl_ref __int_traits)))
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (call_expr
            (decl_ref_expr __x)
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr _Nd)))
        (decl_stmt
          (var_decl _Nd_ull
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_ul
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_u
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (if_stmt
          (call_expr
            (decl_ref_expr _Nd)
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (decl_ref_expr _Nd_u))
          (return_stmt
            (call_expr __builtin_ctz
              (decl_ref_expr __builtin_ctz)
              (decl_ref_expr __x)))
          (if_stmt
            (call_expr
              (decl_ref_expr _Nd)
              (decl_ref_expr
                (overloaded_decl_ref operator<=))
              (decl_ref_expr _Nd_ul))
            (return_stmt
              (call_expr __builtin_ctzl
                (decl_ref_expr __builtin_ctzl)
                (decl_ref_expr __x)))
            (if_stmt
              (call_expr
                (decl_ref_expr _Nd)
                (decl_ref_expr
                  (overloaded_decl_ref operator<=))
                (decl_ref_expr _Nd_ull))
              (return_stmt
                (call_expr __builtin_ctzll
                  (decl_ref_expr __builtin_ctzll)
                  (decl_ref_expr __x)))
              (compound_stmt
                (decl_stmt
                  (static_assert
                    (call_expr
                      (decl_ref_expr _Nd)
                      (decl_ref_expr
                        (overloaded_decl_ref operator<=))
                      (paren_expr
                        (binary_operator
                          (integer_literal 2)
                          (decl_ref_expr _Nd_ull))))
                    (string_literal "Maximum supported integer size is 128-bit")))
                (decl_stmt
                  (var_decl __max_ull
                    (decl_ref_expr __max
                      (template_ref __int_traits))))
                (decl_stmt
                  (var_decl __low
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr __max_ull))))
                (if_stmt
                  (binary_operator
                    (decl_ref_expr __low)
                    (integer_literal 0))
                  (return_stmt
                    (call_expr __builtin_ctzll
                      (decl_ref_expr __builtin_ctzll)
                      (decl_ref_expr __low))))
                (decl_stmt
                  (var_decl __high
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr _Nd_ull))))
                (return_stmt
                  (binary_operator
                    (call_expr __builtin_ctzll
                      (decl_ref_expr __builtin_ctzll)
                      (decl_ref_expr __high))
                    (decl_ref_expr _Nd_ull)))))))))
    (function_template __countr_one
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __countr_zero))
            (cstyle_cast_expr
              (type_ref _Tp)
              (unary_operator
                (decl_ref_expr __x)))))))
    (function_template __popcount
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (using_declaration __int_traits
            (namespace_ref __gnu_cxx)
            (overloaded_decl_ref __int_traits)))
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (template_ref __int_traits)
              (type_ref _Tp))))
        (decl_stmt
          (var_decl _Nd_ull
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_ul
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (decl_stmt
          (var_decl _Nd_u
            (decl_ref_expr __digits
              (template_ref __int_traits))))
        (if_stmt
          (call_expr
            (decl_ref_expr _Nd)
            (decl_ref_expr
              (overloaded_decl_ref operator<=))
            (decl_ref_expr _Nd_u))
          (return_stmt
            (call_expr __builtin_popcount
              (decl_ref_expr __builtin_popcount)
              (decl_ref_expr __x)))
          (if_stmt
            (call_expr
              (decl_ref_expr _Nd)
              (decl_ref_expr
                (overloaded_decl_ref operator<=))
              (decl_ref_expr _Nd_ul))
            (return_stmt
              (call_expr __builtin_popcountl
                (decl_ref_expr __builtin_popcountl)
                (decl_ref_expr __x)))
            (if_stmt
              (call_expr
                (decl_ref_expr _Nd)
                (decl_ref_expr
                  (overloaded_decl_ref operator<=))
                (decl_ref_expr _Nd_ull))
              (return_stmt
                (call_expr __builtin_popcountll
                  (decl_ref_expr __builtin_popcountll)
                  (decl_ref_expr __x)))
              (compound_stmt
                (decl_stmt
                  (static_assert
                    (call_expr
                      (decl_ref_expr _Nd)
                      (decl_ref_expr
                        (overloaded_decl_ref operator<=))
                      (paren_expr
                        (binary_operator
                          (integer_literal 2)
                          (decl_ref_expr _Nd_ull))))
                    (string_literal "Maximum supported integer size is 128-bit")))
                (decl_stmt
                  (var_decl __max_ull
                    (decl_ref_expr __max
                      (template_ref __int_traits))))
                (decl_stmt
                  (var_decl __low
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr __max_ull))))
                (decl_stmt
                  (var_decl __high
                    (binary_operator
                      (decl_ref_expr __x)
                      (decl_ref_expr _Nd_ull))))
                (return_stmt
                  (binary_operator
                    (call_expr __builtin_popcountll
                      (decl_ref_expr __builtin_popcountll)
                      (decl_ref_expr __low))
                    (call_expr __builtin_popcountll
                      (decl_ref_expr __builtin_popcountll)
                      (decl_ref_expr __high))))))))))
    (function_template __has_single_bit
      (template_type_parameter _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __popcount))
              (decl_ref_expr __x))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 1)))))
    (function_template __bit_ceil
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (using_declaration __int_traits
            (namespace_ref __gnu_cxx)
            (overloaded_decl_ref __int_traits)))
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 0))
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 1)))
          (return_stmt
            (integer_literal 1)))
        (decl_stmt
          (var_decl __shift_exponent
            (call_expr
              (decl_ref_expr _Nd)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __countl_zero))
                (cstyle_cast_expr
                  (type_ref _Tp)
                  (paren_expr
                    (call_expr
                      (decl_ref_expr __x)
                      (decl_ref_expr
                        (overloaded_decl_ref operator-))
                      (integer_literal 1u))))))))
        (if_stmt
          (unary_operator
            (call_expr __builtin_is_constant_evaluated
              (decl_ref_expr __builtin_is_constant_evaluated)))
          (compound_stmt
            (do_stmt
              (compound_stmt
                (if_stmt
                  (binary_operator
                    (call_expr __builtin_is_constant_evaluated
                      (decl_ref_expr __builtin_is_constant_evaluated))
                    (unary_operator
                      (call_expr
                        (call_expr
                          (decl_ref_expr __shift_exponent)
                          (decl_ref_expr
                            (overloaded_decl_ref operator!=))
                          (decl_ref_expr
                            (template_ref __int_traits)
                            (type_ref _Tp))))))
                  (call_expr __builtin_unreachable
                    (decl_ref_expr __builtin_unreachable))))
              (cxx_bool_literal_expr))))
        (decl_stmt
          (type_alias_decl __promoted_type
            (binary_operator
              (decl_ref_expr __x)
              (integer_literal 1))))
        (if_stmt
          (unary_operator
            (decl_ref_expr
              (template_ref is_same)
              (type_ref __promoted_type)
              (type_ref _Tp)))
          (compound_stmt
            (decl_stmt
              (var_decl __extra_exp
                (binary_operator
                  (binary_operator
                    (cxx_unary_expr
                      (type_ref __promoted_type))
                    (cxx_unary_expr
                      (type_ref _Tp)))
                  (integer_literal 2))))
            (compound_assignment_operator
              (decl_ref_expr __shift_exponent)
              (binary_operator
                (paren_expr
                  (binary_operator
                    (decl_ref_expr __shift_exponent)
                    (decl_ref_expr _Nd)))
                (decl_ref_expr __extra_exp)))))
        (return_stmt
          (binary_operator
            (cstyle_cast_expr
              (type_ref _Tp)
              (integer_literal 1u))
            (decl_ref_expr __shift_exponent)))))
    (function_template __bit_floor
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (namespace_ref __gnu_cxx)
              (template_ref __int_traits)
              (type_ref _Tp))))
        (if_stmt
          (call_expr
            (decl_ref_expr __x)
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (integer_literal 0))
          (return_stmt
            (integer_literal 0)))
        (return_stmt
          (binary_operator
            (cstyle_cast_expr
              (type_ref _Tp)
              (integer_literal 1u))
            (paren_expr
              (call_expr
                (decl_ref_expr _Nd)
                (decl_ref_expr
                  (overloaded_decl_ref operator-))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref __countl_zero))
                  (cstyle_cast_expr
                    (type_ref _Tp)
                    (paren_expr
                      (binary_operator
                        (decl_ref_expr __x)
                        (integer_literal 1)))))))))))
    (function_template __bit_width
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl _Nd
            (decl_ref_expr
              (namespace_ref __gnu_cxx)
              (template_ref __int_traits)
              (type_ref _Tp))))
        (return_stmt
          (call_expr
            (decl_ref_expr _Nd)
            (decl_ref_expr
              (overloaded_decl_ref operator-))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __countl_zero))
              (decl_ref_expr __x)))))))
  (typedef_decl __u_char)
  (typedef_decl __u_short)
  (typedef_decl __u_int)
  (typedef_decl __u_long)
  (typedef_decl __int8_t)
  (typedef_decl __uint8_t)
  (typedef_decl __int16_t)
  (typedef_decl __uint16_t)
  (typedef_decl __int32_t)
  (typedef_decl __uint32_t)
  (typedef_decl __int64_t)
  (typedef_decl __uint64_t)
  (typedef_decl __int_least8_t
    (type_ref __int8_t))
  (typedef_decl __uint_least8_t
    (type_ref __uint8_t))
  (typedef_decl __int_least16_t
    (type_ref __int16_t))
  (typedef_decl __uint_least16_t
    (type_ref __uint16_t))
  (typedef_decl __int_least32_t
    (type_ref __int32_t))
  (typedef_decl __uint_least32_t
    (type_ref __uint32_t))
  (typedef_decl __int_least64_t
    (type_ref __int64_t))
  (typedef_decl __uint_least64_t
    (type_ref __uint64_t))
  (typedef_decl __quad_t)
  (typedef_decl __u_quad_t)
  (typedef_decl __intmax_t)
  (typedef_decl __uintmax_t)
  (typedef_decl __dev_t)
  (typedef_decl __uid_t)
  (typedef_decl __gid_t)
  (typedef_decl __ino_t)
  (typedef_decl __ino64_t)
  (typedef_decl __mode_t)
  (typedef_decl __nlink_t)
  (typedef_decl __off_t)
  (typedef_decl __off64_t)
  (typedef_decl __pid_t)
  (struct_decl
    (field_decl __val
      (integer_literal)))
  (typedef_decl __fsid_t
    (struct_decl
      (field_decl __val
        (integer_literal))))
  (typedef_decl __clock_t)
  (typedef_decl __rlim_t)
  (typedef_decl __rlim64_t)
  (typedef_decl __id_t)
  (typedef_decl __time_t)
  (typedef_decl __useconds_t)
  (typedef_decl __suseconds_t)
  (typedef_decl __suseconds64_t)
  (typedef_decl __daddr_t)
  (typedef_decl __key_t)
  (typedef_decl __clockid_t)
  (typedef_decl __timer_t)
  (typedef_decl __blksize_t)
  (typedef_decl __blkcnt_t)
  (typedef_decl __blkcnt64_t)
  (typedef_decl __fsblkcnt_t)
  (typedef_decl __fsblkcnt64_t)
  (typedef_decl __fsfilcnt_t)
  (typedef_decl __fsfilcnt64_t)
  (typedef_decl __fsword_t)
  (typedef_decl __ssize_t)
  (typedef_decl __syscall_slong_t)
  (typedef_decl __syscall_ulong_t)
  (typedef_decl __loff_t
    (type_ref __off64_t))
  (typedef_decl __caddr_t)
  (typedef_decl __intptr_t)
  (typedef_decl __socklen_t)
  (typedef_decl __sig_atomic_t)
  (typedef_decl int8_t
    (type_ref __int8_t))
  (typedef_decl int16_t
    (type_ref __int16_t))
  (typedef_decl int32_t
    (type_ref __int32_t))
  (typedef_decl int64_t
    (type_ref __int64_t))
  (typedef_decl uint8_t
    (type_ref __uint8_t))
  (typedef_decl uint16_t
    (type_ref __uint16_t))
  (typedef_decl uint32_t
    (type_ref __uint32_t))
  (typedef_decl uint64_t
    (type_ref __uint64_t))
  (typedef_decl int_least8_t
    (type_ref __int_least8_t))
  (typedef_decl int_least16_t
    (type_ref __int_least16_t))
  (typedef_decl int_least32_t
    (type_ref __int_least32_t))
  (typedef_decl int_least64_t
    (type_ref __int_least64_t))
  (typedef_decl uint_least8_t
    (type_ref __uint_least8_t))
  (typedef_decl uint_least16_t
    (type_ref __uint_least16_t))
  (typedef_decl uint_least32_t
    (type_ref __uint_least32_t))
  (typedef_decl uint_least64_t
    (type_ref __uint_least64_t))
  (typedef_decl int_fast8_t)
  (typedef_decl int_fast16_t)
  (typedef_decl int_fast32_t)
  (typedef_decl int_fast64_t)
  (typedef_decl uint_fast8_t)
  (typedef_decl uint_fast16_t)
  (typedef_decl uint_fast32_t)
  (typedef_decl uint_fast64_t)
  (typedef_decl intptr_t)
  (typedef_decl uintptr_t)
  (typedef_decl intmax_t
    (type_ref __intmax_t))
  (typedef_decl uintmax_t
    (type_ref __uintmax_t))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/align.h
  (namespace std
    (visibility_attr default)
    (function_decl align
      (parm_decl __align
        (type_ref std::size_t))
      (parm_decl __size
        (type_ref std::size_t))
      (parm_decl __ptr)
      (parm_decl __space
        (type_ref std::size_t))
      (compound_stmt
        (if_stmt
          (binary_operator
            (decl_ref_expr __space)
            (decl_ref_expr __size))
          (return_stmt
            (cxx_null_ptr_literal_expr)))
        (decl_stmt
          (var_decl __intptr
            (cxx_reinterpret_cast_expr
              (type_ref uintptr_t)
              (decl_ref_expr __ptr))))
        (decl_stmt
          (var_decl __aligned
            (binary_operator
              (paren_expr
                (binary_operator
                  (binary_operator
                    (decl_ref_expr __intptr)
                    (integer_literal 1u))
                  (decl_ref_expr __align)))
              (unary_operator
                (decl_ref_expr __align)))))
        (decl_stmt
          (var_decl __diff
            (binary_operator
              (decl_ref_expr __aligned)
              (decl_ref_expr __intptr))))
        (if_stmt
          (binary_operator
            (decl_ref_expr __diff)
            (paren_expr
              (binary_operator
                (decl_ref_expr __space)
                (decl_ref_expr __size))))
          (return_stmt
            (cxx_null_ptr_literal_expr))
          (compound_stmt
            (compound_assignment_operator
              (decl_ref_expr __space)
              (decl_ref_expr __diff))
            (return_stmt
              (binary_operator
                (decl_ref_expr __ptr)
                (cxx_reinterpret_cast_expr
                  (decl_ref_expr __aligned)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/uses_allocator.h
  (namespace std
    (visibility_attr default)
    (struct_decl __erased_type)
    (type_alias_template_decl __is_erased_or_convertible
      (template_type_parameter _Alloc)
      (template_type_parameter _Tp)
      (type_alias_decl __is_erased_or_convertible
        (template_ref __or_)
        (template_ref is_convertible)
        (type_ref _Alloc)
        (type_ref _Tp)
        (template_ref is_same)
        (type_ref _Tp)
        (type_ref struct std::__erased_type)))
    (struct_decl allocator_arg_t
      (constructor allocator_arg_t))
    (var_decl allocator_arg
      (type_ref struct std::allocator_arg_t)
      (call_expr
        (call_expr allocator_arg_t
          (type_ref struct std::allocator_arg_t))))
    (class_template __uses_allocator_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter
        (template_ref __void_t))
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __uses_allocator_helper
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (type_ref _Tp)
      (type_ref _Alloc)
      (template_ref __void_t)
      (type_ref _Tp)
      (cxx_base_specifier __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
        (template_ref __is_erased_or_convertible)
        (type_ref _Alloc)
        (type_ref _Tp)))
    (class_template uses_allocator
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (cxx_base_specifier __uses_allocator_helper<_Tp, _Alloc>::type
        (template_ref __uses_allocator_helper)
        (type_ref _Tp)
        (type_ref _Alloc)))
    (struct_decl __uses_alloc_base)
    (struct_decl __uses_alloc0
      (cxx_base_specifier struct std::__uses_alloc_base
        (type_ref struct std::__uses_alloc_base))
      (struct_decl _Sink
        (cxx_method operator=
          (parm_decl)
          (compound_stmt)))
      (field_decl _M_a
        (struct_decl _Sink
          (cxx_method operator=
            (parm_decl)
            (compound_stmt)))))
    (class_template __uses_alloc1
      (template_type_parameter _Alloc)
      (cxx_base_specifier struct std::__uses_alloc_base
        (type_ref struct std::__uses_alloc_base))
      (field_decl _M_a
        (type_ref _Alloc)))
    (class_template __uses_alloc2
      (template_type_parameter _Alloc)
      (cxx_base_specifier struct std::__uses_alloc_base
        (type_ref struct std::__uses_alloc_base))
      (field_decl _M_a
        (type_ref _Alloc)))
    (class_template __uses_alloc
      (template_non_type_parameter)
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args))
    (class_template_partial_specialization __uses_alloc
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (cxx_bool_literal_expr)
      (type_ref _Tp)
      (type_ref _Alloc)
      (type_ref _Args)
      (cxx_base_specifier conditional<is_constructible<_Tp, struct allocator_arg_t, const _Alloc &, _Args...>::value, __uses_alloc1<_Alloc>, __uses_alloc2<_Alloc> >::type
        (template_ref conditional)
        (decl_ref_expr
          (template_ref is_constructible)
          (type_ref _Tp)
          (type_ref struct std::allocator_arg_t)
          (type_ref _Alloc)
          (type_ref _Args))
        (template_ref __uses_alloc1)
        (type_ref _Alloc)
        (template_ref __uses_alloc2)
        (type_ref _Alloc))
      (static_assert
        (decl_ref_expr
          (template_ref __or_)
          (template_ref is_constructible)
          (type_ref _Tp)
          (type_ref struct std::allocator_arg_t)
          (type_ref _Alloc)
          (type_ref _Args)
          (template_ref is_constructible)
          (type_ref _Tp)
          (type_ref _Args)
          (type_ref _Alloc))
        (string_literal "construction with an allocator must be possible if uses_allocator is true")))
    (class_template_partial_specialization __uses_alloc
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (cxx_bool_literal_expr)
      (type_ref _Tp)
      (type_ref _Alloc)
      (type_ref _Args)
      (cxx_base_specifier struct std::__uses_alloc0
        (type_ref struct std::__uses_alloc0)))
    (type_alias_template_decl __uses_alloc_t
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (type_alias_decl __uses_alloc_t
        (template_ref __uses_alloc)
        (decl_ref_expr
          (template_ref uses_allocator)
          (type_ref _Tp)
          (type_ref _Alloc))
        (type_ref _Tp)
        (type_ref _Alloc)
        (type_ref _Args)))
    (function_template __use_alloc
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (template_ref __uses_alloc_t)
      (type_ref _Tp)
      (type_ref _Alloc)
      (type_ref _Args)
      (parm_decl __a
        (type_ref _Alloc))
      (compound_stmt
        (decl_stmt
          (var_decl __ret
            (template_ref __uses_alloc_t)
            (type_ref _Tp)
            (type_ref _Alloc)
            (type_ref _Args)))
        (binary_operator
          (member_ref_expr
            (decl_ref_expr __ret))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __addressof))
            (decl_ref_expr __a)))
        (return_stmt
          (decl_ref_expr __ret))))
    (function_template __use_alloc
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (parm_decl
        (type_ref _Alloc)))
    (class_template __is_uses_allocator_predicate
      (template_template_parameter _Predicate
        (template_type_parameter))
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (cxx_base_specifier conditional<uses_allocator<_Tp, _Alloc>::value, __or_<_Predicate<_Tp, struct allocator_arg_t, _Alloc, _Args...>, _Predicate<_Tp, _Args..., _Alloc> >, _Predicate<_Tp, _Args...> >::type
        (template_ref conditional)
        (decl_ref_expr
          (template_ref uses_allocator)
          (type_ref _Tp)
          (type_ref _Alloc))
        (template_ref __or_)
        (template_ref _Predicate)
        (type_ref _Tp)
        (type_ref struct std::allocator_arg_t)
        (type_ref _Alloc)
        (type_ref _Args)
        (template_ref _Predicate)
        (type_ref _Tp)
        (type_ref _Args)
        (type_ref _Alloc)
        (template_ref _Predicate)
        (type_ref _Tp)
        (type_ref _Args)))
    (class_template __is_uses_allocator_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (cxx_base_specifier __is_uses_allocator_predicate<std::is_constructible, _Tp, _Alloc, _Args...>
        (template_ref __is_uses_allocator_predicate)
        (template_ref is_constructible)
        (type_ref _Tp)
        (type_ref _Alloc)
        (type_ref _Args)))
    (class_template __is_nothrow_uses_allocator_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (cxx_base_specifier __is_uses_allocator_predicate<std::is_nothrow_constructible, _Tp, _Alloc, _Args...>
        (template_ref __is_uses_allocator_predicate)
        (template_ref is_nothrow_constructible)
        (type_ref _Tp)
        (type_ref _Alloc)
        (type_ref _Args)))
    (function_template __uses_allocator_construct_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (parm_decl __a
        (type_ref struct std::__uses_alloc0))
      (parm_decl __ptr
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (cxx_new_expr
          (cstyle_cast_expr
            (decl_ref_expr __ptr))
          (type_ref _Tp)
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args))))))
    (function_template __uses_allocator_construct_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (parm_decl __a
        (template_ref __uses_alloc1)
        (type_ref _Alloc))
      (parm_decl __ptr
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (cxx_new_expr
          (cstyle_cast_expr
            (decl_ref_expr __ptr))
          (type_ref _Tp)
          (decl_ref_expr allocator_arg)
          (unary_operator
            (member_ref_expr
              (decl_ref_expr __a)))
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args))))))
    (function_template __uses_allocator_construct_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (parm_decl __a
        (template_ref __uses_alloc2)
        (type_ref _Alloc))
      (parm_decl __ptr
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (cxx_new_expr
          (cstyle_cast_expr
            (decl_ref_expr __ptr))
          (type_ref _Tp)
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args)))
          (unary_operator
            (member_ref_expr
              (decl_ref_expr __a))))))
    (function_template __uses_allocator_construct
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (parm_decl __a
        (type_ref _Alloc))
      (parm_decl __ptr
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __uses_allocator_construct_impl))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __use_alloc)
              (type_ref _Tp)
              (type_ref _Alloc)
              (type_ref _Args))
            (decl_ref_expr __a))
          (decl_ref_expr __ptr)
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_relops.h
  (namespace std
    (visibility_attr default)
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_relops.h
    (namespace rel_ops
      (function_template operator!=
        (template_type_parameter _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (paren_expr
                (call_expr
                  (decl_ref_expr __x)
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (decl_ref_expr __y)))))))
      (function_template operator>
        (template_type_parameter _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __y)
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (decl_ref_expr __x)))))
      (function_template operator<=
        (template_type_parameter _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (paren_expr
                (call_expr
                  (decl_ref_expr __y)
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (decl_ref_expr __x)))))))
      (function_template operator>=
        (template_type_parameter _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (paren_expr
                (call_expr
                  (decl_ref_expr __x)
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (decl_ref_expr __y)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/initializer_list
  (namespace std
    (class_template initializer_list
      (template_type_parameter _E)
      (cxx_access_spec_decl)
      (typedef_decl value_type
        (type_ref _E))
      (typedef_decl reference
        (type_ref _E))
      (typedef_decl const_reference
        (type_ref _E))
      (typedef_decl size_type
        (type_ref std::size_t))
      (typedef_decl iterator
        (type_ref _E))
      (typedef_decl const_iterator
        (type_ref _E))
      (cxx_access_spec_decl)
      (field_decl _M_array
        (type_ref std::initializer_list::iterator))
      (field_decl _M_len
        (type_ref std::initializer_list::size_type))
      (constructor initializer_list<_E>
        (parm_decl __a
          (type_ref std::initializer_list::const_iterator))
        (parm_decl __l
          (type_ref std::initializer_list::size_type))
        (member_ref _M_array)
        (decl_ref_expr __a)
        (member_ref _M_len)
        (decl_ref_expr __l)
        (compound_stmt))
      (cxx_access_spec_decl)
      (constructor initializer_list<_E>
        (member_ref _M_array)
        (integer_literal 0)
        (member_ref _M_len)
        (integer_literal 0)
        (compound_stmt))
      (cxx_method size
        (type_ref std::initializer_list::size_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_len))))
      (cxx_method begin
        (type_ref std::initializer_list::const_iterator)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_array))))
      (cxx_method end
        (type_ref std::initializer_list::const_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr begin
                (member_ref_expr begin))
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (call_expr size
                (member_ref_expr size)))))))
    (function_template begin
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __ils
        (template_ref initializer_list)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __ils))))))
    (function_template end
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __ils
        (template_ref initializer_list)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __ils)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/utility
  (namespace std
    (visibility_attr default)
    (class_template tuple_size
      (template_type_parameter _Tp))
    (type_alias_template_decl __enable_if_has_tuple_size
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (template_ref remove_cv)
        (type_ref _Tp))
      (template_type_parameter
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref is_same)
          (type_ref _Tp)
          (type_ref _Up)))
      (template_non_type_parameter
        (type_ref std::size_t)
        (decl_ref_expr
          (template_ref tuple_size)
          (type_ref _Tp)))
      (type_alias_decl __enable_if_has_tuple_size
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Tp)
      (template_ref __enable_if_has_tuple_size)
      (type_ref _Tp)
      (cxx_base_specifier tuple_size<_Tp>
        (template_ref tuple_size)
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Tp)
      (template_ref __enable_if_has_tuple_size)
      (type_ref _Tp)
      (cxx_base_specifier tuple_size<_Tp>
        (template_ref tuple_size)
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Tp)
      (template_ref __enable_if_has_tuple_size)
      (type_ref _Tp)
      (cxx_base_specifier tuple_size<_Tp>
        (template_ref tuple_size)
        (type_ref _Tp)))
    (class_template tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp))
    (type_alias_template_decl __tuple_element_t
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (type_alias_decl __tuple_element_t
        (template_ref tuple_element)
        (decl_ref_expr __i)
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (decl_ref_expr __i)
      (type_ref _Tp)
      (typedef_decl type
        (template_ref add_const)
        (template_ref __tuple_element_t)
        (decl_ref_expr __i)
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (decl_ref_expr __i)
      (type_ref _Tp)
      (typedef_decl type
        (template_ref add_volatile)
        (template_ref __tuple_element_t)
        (decl_ref_expr __i)
        (type_ref _Tp)))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (decl_ref_expr __i)
      (type_ref _Tp)
      (typedef_decl type
        (template_ref add_cv)
        (template_ref __tuple_element_t)
        (decl_ref_expr __i)
        (type_ref _Tp)))
    (type_alias_template_decl tuple_element_t
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (type_alias_decl tuple_element_t
        (template_ref tuple_element)
        (decl_ref_expr __i)
        (type_ref _Tp)))
    (class_template_partial_specialization __is_tuple_like_impl
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref pair)
      (type_ref _T1)
      (type_ref _T2)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (cxx_base_specifier integral_constant<std::size_t, 2>
        (template_ref integral_constant)
        (type_ref std::size_t)
        (integer_literal 2)))
    (class_template_partial_specialization tuple_element
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (integer_literal 0)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (typedef_decl type
        (type_ref _Tp1)))
    (class_template_partial_specialization tuple_element
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (integer_literal 1)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (typedef_decl type
        (type_ref _Tp2)))
    (class_template __pair_get
      (template_non_type_parameter _Int
        (type_ref std::size_t)))
    (struct_decl __pair_get
      (integer_literal 0)
      (function_template __get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp1)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __pair)))))
      (function_template __move_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp1)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Tp1))
              (member_ref_expr
                (decl_ref_expr __pair))))))
      (function_template __const_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp1)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __pair)))))
      (function_template __const_move_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp1)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Tp1))
              (member_ref_expr
                (decl_ref_expr __pair)))))))
    (struct_decl __pair_get
      (integer_literal 1)
      (function_template __get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp2)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __pair)))))
      (function_template __move_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp2)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Tp2))
              (member_ref_expr
                (decl_ref_expr __pair))))))
      (function_template __const_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp2)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __pair)))))
      (function_template __const_move_get
        (template_type_parameter _Tp1)
        (template_type_parameter _Tp2)
        (type_ref _Tp2)
        (parm_decl __pair
          (template_ref pair)
          (type_ref _Tp1)
          (type_ref _Tp2))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Tp2))
              (member_ref_expr
                (decl_ref_expr __pair)))))))
    (function_template get
      (template_non_type_parameter _Int
        (type_ref std::size_t))
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_ref tuple_element)
      (decl_ref_expr _Int)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (parm_decl __in
        (template_ref pair)
        (type_ref _Tp1)
        (type_ref _Tp2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __pair_get)
              (decl_ref_expr _Int))
            (decl_ref_expr __in)))))
    (function_template get
      (template_non_type_parameter _Int
        (type_ref std::size_t))
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_ref tuple_element)
      (decl_ref_expr _Int)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (parm_decl __in
        (template_ref pair)
        (type_ref _Tp1)
        (type_ref _Tp2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __pair_get)
              (decl_ref_expr _Int))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in))))))
    (function_template get
      (template_non_type_parameter _Int
        (type_ref std::size_t))
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_ref tuple_element)
      (decl_ref_expr _Int)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (parm_decl __in
        (template_ref pair)
        (type_ref _Tp1)
        (type_ref _Tp2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __pair_get)
              (decl_ref_expr _Int))
            (decl_ref_expr __in)))))
    (function_template get
      (template_non_type_parameter _Int
        (type_ref std::size_t))
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_ref tuple_element)
      (decl_ref_expr _Int)
      (template_ref pair)
      (type_ref _Tp1)
      (type_ref _Tp2)
      (parm_decl __in
        (template_ref pair)
        (type_ref _Tp1)
        (type_ref _Tp2))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __pair_get)
              (decl_ref_expr _Int))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in))))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Tp)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (member_ref_expr
            (decl_ref_expr __p)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Tp)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (member_ref_expr
            (decl_ref_expr __p)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Tp)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __p))))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Tp)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __p))))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Up)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (member_ref_expr
            (decl_ref_expr __p)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Up)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (member_ref_expr
            (decl_ref_expr __p)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Up)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __p))))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref pair)
        (type_ref _Up)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (member_ref_expr
              (decl_ref_expr __p))))))
    (function_template exchange
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (type_ref _Tp))
      (type_ref _Tp)
      (parm_decl __obj
        (type_ref _Tp))
      (parm_decl __new_val
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __exchange))
            (decl_ref_expr __obj)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Up))
              (decl_ref_expr __new_val))))))
    (class_template _Index_tuple
      (template_non_type_parameter _Indexes
        (type_ref std::size_t)))
    (class_template _Build_index_tuple
      (template_non_type_parameter _Num
        (type_ref std::size_t))
      (type_alias_template_decl _IdxTuple
        (template_type_parameter)
        (template_non_type_parameter _Indices
          (type_ref std::size_t))
        (type_alias_decl _IdxTuple
          (template_ref _Index_tuple)
          (pack_expansion_expr
            (decl_ref_expr _Indices))))
      (type_alias_decl __type
        (template_ref __make_integer_seq)
        (template_ref _IdxTuple)
        (type_ref std::size_t)
        (decl_ref_expr _Num)))
    (class_template integer_sequence
      (template_type_parameter _Tp)
      (template_non_type_parameter _Idx
        (type_ref _Tp))
      (typedef_decl value_type
        (type_ref _Tp))
      (cxx_method size
        (type_ref std::size_t)
        (compound_stmt
          (return_stmt
            (size_of_pack_expr _Idx)))))
    (type_alias_template_decl make_integer_sequence
      (template_type_parameter _Tp)
      (template_non_type_parameter _Num
        (type_ref _Tp))
      (type_alias_decl make_integer_sequence
        (template_ref __make_integer_seq)
        (template_ref integer_sequence)
        (type_ref _Tp)
        (decl_ref_expr _Num)))
    (type_alias_template_decl index_sequence
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (type_alias_decl index_sequence
        (template_ref integer_sequence)
        (type_ref std::size_t)
        (pack_expansion_expr
          (decl_ref_expr _Idx))))
    (type_alias_template_decl make_index_sequence
      (template_non_type_parameter _Num
        (type_ref std::size_t))
      (type_alias_decl make_index_sequence
        (template_ref make_integer_sequence)
        (type_ref std::size_t)
        (decl_ref_expr _Num)))
    (type_alias_template_decl index_sequence_for
      (template_type_parameter _Types)
      (type_alias_decl index_sequence_for
        (template_ref make_index_sequence)
        (size_of_pack_expr
          (type_ref _Types)))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/range_access.h
  (namespace std
    (visibility_attr default)
    (function_template begin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template begin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template end
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template end
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template begin
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __arr))))
    (function_template end
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __arr)
            (decl_ref_expr
              (overloaded_decl_ref operator+))
            (decl_ref_expr _Nm)))))
    (class_template valarray
      (template_type_parameter _Tp))
    (function_template begin
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl
        (template_ref valarray)
        (type_ref _Tp)))
    (function_template begin
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl
        (template_ref valarray)
        (type_ref _Tp)))
    (function_template end
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl
        (template_ref valarray)
        (type_ref _Tp)))
    (function_template end
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl
        (template_ref valarray)
        (type_ref _Tp)))
    (function_template cbegin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (decl_ref_expr
          (namespace_ref std)
          (overloaded_decl_ref begin))
        (decl_ref_expr __cont))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref begin))
            (decl_ref_expr __cont)))))
    (function_template cend
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (decl_ref_expr
          (namespace_ref std)
          (overloaded_decl_ref end))
        (decl_ref_expr __cont))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref end))
            (decl_ref_expr __cont)))))
    (function_template rbegin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template rbegin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template rend
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template rend
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (member_ref_expr
          (decl_ref_expr __cont)))
      (compound_stmt
        (return_stmt
          (call_expr
            (member_ref_expr
              (decl_ref_expr __cont))))))
    (function_template rbegin
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_ref reverse_iterator)
      (type_ref _Tp)
      (parm_decl __arr
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Tp)
            (call_expr
              (decl_ref_expr __arr)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (decl_ref_expr _Nm))))))
    (function_template rend
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_ref reverse_iterator)
      (type_ref _Tp)
      (parm_decl __arr
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Tp)
            (decl_ref_expr __arr)))))
    (function_template rbegin
      (template_type_parameter _Tp)
      (template_ref reverse_iterator)
      (type_ref _Tp)
      (parm_decl __il
        (template_ref initializer_list)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Tp)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __il)))))))
    (function_template rend
      (template_type_parameter _Tp)
      (template_ref reverse_iterator)
      (type_ref _Tp)
      (parm_decl __il
        (template_ref initializer_list)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reverse_iterator)
            (type_ref _Tp)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __il)))))))
    (function_template crbegin
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (decl_ref_expr
          (namespace_ref std)
          (overloaded_decl_ref rbegin))
        (decl_ref_expr __cont))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref rbegin))
            (decl_ref_expr __cont)))))
    (function_template crend
      (template_type_parameter _Container)
      (parm_decl __cont
        (type_ref _Container))
      (call_expr
        (decl_ref_expr
          (namespace_ref std)
          (overloaded_decl_ref rend))
        (decl_ref_expr __cont))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref rend))
            (decl_ref_expr __cont))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/array
  (namespace std
    (visibility_attr default)
    (class_template __array_traits
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (typedef_decl _Type
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (typedef_decl _Is_swappable
        (template_ref __is_swappable)
        (type_ref _Tp))
      (typedef_decl _Is_nothrow_swappable
        (template_ref __is_nothrow_swappable)
        (type_ref _Tp))
      (cxx_method _S_ref
        (type_ref _Tp)
        (parm_decl __t
          (type_ref std::__array_traits::_Type))
        (parm_decl __n
          (namespace_ref std)
          (type_ref std::size_t))
        (compound_stmt
          (return_stmt
            (cxx_const_cast_expr
              (type_ref _Tp)
              (array_subscript_expr
                (decl_ref_expr __t)
                (decl_ref_expr __n))))))
      (cxx_method _S_ptr
        (type_ref _Tp)
        (parm_decl __t
          (type_ref std::__array_traits::_Type))
        (compound_stmt
          (return_stmt
            (cxx_const_cast_expr
              (type_ref _Tp)
              (decl_ref_expr __t))))))
    (class_template_partial_specialization __array_traits
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (integer_literal 0)
      (struct_decl _Type)
      (typedef_decl _Is_swappable
        (type_ref std::true_type))
      (typedef_decl _Is_nothrow_swappable
        (type_ref std::true_type))
      (cxx_method _S_ref
        (type_ref _Tp)
        (parm_decl
          (type_ref struct std::__array_traits<type-parameter-0-0, 0>::_Type))
        (parm_decl
          (namespace_ref std)
          (type_ref std::size_t))
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_static_cast_expr
                (type_ref _Tp)
                (cxx_null_ptr_literal_expr))))))
      (cxx_method _S_ptr
        (type_ref _Tp)
        (parm_decl
          (type_ref struct std::__array_traits<type-parameter-0-0, 0>::_Type))
        (compound_stmt
          (return_stmt
            (cxx_null_ptr_literal_expr)))))
    (class_template array
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (typedef_decl value_type
        (type_ref _Tp))
      (typedef_decl pointer
        (type_ref std::array::value_type))
      (typedef_decl const_pointer
        (type_ref std::array::value_type))
      (typedef_decl reference
        (type_ref std::array::value_type))
      (typedef_decl const_reference
        (type_ref std::array::value_type))
      (typedef_decl iterator
        (type_ref std::array::value_type))
      (typedef_decl const_iterator
        (type_ref std::array::value_type))
      (typedef_decl size_type
        (namespace_ref std)
        (type_ref std::size_t))
      (typedef_decl difference_type
        (namespace_ref std)
        (type_ref std::ptrdiff_t))
      (typedef_decl reverse_iterator
        (namespace_ref std)
        (template_ref reverse_iterator)
        (type_ref std::array::iterator))
      (typedef_decl const_reverse_iterator
        (namespace_ref std)
        (template_ref reverse_iterator)
        (type_ref std::array::const_iterator))
      (typedef_decl _AT_Type
        (template_ref __array_traits)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (field_decl _M_elems
        (type_ref std::array::_AT_Type))
      (cxx_method fill
        (parm_decl __u
          (type_ref std::array::value_type))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref fill_n))
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref begin)))
            (call_expr size
              (member_ref_expr size))
            (decl_ref_expr __u))))
      (cxx_method swap
        (parm_decl __other
          (type_ref array<_Tp, _Nm>))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref swap_ranges))
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref begin)))
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref end)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __other))))))
      (cxx_method begin
        (type_ref std::array::iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref data)))))))
      (cxx_method begin
        (type_ref std::array::const_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref data)))))))
      (cxx_method end
        (type_ref std::array::iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::iterator)
              (call_expr
                (call_expr
                  (member_ref_expr
                    (overloaded_decl_ref data)))
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr _Nm))))))
      (cxx_method end
        (type_ref std::array::const_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_iterator)
              (call_expr
                (call_expr
                  (member_ref_expr
                    (overloaded_decl_ref data)))
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr _Nm))))))
      (cxx_method rbegin
        (type_ref std::array::reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref end)))))))
      (cxx_method rbegin
        (type_ref std::array::const_reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref end)))))))
      (cxx_method rend
        (type_ref std::array::reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref begin)))))))
      (cxx_method rend
        (type_ref std::array::const_reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref begin)))))))
      (cxx_method cbegin
        (type_ref std::array::const_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref data)))))))
      (cxx_method cend
        (type_ref std::array::const_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_iterator)
              (call_expr
                (call_expr
                  (member_ref_expr
                    (overloaded_decl_ref data)))
                (decl_ref_expr
                  (overloaded_decl_ref operator+))
                (decl_ref_expr _Nm))))))
      (cxx_method crbegin
        (type_ref std::array::const_reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref end)))))))
      (cxx_method crend
        (type_ref std::array::const_reverse_iterator)
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref std::array::const_reverse_iterator)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref begin)))))))
      (cxx_method size
        (type_ref std::array::size_type)
        (compound_stmt
          (return_stmt
            (decl_ref_expr _Nm))))
      (cxx_method max_size
        (type_ref std::array::size_type)
        (compound_stmt
          (return_stmt
            (decl_ref_expr _Nm))))
      (cxx_method empty
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr size
                (member_ref_expr size))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 0)))))
      (cxx_method operator[]
        (type_ref std::array::reference)
        (parm_decl __n
          (type_ref std::array::size_type))
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems)
              (decl_ref_expr __n)))))
      (cxx_method operator[]
        (type_ref std::array::const_reference)
        (parm_decl __n
          (type_ref std::array::size_type))
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems)
              (decl_ref_expr __n)))))
      (cxx_method at
        (type_ref std::array::reference)
        (parm_decl __n
          (type_ref std::array::size_type))
        (compound_stmt
          (if_stmt
            (binary_operator
              (decl_ref_expr __n)
              (decl_ref_expr _Nm))
            (call_expr __throw_out_of_range_fmt
              (decl_ref_expr __throw_out_of_range_fmt
                (namespace_ref std))
              (paren_expr
                (string_literal "array::at: __n (which is %zu) >= _Nm (which is %zu)"))
              (decl_ref_expr __n)
              (decl_ref_expr _Nm)))
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems)
              (decl_ref_expr __n)))))
      (cxx_method at
        (type_ref std::array::const_reference)
        (parm_decl __n
          (type_ref std::array::size_type))
        (compound_stmt
          (return_stmt
            (conditional_operator
              (binary_operator
                (decl_ref_expr __n)
                (decl_ref_expr _Nm))
              (call_expr
                (member_ref_expr
                  (type_ref std::array::_AT_Type))
                (member_ref_expr _M_elems)
                (decl_ref_expr __n))
              (paren_expr
                (binary_operator
                  (call_expr __throw_out_of_range_fmt
                    (decl_ref_expr __throw_out_of_range_fmt
                      (namespace_ref std))
                    (paren_expr
                      (string_literal "array::at: __n (which is %zu) >= _Nm (which is %zu)"))
                    (decl_ref_expr __n)
                    (decl_ref_expr _Nm))
                  (call_expr
                    (member_ref_expr
                      (type_ref std::array::_AT_Type))
                    (member_ref_expr _M_elems)
                    (integer_literal 0))))))))
      (cxx_method front
        (type_ref std::array::reference)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (unary_operator
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref begin)))))))
      (cxx_method front
        (type_ref std::array::const_reference)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems)
              (integer_literal 0)))))
      (cxx_method back
        (type_ref std::array::reference)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (conditional_operator
              (decl_ref_expr _Nm)
              (unary_operator
                (paren_expr
                  (call_expr
                    (call_expr
                      (member_ref_expr
                        (overloaded_decl_ref end)))
                    (decl_ref_expr
                      (overloaded_decl_ref operator-))
                    (integer_literal 1))))
              (unary_operator
                (call_expr
                  (member_ref_expr
                    (overloaded_decl_ref end))))))))
      (cxx_method back
        (type_ref std::array::const_reference)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (conditional_operator
              (decl_ref_expr _Nm)
              (call_expr
                (member_ref_expr
                  (type_ref std::array::_AT_Type))
                (member_ref_expr _M_elems)
                (binary_operator
                  (decl_ref_expr _Nm)
                  (integer_literal 1)))
              (call_expr
                (member_ref_expr
                  (type_ref std::array::_AT_Type))
                (member_ref_expr _M_elems)
                (integer_literal 0))))))
      (cxx_method data
        (type_ref std::array::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems)))))
      (cxx_method data
        (type_ref std::array::const_pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (type_ref std::array::_AT_Type))
              (member_ref_expr _M_elems))))))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref equal))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __one)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __one)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __two)))))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __one)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __two)))))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __a
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __b
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref lexicographical_compare))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __two)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __one)))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __one)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (decl_ref_expr __two)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __one)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __two)))))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __array_traits)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __one
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl __two
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __one))
          (decl_ref_expr __two))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (template_ref enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __array_traits)
          (type_ref _Tp)
          (decl_ref_expr _Nm)))
      (parm_decl
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (parm_decl
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm)))
    (function_template get
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr _Int)
              (decl_ref_expr _Nm))
            (string_literal "array index is within bounds")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __array_traits)
              (type_ref _Tp)
              (decl_ref_expr _Nm))
            (member_ref_expr
              (decl_ref_expr __arr))
            (decl_ref_expr _Int)))))
    (function_template get
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr _Int)
              (decl_ref_expr _Nm))
            (string_literal "array index is within bounds")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (decl_ref_expr _Int))
              (decl_ref_expr __arr))))))
    (function_template get
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr _Int)
              (decl_ref_expr _Nm))
            (string_literal "array index is within bounds")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref __array_traits)
              (type_ref _Tp)
              (decl_ref_expr _Nm))
            (member_ref_expr
              (decl_ref_expr __arr))
            (decl_ref_expr _Int)))))
    (function_template get
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (type_ref _Tp)
      (parm_decl __arr
        (template_ref array)
        (type_ref _Tp)
        (decl_ref_expr _Nm))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr _Int)
              (decl_ref_expr _Nm))
            (string_literal "array index is within bounds")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (decl_ref_expr _Int))
              (decl_ref_expr __arr))))))
    (class_template tuple_size
      (template_type_parameter _Tp))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (template_ref array)
      (type_ref _Tp)
      (decl_ref_expr _Nm)
      (cxx_base_specifier integral_constant<std::size_t, _Nm>
        (template_ref integral_constant)
        (namespace_ref std)
        (type_ref std::size_t)
        (decl_ref_expr _Nm)))
    (class_template tuple_element
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter _Int
        (namespace_ref std)
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (decl_ref_expr _Int)
      (template_ref array)
      (type_ref _Tp)
      (decl_ref_expr _Nm)
      (static_assert
        (binary_operator
          (decl_ref_expr _Int)
          (decl_ref_expr _Nm))
        (string_literal "index is out of bounds"))
      (typedef_decl type
        (type_ref _Tp)))
    (class_template_partial_specialization __is_tuple_like_impl
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (namespace_ref std)
        (type_ref std::size_t))
      (template_ref array)
      (type_ref _Tp)
      (decl_ref_expr _Nm)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/invoke.h
  (namespace std
    (visibility_attr default)
    (function_template __invfwd
      (template_type_parameter _Tp)
      (template_type_parameter _Up
        (template_ref __inv_unwrap)
        (type_ref _Tp))
      (type_ref _Up)
      (parm_decl __t
        (template_ref remove_reference)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (cxx_static_cast_expr
            (type_ref _Up)
            (decl_ref_expr __t)))))
    (function_template __invoke_impl
      (template_type_parameter _Res)
      (template_type_parameter _Fn)
      (template_type_parameter _Args)
      (type_ref _Res)
      (parm_decl
        (type_ref struct std::__invoke_other))
      (parm_decl __f
        (type_ref _Fn))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Fn))
              (decl_ref_expr __f))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template __invoke_impl
      (template_type_parameter _Res)
      (template_type_parameter _MemFun)
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (type_ref _Res)
      (parm_decl
        (type_ref struct std::__invoke_memfun_ref))
      (parm_decl __f
        (type_ref _MemFun))
      (parm_decl __t
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (return_stmt
          (call_expr
            (paren_expr
              (binary_operator
                (call_expr
                  (decl_ref_expr
                    (overloaded_decl_ref __invfwd)
                    (type_ref _Tp))
                  (decl_ref_expr __t))
                (decl_ref_expr __f)))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template __invoke_impl
      (template_type_parameter _Res)
      (template_type_parameter _MemFun)
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (type_ref _Res)
      (parm_decl
        (type_ref struct std::__invoke_memfun_deref))
      (parm_decl __f
        (type_ref _MemFun))
      (parm_decl __t
        (type_ref _Tp))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (return_stmt
          (call_expr
            (paren_expr
              (binary_operator
                (paren_expr
                  (unary_operator
                    (call_expr
                      (decl_ref_expr
                        (namespace_ref std)
                        (overloaded_decl_ref forward)
                        (type_ref _Tp))
                      (decl_ref_expr __t))))
                (decl_ref_expr __f)))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template __invoke_impl
      (template_type_parameter _Res)
      (template_type_parameter _MemPtr)
      (template_type_parameter _Tp)
      (type_ref _Res)
      (parm_decl
        (type_ref struct std::__invoke_memobj_ref))
      (parm_decl __f
        (type_ref _MemPtr))
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __invfwd)
                (type_ref _Tp))
              (decl_ref_expr __t))
            (decl_ref_expr __f)))))
    (function_template __invoke_impl
      (template_type_parameter _Res)
      (template_type_parameter _MemPtr)
      (template_type_parameter _Tp)
      (type_ref _Res)
      (parm_decl
        (type_ref struct std::__invoke_memobj_deref))
      (parm_decl __f
        (type_ref _MemPtr))
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (binary_operator
            (paren_expr
              (unary_operator
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tp))
                  (decl_ref_expr __t))))
            (decl_ref_expr __f)))))
    (function_template __invoke
      (template_type_parameter _Callable)
      (template_type_parameter _Args)
      (template_ref __invoke_result)
      (type_ref _Callable)
      (type_ref _Args)
      (parm_decl __fn
        (type_ref _Callable))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (type_alias_decl __result
            (template_ref __invoke_result)
            (type_ref _Callable)
            (type_ref _Args)))
        (decl_stmt
          (type_alias_decl __type
            (type_ref __result)))
        (decl_stmt
          (type_alias_decl __tag
            (type_ref __result)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __invoke_impl)
              (type_ref __type))
            (call_expr
              (type_ref __tag)
              (init_list_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Callable))
              (decl_ref_expr __fn))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (type_alias_template_decl __can_invoke_as_void
      (template_type_parameter _Res)
      (template_type_parameter _Callable)
      (template_type_parameter _Args)
      (type_alias_decl __can_invoke_as_void
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref is_void)
          (type_ref _Res)
          (template_ref __is_invocable)
          (type_ref _Callable)
          (type_ref _Args))
        (type_ref _Res)))
    (type_alias_template_decl __can_invoke_as_nonvoid
      (template_type_parameter _Res)
      (template_type_parameter _Callable)
      (template_type_parameter _Args)
      (type_alias_decl __can_invoke_as_nonvoid
        (template_ref __enable_if_t)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __not_)
          (template_ref is_void)
          (type_ref _Res)
          (template_ref is_convertible)
          (template_ref __invoke_result)
          (type_ref _Callable)
          (type_ref _Args)
          (type_ref _Res))
        (type_ref _Res)))
    (function_template __invoke_r
      (template_type_parameter _Res)
      (template_type_parameter _Callable)
      (template_type_parameter _Args)
      (template_ref __can_invoke_as_nonvoid)
      (type_ref _Res)
      (type_ref _Callable)
      (type_ref _Args)
      (parm_decl __fn
        (type_ref _Callable))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (type_alias_decl __result
            (template_ref __invoke_result)
            (type_ref _Callable)
            (type_ref _Args)))
        (decl_stmt
          (type_alias_decl __type
            (type_ref __result)))
        (decl_stmt
          (type_alias_decl __tag
            (type_ref __result)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __invoke_impl)
              (type_ref __type))
            (call_expr
              (type_ref __tag)
              (init_list_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Callable))
              (decl_ref_expr __fn))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template __invoke_r
      (template_type_parameter _Res)
      (template_type_parameter _Callable)
      (template_type_parameter _Args)
      (template_ref __can_invoke_as_void)
      (type_ref _Res)
      (type_ref _Callable)
      (type_ref _Args)
      (parm_decl __fn
        (type_ref _Callable))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (type_alias_decl __result
            (template_ref __invoke_result)
            (type_ref _Callable)
            (type_ref _Args)))
        (decl_stmt
          (type_alias_decl __type
            (type_ref __result)))
        (decl_stmt
          (type_alias_decl __tag
            (type_ref __result)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __invoke_impl)
            (type_ref __type))
          (call_expr
            (type_ref __tag)
            (init_list_expr))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Callable))
            (decl_ref_expr __fn))
          (pack_expansion_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Args))
              (decl_ref_expr __args)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/tuple
  (namespace std
    (visibility_attr default)
    (class_template tuple
      (template_type_parameter _Elements))
    (class_template __is_empty_non_tuple
      (template_type_parameter _Tp)
      (cxx_base_specifier is_empty<_Tp>
        (template_ref is_empty)
        (type_ref _Tp)))
    (class_template_partial_specialization __is_empty_non_tuple
      (template_type_parameter _El0)
      (template_type_parameter _El)
      (template_ref tuple)
      (type_ref _El0)
      (type_ref _El)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (type_alias_template_decl __empty_not_final
      (template_type_parameter _Tp)
      (type_alias_decl __empty_not_final
        (template_ref conditional)
        (type_ref _Tp)
        (type_ref std::false_type)
        (template_ref __is_empty_non_tuple)
        (type_ref _Tp)))
    (class_template _Head_base
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __empty_not_final)
          (type_ref _Head))))
    (class_template_partial_specialization _Head_base
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (decl_ref_expr _Idx)
      (type_ref _Head)
      (cxx_bool_literal_expr)
      (constructor _Head_base<_Idx, type-parameter-0-1, true>
        (member_ref _M_head_impl)
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, true>
        (parm_decl __h
          (type_ref _Head))
        (member_ref _M_head_impl)
        (decl_ref_expr __h)
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, true>
        (parm_decl
          (type_ref _Head_base<_Idx, type-parameter-0-1, true>)))
      (constructor _Head_base<_Idx, type-parameter-0-1, true>
        (parm_decl
          (type_ref _Head_base<_Idx, type-parameter-0-1, true>)))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _UHead)
        (parm_decl __h
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __h))
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, true>
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl
          (type_ref struct std::__uses_alloc0))
        (member_ref _M_head_impl)
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (template_ref __uses_alloc1)
          (type_ref _Alloc))
        (member_ref _M_head_impl)
        (decl_ref_expr allocator_arg)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (template_ref __uses_alloc2)
          (type_ref _Alloc))
        (member_ref _M_head_impl)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _UHead)
        (parm_decl
          (type_ref struct std::__uses_alloc0))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __a
          (template_ref __uses_alloc1)
          (type_ref _Alloc))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (decl_ref_expr allocator_arg)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, true>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __a
          (template_ref __uses_alloc2)
          (type_ref _Alloc))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __b
          (type_ref _Head_base<_Idx, type-parameter-0-1, true>))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __b)))))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __b
          (type_ref _Head_base<_Idx, type-parameter-0-1, true>))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __b)))))
      (field_decl _M_head_impl
        (type_ref _Head)))
    (class_template_partial_specialization _Head_base
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (decl_ref_expr _Idx)
      (type_ref _Head)
      (cxx_bool_literal_expr)
      (constructor _Head_base<_Idx, type-parameter-0-1, false>
        (member_ref _M_head_impl)
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, false>
        (parm_decl __h
          (type_ref _Head))
        (member_ref _M_head_impl)
        (decl_ref_expr __h)
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, false>
        (parm_decl
          (type_ref _Head_base<_Idx, type-parameter-0-1, false>)))
      (constructor _Head_base<_Idx, type-parameter-0-1, false>
        (parm_decl
          (type_ref _Head_base<_Idx, type-parameter-0-1, false>)))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _UHead)
        (parm_decl __h
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __h))
        (compound_stmt))
      (constructor _Head_base<_Idx, type-parameter-0-1, false>
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl
          (type_ref struct std::__uses_alloc0))
        (member_ref _M_head_impl)
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (template_ref __uses_alloc1)
          (type_ref _Alloc))
        (member_ref _M_head_impl)
        (decl_ref_expr allocator_arg)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (template_ref __uses_alloc2)
          (type_ref _Alloc))
        (member_ref _M_head_impl)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _UHead)
        (parm_decl
          (type_ref struct std::__uses_alloc0))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __a
          (template_ref __uses_alloc1)
          (type_ref _Alloc))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (decl_ref_expr allocator_arg)
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (compound_stmt))
      (function_template _Head_base<_Idx, type-parameter-0-1, false>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __a
          (template_ref __uses_alloc2)
          (type_ref _Alloc))
        (parm_decl __uhead
          (type_ref _UHead))
        (member_ref _M_head_impl)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __uhead))
        (unary_operator
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __b
          (type_ref _Head_base<_Idx, type-parameter-0-1, false>))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __b)))))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __b
          (type_ref _Head_base<_Idx, type-parameter-0-1, false>))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __b)))))
      (field_decl _M_head_impl
        (type_ref _Head)))
    (class_template _Tuple_impl
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Elements))
    (class_template_partial_specialization _Tuple_impl
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (template_type_parameter _Tail)
      (decl_ref_expr _Idx)
      (type_ref _Head)
      (type_ref _Tail)
      (cxx_base_specifier _Tuple_impl<_Idx + 1, _Tail...>
        (template_ref _Tuple_impl)
        (binary_operator
          (decl_ref_expr _Idx)
          (integer_literal 1))
        (type_ref _Tail))
      (cxx_base_specifier _Head_base<_Idx, _Head>
        (template_ref _Head_base)
        (decl_ref_expr _Idx)
        (type_ref _Head))
      (friend_decl
        (class_template _Tuple_impl
          (template_non_type_parameter
            (type_ref std::size_t))
          (template_type_parameter)))
      (typedef_decl _Inherited
        (template_ref _Tuple_impl)
        (binary_operator
          (decl_ref_expr _Idx)
          (integer_literal 1))
        (type_ref _Tail))
      (typedef_decl _Base
        (template_ref _Head_base)
        (decl_ref_expr _Idx)
        (type_ref _Head))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base))
              (decl_ref_expr __t)))))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base))
              (decl_ref_expr __t)))))
      (cxx_method _M_tail
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __t))))
      (cxx_method _M_tail
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __t))))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (compound_stmt))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (parm_decl __head
          (type_ref _Head))
        (parm_decl __tail
          (type_ref _Tail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (pack_expansion_expr
          (decl_ref_expr __tail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (decl_ref_expr __head)
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _UHead)
        (template_type_parameter _UTail)
        (template_type_parameter
          (template_ref __enable_if_t)
          (binary_operator
            (size_of_pack_expr
              (type_ref _Tail))
            (size_of_pack_expr
              (type_ref _UTail))))
        (parm_decl __head
          (type_ref _UHead))
        (parm_decl __tail
          (type_ref _UTail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UTail))
            (decl_ref_expr __tail)))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __head))
        (compound_stmt))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (parm_decl
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>)))
      (cxx_method operator=
        (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>)
        (parm_decl
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>)))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (parm_decl
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>)))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _UElements)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UElements))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UElements))
          (decl_ref_expr __in))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UElements))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _UHead)
        (template_type_parameter _UTails)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead)
          (type_ref _UTails))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead)
              (type_ref _UTails))
            (decl_ref_expr __in)))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead)
              (type_ref _UTails))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (decl_ref_expr __tag)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __head
          (type_ref _Head))
        (parm_decl __tail
          (type_ref _Tail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (decl_ref_expr __tail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (decl_ref_expr __head)
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (template_type_parameter _UTail)
        (template_type_parameter
          (template_ref __enable_if_t)
          (binary_operator
            (size_of_pack_expr
              (type_ref _Tail))
            (size_of_pack_expr
              (type_ref _UTail))))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __head
          (type_ref _UHead))
        (parm_decl __tail
          (type_ref _UTail))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UTail))
            (decl_ref_expr __tail)))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __head))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _M_tail))
          (decl_ref_expr __in))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _M_head))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _M_tail))
            (decl_ref_expr __in)))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Head))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _M_head))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (template_type_parameter _UTails)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead)
          (type_ref _UTails))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UHead)
            (type_ref _UTails))
          (decl_ref_expr __in))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UHead)
            (type_ref _UTails))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (template_type_parameter _UTails)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead)
          (type_ref _UTails))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead)
              (type_ref _UTails))
            (decl_ref_expr __in)))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead)
              (type_ref _UTails))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _M_assign
        (template_type_parameter _UElements)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UElements))
        (compound_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (member_ref_expr
                (template_ref _Tuple_impl)
                (decl_ref_expr _Idx)
                (type_ref _UElements))
              (decl_ref_expr __in)))
          (call_expr
            (member_ref_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref _M_tail))
                (unary_operator
                  (cxx_this_expr))))
            (call_expr
              (member_ref_expr
                (template_ref _Tuple_impl)
                (decl_ref_expr _Idx)
                (type_ref _UElements))
              (decl_ref_expr __in)))))
      (function_template _M_assign
        (template_type_parameter _UHead)
        (template_type_parameter _UTails)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead)
          (type_ref _UTails))
        (compound_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _UHead))
              (call_expr
                (member_ref_expr
                  (template_ref _Tuple_impl)
                  (decl_ref_expr _Idx)
                  (type_ref _UHead)
                  (type_ref _UTails))
                (decl_ref_expr __in))))
          (call_expr
            (member_ref_expr
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref _M_tail))
                (unary_operator
                  (cxx_this_expr))))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (call_expr
                (member_ref_expr
                  (template_ref _Tuple_impl)
                  (decl_ref_expr _Idx)
                  (type_ref _UHead)
                  (type_ref _UTails))
                (decl_ref_expr __in))))))
      (cxx_access_spec_decl)
      (cxx_method _M_swap
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>))
        (compound_stmt
          (decl_stmt
            (using_declaration swap
              (namespace_ref std)
              (overloaded_decl_ref swap)))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (decl_ref_expr __in)))
          (call_expr
            (member_ref_expr
              (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1, type-parameter-0-2...>::_Inherited))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_tail))
              (decl_ref_expr __in))))))
    (class_template_partial_specialization _Tuple_impl
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (decl_ref_expr _Idx)
      (type_ref _Head)
      (cxx_base_specifier _Head_base<_Idx, _Head>
        (template_ref _Head_base)
        (decl_ref_expr _Idx)
        (type_ref _Head))
      (friend_decl
        (class_template _Tuple_impl
          (template_non_type_parameter
            (type_ref std::size_t))
          (template_type_parameter)))
      (typedef_decl _Base
        (template_ref _Head_base)
        (decl_ref_expr _Idx)
        (type_ref _Head))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base))
              (decl_ref_expr __t)))))
      (cxx_method _M_head
        (type_ref _Head)
        (parm_decl __t
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base))
              (decl_ref_expr __t)))))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1>
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (compound_stmt))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1>
        (parm_decl __head
          (type_ref _Head))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (decl_ref_expr __head)
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _UHead)
        (parm_decl __head
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __head))
        (compound_stmt))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1>
        (parm_decl
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>)))
      (cxx_method operator=
        (type_ref _Tuple_impl<_Idx, type-parameter-0-1>)
        (parm_decl
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>)))
      (constructor _Tuple_impl<_Idx, type-parameter-0-1>
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (cxx_static_cast_expr
          (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _UHead)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UHead))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _UHead)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (decl_ref_expr __tag)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __head
          (type_ref _Head))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (decl_ref_expr __head)
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __head
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (decl_ref_expr __head))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref _M_head))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _Head))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Head))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref _M_head))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (member_ref_expr
            (template_ref _Tuple_impl)
            (decl_ref_expr _Idx)
            (type_ref _UHead))
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template _Tuple_impl<_Idx, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _UHead)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (type_ref std::_Tuple_impl<_Idx, type-parameter-0-1>::_Base)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __use_alloc)
            (type_ref _Head)
            (type_ref _Alloc)
            (type_ref _UHead))
          (decl_ref_expr __a))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _UHead))
          (call_expr
            (member_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr _Idx)
              (type_ref _UHead))
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template _M_assign
        (template_type_parameter _UHead)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (compound_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (member_ref_expr
                (template_ref _Tuple_impl)
                (decl_ref_expr _Idx)
                (type_ref _UHead))
              (decl_ref_expr __in)))))
      (function_template _M_assign
        (template_type_parameter _UHead)
        (parm_decl __in
          (template_ref _Tuple_impl)
          (decl_ref_expr _Idx)
          (type_ref _UHead))
        (compound_stmt
          (binary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _UHead))
              (call_expr
                (member_ref_expr
                  (template_ref _Tuple_impl)
                  (decl_ref_expr _Idx)
                  (type_ref _UHead))
                (decl_ref_expr __in))))))
      (cxx_access_spec_decl)
      (cxx_method _M_swap
        (parm_decl __in
          (type_ref _Tuple_impl<_Idx, type-parameter-0-1>))
        (compound_stmt
          (decl_stmt
            (using_declaration swap
              (namespace_ref std)
              (overloaded_decl_ref swap)))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _M_head))
              (decl_ref_expr __in))))))
    (class_template _TupleConstraints
      (template_non_type_parameter)
      (template_type_parameter _Types)
      (type_alias_template_decl is_constructible
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl is_constructible
          (template_ref __bool_constant)
          (type_ref _Tp)
          (type_ref _Up)))
      (function_template __is_implicitly_constructible
        (template_type_parameter _UTypes)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _Types)
              (type_ref _UTypes)
              (template_ref is_convertible)
              (type_ref _UTypes)
              (type_ref _Types)))))
      (function_template __is_explicitly_constructible
        (template_type_parameter _UTypes)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_constructible)
              (type_ref _Types)
              (type_ref _UTypes)
              (template_ref __not_)
              (template_ref __and_)
              (template_ref is_convertible)
              (type_ref _UTypes)
              (type_ref _Types)))))
      (cxx_method __is_implicitly_default_constructible
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (namespace_ref std)
              (template_ref __is_implicitly_default_constructible)
              (type_ref _Types)))))
      (cxx_method __is_explicitly_default_constructible
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_default_constructible)
              (type_ref _Types)
              (template_ref __not_)
              (template_ref __and_)
              (namespace_ref std)
              (template_ref __is_implicitly_default_constructible)
              (type_ref _Types))))))
    (class_template_partial_specialization _TupleConstraints
      (template_type_parameter _Types)
      (cxx_bool_literal_expr)
      (type_ref _Types)
      (function_template __is_implicitly_constructible
        (template_type_parameter _UTypes)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr))))
      (function_template __is_explicitly_constructible
        (template_type_parameter _UTypes)
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (class_template tuple
      (template_type_parameter _Elements)
      (cxx_base_specifier _Tuple_impl<0, _Elements...>
        (template_ref _Tuple_impl)
        (integer_literal 0)
        (type_ref _Elements))
      (typedef_decl _Inherited
        (template_ref _Tuple_impl)
        (integer_literal 0)
        (type_ref _Elements))
      (type_alias_template_decl _TCC
        (template_non_type_parameter _Cond)
        (type_alias_decl _TCC
          (template_ref _TupleConstraints)
          (decl_ref_expr _Cond)
          (type_ref _Elements)))
      (type_alias_template_decl _ImplicitDefaultCtor
        (template_non_type_parameter _Dummy)
        (type_alias_decl _ImplicitDefaultCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Dummy)))))
      (type_alias_template_decl _ExplicitDefaultCtor
        (template_non_type_parameter _Dummy)
        (type_alias_decl _ExplicitDefaultCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Dummy)))))
      (type_alias_template_decl _ImplicitCtor
        (template_non_type_parameter _Cond)
        (template_type_parameter _Args)
        (type_alias_decl _ImplicitCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Cond)
              (type_ref _Args)))))
      (type_alias_template_decl _ExplicitCtor
        (template_non_type_parameter _Cond)
        (template_type_parameter _Args)
        (type_alias_decl _ExplicitCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Cond)
              (type_ref _Args)))))
      (function_template __assignable
        (template_type_parameter _UElements)
        (template_ref __enable_if_t)
        (binary_operator
          (size_of_pack_expr
            (type_ref _UElements))
          (size_of_pack_expr
            (type_ref _Elements)))
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_assignable)
              (type_ref _Elements)
              (type_ref _UElements)))))
      (function_template __nothrow_assignable
        (template_type_parameter _UElements)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_nothrow_assignable)
              (type_ref _Elements)
              (type_ref _UElements)))))
      (function_template __nothrow_constructible
        (template_type_parameter _UElements)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_nothrow_constructible)
              (type_ref _Elements)
              (type_ref _UElements)))))
      (function_template __valid_args
        (template_type_parameter _Up)
        (compound_stmt
          (return_stmt
            (binary_operator
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (integer_literal 1))
              (unary_operator
                (decl_ref_expr
                  (template_ref is_same)
                  (type_ref tuple<_Elements...>)
                  (template_ref __remove_cvref_t)
                  (type_ref _Up)))))))
      (function_template __valid_args
        (template_type_parameter)
        (template_type_parameter)
        (template_type_parameter _Tail)
        (compound_stmt
          (return_stmt
            (binary_operator
              (paren_expr
                (binary_operator
                  (size_of_pack_expr
                    (type_ref _Tail))
                  (integer_literal 2)))
              (size_of_pack_expr
                (type_ref _Elements))))))
      (class_template _UseOtherCtor
        (template_type_parameter _Tuple)
        (template_type_parameter
          (type_ref tuple<_Elements...>))
        (template_type_parameter
          (template_ref __remove_cvref_t)
          (type_ref _Tuple))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template_partial_specialization _UseOtherCtor
        (template_type_parameter _Tuple)
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tuple)
        (template_ref tuple)
        (type_ref _Tp)
        (template_ref tuple)
        (type_ref _Up)
        (cxx_base_specifier __or_<is_convertible<_Tuple, _Tp>, is_constructible<_Tp, _Tuple> >
          (template_ref __or_)
          (template_ref is_convertible)
          (type_ref _Tuple)
          (type_ref _Tp)
          (template_ref is_constructible)
          (type_ref _Tp)
          (type_ref _Tuple)))
      (class_template_partial_specialization _UseOtherCtor
        (template_type_parameter _Tuple)
        (template_type_parameter _Tp)
        (type_ref _Tuple)
        (template_ref tuple)
        (type_ref _Tp)
        (template_ref tuple)
        (type_ref _Tp)
        (cxx_base_specifier std::true_type
          (type_ref std::true_type)))
      (function_template __use_other_ctor
        (template_type_parameter _Tuple)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref _UseOtherCtor)
              (type_ref _Tuple)))))
      (cxx_access_spec_decl)
      (function_template tuple<_Elements...>
        (template_type_parameter _Dummy)
        (template_non_type_parameter
          (template_ref _ImplicitDefaultCtor)
          (decl_ref_expr
            (template_ref is_void)
            (type_ref _Dummy))
          (cxx_bool_literal_expr))
        (type_ref std::tuple::_Inherited)
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Dummy)
        (template_non_type_parameter
          (template_ref _ExplicitDefaultCtor)
          (decl_ref_expr
            (template_ref is_void)
            (type_ref _Dummy))
          (cxx_bool_literal_expr))
        (type_ref std::tuple::_Inherited)
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_non_type_parameter _NotEmpty
          (paren_expr
            (binary_operator
              (size_of_pack_expr
                (type_ref _Elements))
              (integer_literal 1))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _NotEmpty)
          (type_ref _Elements)
          (cxx_bool_literal_expr))
        (parm_decl __elements
          (type_ref _Elements))
        (type_ref std::tuple::_Inherited)
        (pack_expansion_expr
          (decl_ref_expr __elements))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_non_type_parameter _NotEmpty
          (paren_expr
            (binary_operator
              (size_of_pack_expr
                (type_ref _Elements))
              (integer_literal 1))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _NotEmpty)
          (type_ref _Elements)
          (cxx_bool_literal_expr))
        (parm_decl __elements
          (type_ref _Elements))
        (type_ref std::tuple::_Inherited)
        (pack_expansion_expr
          (decl_ref_expr __elements))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __valid_args)
              (type_ref _UElements))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __elements
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UElements))
            (decl_ref_expr __elements)))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __valid_args)
              (type_ref _UElements))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __elements
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UElements))
            (decl_ref_expr __elements)))
        (compound_stmt))
      (constructor tuple<_Elements...>
        (parm_decl
          (type_ref tuple<_Elements...>)))
      (constructor tuple<_Elements...>
        (parm_decl
          (type_ref tuple<_Elements...>)))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_non_type_parameter
          (template_ref _ImplicitDefaultCtor)
          (decl_ref_expr
            (template_ref is_object)
            (type_ref _Alloc))
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_non_type_parameter _NotEmpty
          (paren_expr
            (binary_operator
              (size_of_pack_expr
                (type_ref _Elements))
              (integer_literal 1))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _NotEmpty)
          (type_ref _Elements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __elements
          (type_ref _Elements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (decl_ref_expr __elements))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_non_type_parameter _NotEmpty
          (paren_expr
            (binary_operator
              (size_of_pack_expr
                (type_ref _Elements))
              (integer_literal 1))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _NotEmpty)
          (type_ref _Elements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __elements
          (type_ref _Elements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (decl_ref_expr __elements))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __valid_args)
              (type_ref _UElements))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __elements
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UElements))
            (decl_ref_expr __elements)))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __valid_args)
              (type_ref _UElements))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __elements
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _UElements))
            (decl_ref_expr __elements)))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref tuple<_Elements...>))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (type_ref std::tuple::_Inherited)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref tuple<_Elements...>))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (type_ref std::tuple::_Inherited)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<_Elements...>
        (template_type_parameter _Alloc)
        (template_type_parameter _UElements)
        (template_non_type_parameter _Valid
          (binary_operator
            (paren_expr
              (binary_operator
                (size_of_pack_expr
                  (type_ref _Elements))
                (size_of_pack_expr
                  (type_ref _UElements))))
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __use_other_ctor)
                  (template_ref tuple)
                  (type_ref _UElements))))))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Valid)
          (type_ref _UElements)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (type_ref std::tuple::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _UElements)
          (decl_ref_expr __in))
        (compound_stmt))
      (cxx_method operator=
        (type_ref tuple<_Elements...>)
        (parm_decl __in
          (template_ref conditional)
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __assignable)
              (type_ref _Elements)))
          (type_ref tuple<_Elements...>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (decl_ref_expr __in))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref tuple<_Elements...>)
        (parm_decl __in
          (template_ref conditional)
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __assignable)
              (type_ref _Elements)))
          (type_ref tuple<_Elements...>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _UElements)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _UElements)))
        (type_ref tuple<_Elements...>)
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (decl_ref_expr __in))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _UElements)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _UElements)))
        (type_ref tuple<_Elements...>)
        (parm_decl __in
          (template_ref tuple)
          (type_ref _UElements))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method swap
        (parm_decl __in
          (type_ref tuple<_Elements...>))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (type_ref std::tuple::_Inherited))
            (decl_ref_expr __in)))))
    (class_decl tuple
      (cxx_access_spec_decl)
      (cxx_method swap
        (parm_decl
          (type_ref class std::tuple<>))
        (compound_stmt))
      (constructor tuple)
      (function_template tuple
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl
          (type_ref _Alloc))
        (compound_stmt))
      (function_template tuple
        (template_type_parameter _Alloc)
        (parm_decl
          (type_ref struct std::allocator_arg_t))
        (parm_decl
          (type_ref _Alloc))
        (parm_decl
          (type_ref class std::tuple<>))
        (compound_stmt)))
    (class_template_partial_specialization tuple
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _T1)
      (type_ref _T2)
      (cxx_base_specifier _Tuple_impl<0, _T1, _T2>
        (template_ref _Tuple_impl)
        (integer_literal 0)
        (type_ref _T1)
        (type_ref _T2))
      (typedef_decl _Inherited
        (template_ref _Tuple_impl)
        (integer_literal 0)
        (type_ref _T1)
        (type_ref _T2))
      (type_alias_template_decl _ImplicitDefaultCtor
        (template_non_type_parameter _Dummy)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (type_alias_decl _ImplicitDefaultCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TupleConstraints)
              (decl_ref_expr _Dummy)
              (type_ref _U1)
              (type_ref _U2)))))
      (type_alias_template_decl _ExplicitDefaultCtor
        (template_non_type_parameter _Dummy)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (type_alias_decl _ExplicitDefaultCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TupleConstraints)
              (decl_ref_expr _Dummy)
              (type_ref _U1)
              (type_ref _U2)))))
      (type_alias_template_decl _TCC
        (template_non_type_parameter _Dummy)
        (type_alias_decl _TCC
          (template_ref _TupleConstraints)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)))
      (type_alias_template_decl _ImplicitCtor
        (template_non_type_parameter _Cond)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (type_alias_decl _ImplicitCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Cond)
              (type_ref _U1)
              (type_ref _U2)))))
      (type_alias_template_decl _ExplicitCtor
        (template_non_type_parameter _Cond)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (type_alias_decl _ExplicitCtor
          (template_ref __enable_if_t)
          (call_expr
            (decl_ref_expr
              (template_ref _TCC)
              (decl_ref_expr _Cond)
              (type_ref _U1)
              (type_ref _U2)))))
      (function_template __assignable
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_assignable)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_assignable)
              (type_ref _T2)
              (type_ref _U2)))))
      (function_template __nothrow_assignable
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_nothrow_assignable)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_nothrow_assignable)
              (type_ref _T2)
              (type_ref _U2)))))
      (function_template __nothrow_constructible
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_nothrow_constructible)
              (type_ref _T1)
              (type_ref _U1)
              (template_ref is_nothrow_constructible)
              (type_ref _T2)
              (type_ref _U2)))))
      (cxx_method __nothrow_default_constructible
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref __and_)
              (template_ref is_nothrow_default_constructible)
              (type_ref _T1)
              (template_ref is_nothrow_default_constructible)
              (type_ref _T2)))))
      (function_template __is_alloc_arg
        (template_type_parameter _U1)
        (compound_stmt
          (return_stmt
            (decl_ref_expr
              (template_ref is_same)
              (template_ref __remove_cvref_t)
              (type_ref _U1)
              (type_ref struct std::allocator_arg_t)))))
      (cxx_access_spec_decl)
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ImplicitDefaultCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ExplicitDefaultCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (parm_decl __a1
          (type_ref _T1))
        (parm_decl __a2
          (type_ref _T2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __a1)
        (decl_ref_expr __a2)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (parm_decl __a1
          (type_ref _T1))
        (parm_decl __a2
          (type_ref _T2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __a1)
        (decl_ref_expr __a2)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (unary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __is_alloc_arg)
                (type_ref _U1))))
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __a1
          (type_ref _U1))
        (parm_decl __a2
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __a1))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __a2))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (unary_operator
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __is_alloc_arg)
                (type_ref _U1))))
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __a1
          (type_ref _U1))
        (parm_decl __a2
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __a1))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __a2))
        (compound_stmt))
      (constructor tuple<type-parameter-0-0, type-parameter-0-1>
        (parm_decl
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)))
      (constructor tuple<type-parameter-0-0, type-parameter-0-1>
        (parm_decl
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (member_ref_expr
          (decl_ref_expr __in))
        (member_ref_expr
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (member_ref_expr
          (decl_ref_expr __in))
        (member_ref_expr
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __in)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __in)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_non_type_parameter
          (template_ref _ImplicitDefaultCtor)
          (decl_ref_expr
            (template_ref is_object)
            (type_ref _Alloc))
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __a1
          (type_ref _T1))
        (parm_decl __a2
          (type_ref _T2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (decl_ref_expr __a1)
        (decl_ref_expr __a2)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_non_type_parameter _Dummy
          (cxx_bool_literal_expr))
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (decl_ref_expr _Dummy)
          (type_ref _T1)
          (type_ref _T2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __a1
          (type_ref _T1))
        (parm_decl __a2
          (type_ref _T2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (decl_ref_expr __a1)
        (decl_ref_expr __a2)
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __a1
          (type_ref _U1))
        (parm_decl __a2
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __a1))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __a2))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __a1
          (type_ref _U1))
        (parm_decl __a2
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (decl_ref_expr __a1))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (decl_ref_expr __a2))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (cxx_static_cast_expr
          (template_ref _Tuple_impl)
          (integer_literal 0)
          (type_ref _U1)
          (type_ref _U2)
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (member_ref_expr
          (decl_ref_expr __in))
        (member_ref_expr
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (member_ref_expr
          (decl_ref_expr __in))
        (member_ref_expr
          (decl_ref_expr __in))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ImplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __in)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __in)))
        (compound_stmt))
      (function_template tuple<type-parameter-0-0, type-parameter-0-1>
        (template_type_parameter _Alloc)
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_non_type_parameter
          (template_ref _ExplicitCtor)
          (cxx_bool_literal_expr)
          (type_ref _U1)
          (type_ref _U2)
          (cxx_bool_literal_expr))
        (parm_decl __tag
          (type_ref struct std::allocator_arg_t))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited)
        (decl_ref_expr __tag)
        (decl_ref_expr __a)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U1))
          (member_ref_expr
            (decl_ref_expr __in)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _U2))
          (member_ref_expr
            (decl_ref_expr __in)))
        (compound_stmt))
      (cxx_method operator=
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref conditional)
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __assignable)
              (type_ref _T1)
              (type_ref _T2)))
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (decl_ref_expr __in))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref conditional)
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __assignable)
              (type_ref _T1)
              (type_ref _T2)))
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
          (type_ref struct std::__nonesuch))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _U1)
            (type_ref _U2)))
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (decl_ref_expr __in))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _U1)
            (type_ref _U2)))
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref tuple)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __in)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _U1)
            (type_ref _U2)))
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (cxx_this_expr))
              (unary_operator
                (cxx_this_expr)))
            (member_ref_expr
              (decl_ref_expr __in)))
          (binary_operator
            (call_expr
              (member_ref_expr
                (call_expr
                  (member_ref_expr
                    (cxx_this_expr))
                  (unary_operator
                    (cxx_this_expr))))
              (unary_operator
                (cxx_this_expr)))
            (member_ref_expr
              (decl_ref_expr __in)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _U1)
        (template_type_parameter _U2)
        (template_ref __enable_if_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref __assignable)
            (type_ref _U1)
            (type_ref _U2)))
        (type_ref tuple<type-parameter-0-0, type-parameter-0-1>)
        (parm_decl __in
          (template_ref pair)
          (type_ref _U1)
          (type_ref _U2))
        (compound_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (cxx_this_expr))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _U1))
              (member_ref_expr
                (decl_ref_expr __in))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (call_expr
                  (member_ref_expr
                    (cxx_this_expr))
                  (unary_operator
                    (cxx_this_expr))))
              (unary_operator
                (cxx_this_expr)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _U2))
              (member_ref_expr
                (decl_ref_expr __in))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method swap
        (parm_decl __in
          (type_ref tuple<type-parameter-0-0, type-parameter-0-1>))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (type_ref std::tuple<type-parameter-0-0, type-parameter-0-1>::_Inherited))
            (decl_ref_expr __in)))))
    (class_template_partial_specialization tuple_size
      (template_type_parameter _Elements)
      (template_ref tuple)
      (type_ref _Elements)
      (cxx_base_specifier integral_constant<std::size_t, sizeof...(_Elements)>
        (template_ref integral_constant)
        (type_ref std::size_t)
        (size_of_pack_expr
          (type_ref _Elements))))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (template_type_parameter _Tail)
      (decl_ref_expr __i)
      (template_ref tuple)
      (type_ref _Head)
      (type_ref _Tail)
      (cxx_base_specifier tuple_element<__i - 1, tuple<_Tail...> >
        (template_ref tuple_element)
        (binary_operator
          (decl_ref_expr __i)
          (integer_literal 1))
        (template_ref tuple)
        (type_ref _Tail)))
    (class_template_partial_specialization tuple_element
      (template_type_parameter _Head)
      (template_type_parameter _Tail)
      (integer_literal 0)
      (template_ref tuple)
      (type_ref _Head)
      (type_ref _Tail)
      (typedef_decl type
        (type_ref _Head)))
    (class_template_partial_specialization tuple_element
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (decl_ref_expr __i)
      (template_ref tuple)
      (static_assert
        (binary_operator
          (decl_ref_expr __i)
          (decl_ref_expr value
            (template_ref tuple_size)
            (template_ref tuple)))
        (string_literal "tuple index must be in range")))
    (function_template __get_helper
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (template_type_parameter _Tail)
      (type_ref _Head)
      (parm_decl __t
        (template_ref _Tuple_impl)
        (decl_ref_expr __i)
        (type_ref _Head)
        (type_ref _Tail))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr __i)
              (type_ref _Head)
              (type_ref _Tail))
            (decl_ref_expr __t)))))
    (function_template __get_helper
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Head)
      (template_type_parameter _Tail)
      (type_ref _Head)
      (parm_decl __t
        (template_ref _Tuple_impl)
        (decl_ref_expr __i)
        (type_ref _Head)
        (type_ref _Tail))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (template_ref _Tuple_impl)
              (decl_ref_expr __i)
              (type_ref _Head)
              (type_ref _Tail))
            (decl_ref_expr __t)))))
    (function_template __get_helper
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Types)
      (template_ref __enable_if_t)
      (paren_expr
        (binary_operator
          (decl_ref_expr __i)
          (size_of_pack_expr
            (type_ref _Types))))
      (parm_decl
        (template_ref tuple)
        (type_ref _Types)))
    (function_template get
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Elements)
      (template_ref __tuple_element_t)
      (decl_ref_expr __i)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Elements))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __get_helper)
              (decl_ref_expr __i))
            (decl_ref_expr __t)))))
    (function_template get
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Elements)
      (template_ref __tuple_element_t)
      (decl_ref_expr __i)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Elements))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __get_helper)
              (decl_ref_expr __i))
            (decl_ref_expr __t)))))
    (function_template get
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Elements)
      (template_ref __tuple_element_t)
      (decl_ref_expr __i)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Elements))
      (compound_stmt
        (decl_stmt
          (typedef_decl __element_type
            (template_ref __tuple_element_t)
            (decl_ref_expr __i)
            (template_ref tuple)
            (type_ref _Elements)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref __element_type))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __get_helper)
                (decl_ref_expr __i))
              (decl_ref_expr __t))))))
    (function_template get
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_type_parameter _Elements)
      (template_ref __tuple_element_t)
      (decl_ref_expr __i)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Elements))
      (compound_stmt
        (decl_stmt
          (typedef_decl __element_type
            (template_ref __tuple_element_t)
            (decl_ref_expr __i)
            (template_ref tuple)
            (type_ref _Elements)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref __element_type))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __get_helper)
                (decl_ref_expr __i))
              (decl_ref_expr __t))))))
    (function_template __find_uniq_type_in_pack
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref std::size_t)
      (compound_stmt
        (decl_stmt
          (var_decl __sz
            (type_ref std::size_t)
            (size_of_pack_expr
              (type_ref _Types))))
        (decl_stmt
          (var_decl __found
            (decl_ref_expr __sz)
            (init_list_expr
              (pack_expansion_expr
                (type_ref _Tp)
                (type_ref _Types)))))
        (decl_stmt
          (var_decl __n
            (type_ref std::size_t)
            (decl_ref_expr __sz)))
        (for_stmt
          (decl_stmt
            (var_decl __i
              (type_ref std::size_t)
              (integer_literal 0)))
          (binary_operator
            (decl_ref_expr __i)
            (decl_ref_expr __sz))
          (unary_operator
            (decl_ref_expr __i))
          (compound_stmt
            (if_stmt
              (array_subscript_expr
                (decl_ref_expr __found)
                (decl_ref_expr __i))
              (compound_stmt
                (if_stmt
                  (binary_operator
                    (decl_ref_expr __n)
                    (decl_ref_expr __sz))
                  (return_stmt
                    (decl_ref_expr __sz)))
                (binary_operator
                  (decl_ref_expr __n)
                  (decl_ref_expr __i))))))
        (return_stmt
          (decl_ref_expr __n))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Types))
      (compound_stmt
        (decl_stmt
          (var_decl __idx
            (type_ref std::size_t)
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __find_uniq_type_in_pack)
                (type_ref _Tp)
                (type_ref _Types)))))
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr __idx)
              (size_of_pack_expr
                (type_ref _Types)))
            (string_literal "the type T in std::get<T> must occur exactly once in the tuple")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __get_helper)
              (decl_ref_expr __idx))
            (decl_ref_expr __t)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Types))
      (compound_stmt
        (decl_stmt
          (var_decl __idx
            (type_ref std::size_t)
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __find_uniq_type_in_pack)
                (type_ref _Tp)
                (type_ref _Types)))))
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr __idx)
              (size_of_pack_expr
                (type_ref _Types)))
            (string_literal "the type T in std::get<T> must occur exactly once in the tuple")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __get_helper)
                (decl_ref_expr __idx))
              (decl_ref_expr __t))))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Types))
      (compound_stmt
        (decl_stmt
          (var_decl __idx
            (type_ref std::size_t)
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __find_uniq_type_in_pack)
                (type_ref _Tp)
                (type_ref _Types)))))
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr __idx)
              (size_of_pack_expr
                (type_ref _Types)))
            (string_literal "the type T in std::get<T> must occur exactly once in the tuple")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __get_helper)
              (decl_ref_expr __idx))
            (decl_ref_expr __t)))))
    (function_template get
      (template_type_parameter _Tp)
      (template_type_parameter _Types)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _Types))
      (compound_stmt
        (decl_stmt
          (var_decl __idx
            (type_ref std::size_t)
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref __find_uniq_type_in_pack)
                (type_ref _Tp)
                (type_ref _Types)))))
        (decl_stmt
          (static_assert
            (binary_operator
              (decl_ref_expr __idx)
              (size_of_pack_expr
                (type_ref _Types)))
            (string_literal "the type T in std::get<T> must occur exactly once in the tuple")))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __get_helper)
                (decl_ref_expr __idx))
              (decl_ref_expr __t))))))
    (class_template __tuple_compare
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_non_type_parameter __i
        (type_ref std::size_t))
      (template_non_type_parameter __size
        (type_ref std::size_t))
      (cxx_method __eq
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (call_expr
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref get)
                      (decl_ref_expr __i))
                    (decl_ref_expr __t))
                  (decl_ref_expr
                    (overloaded_decl_ref operator==))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref get)
                      (decl_ref_expr __i))
                    (decl_ref_expr __u))))
              (call_expr
                (decl_ref_expr
                  (template_ref __tuple_compare)
                  (type_ref _Tp)
                  (type_ref _Up)
                  (binary_operator
                    (decl_ref_expr __i)
                    (integer_literal 1))
                  (decl_ref_expr __size))
                (decl_ref_expr __t)
                (decl_ref_expr __u))))))
      (cxx_method __less
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (call_expr
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref get)
                      (decl_ref_expr __i))
                    (decl_ref_expr __t))
                  (decl_ref_expr
                    (overloaded_decl_ref operator<))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref get)
                      (decl_ref_expr __i))
                    (decl_ref_expr __u))))
              (paren_expr
                (binary_operator
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr
                          (decl_ref_expr
                            (namespace_ref std)
                            (overloaded_decl_ref get)
                            (decl_ref_expr __i))
                          (decl_ref_expr __u))
                        (decl_ref_expr
                          (overloaded_decl_ref operator<))
                        (call_expr
                          (decl_ref_expr
                            (namespace_ref std)
                            (overloaded_decl_ref get)
                            (decl_ref_expr __i))
                          (decl_ref_expr __t)))))
                  (call_expr
                    (decl_ref_expr
                      (template_ref __tuple_compare)
                      (type_ref _Tp)
                      (type_ref _Up)
                      (binary_operator
                        (decl_ref_expr __i)
                        (integer_literal 1))
                      (decl_ref_expr __size))
                    (decl_ref_expr __t)
                    (decl_ref_expr __u)))))))))
    (class_template_partial_specialization __tuple_compare
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_non_type_parameter __size
        (type_ref std::size_t))
      (type_ref _Tp)
      (type_ref _Up)
      (decl_ref_expr __size)
      (decl_ref_expr __size)
      (cxx_method __eq
        (parm_decl
          (type_ref _Tp))
        (parm_decl
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr))))
      (cxx_method __less
        (parm_decl
          (type_ref _Tp))
        (parm_decl
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (cxx_bool_literal_expr)))))
    (function_template operator==
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (size_of_pack_expr
                (type_ref _TElements))
              (size_of_pack_expr
                (type_ref _UElements)))
            (string_literal "tuple objects can only be compared if they have equal sizes.")))
        (decl_stmt
          (type_alias_decl __compare
            (template_ref __tuple_compare)
            (template_ref tuple)
            (type_ref _TElements)
            (template_ref tuple)
            (type_ref _UElements)
            (integer_literal 0)
            (size_of_pack_expr
              (type_ref _TElements))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __compare))
            (decl_ref_expr __t)
            (decl_ref_expr __u)))))
    (function_template operator<
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (size_of_pack_expr
                (type_ref _TElements))
              (size_of_pack_expr
                (type_ref _UElements)))
            (string_literal "tuple objects can only be compared if they have equal sizes.")))
        (decl_stmt
          (type_alias_decl __compare
            (template_ref __tuple_compare)
            (template_ref tuple)
            (type_ref _TElements)
            (template_ref tuple)
            (type_ref _UElements)
            (integer_literal 0)
            (size_of_pack_expr
              (type_ref _TElements))))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __compare))
            (decl_ref_expr __t)
            (decl_ref_expr __u)))))
    (function_template operator!=
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __t)
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (decl_ref_expr __u)))))))
    (function_template operator>
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __u)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __t)))))
    (function_template operator<=
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __u)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __t)))))))
    (function_template operator>=
      (template_type_parameter _TElements)
      (template_type_parameter _UElements)
      (parm_decl __t
        (template_ref tuple)
        (type_ref _TElements))
      (parm_decl __u
        (template_ref tuple)
        (type_ref _UElements))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __t)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __u)))))))
    (function_template make_tuple
      (template_type_parameter _Elements)
      (template_ref tuple)
      (template_ref __decay_and_strip)
      (type_ref _Elements)
      (parm_decl __args
        (type_ref _Elements))
      (compound_stmt
        (decl_stmt
          (typedef_decl __result_type
            (template_ref tuple)
            (template_ref __decay_and_strip)
            (type_ref _Elements)))
        (return_stmt
          (call_expr
            (type_ref __result_type)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Elements))
                (decl_ref_expr __args)))))))
    (function_template forward_as_tuple
      (template_type_parameter _Elements)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __args
        (type_ref _Elements))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref tuple)
            (type_ref _Elements)
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Elements))
                (decl_ref_expr __args)))))))
    (class_template __make_tuple_impl
      (template_non_type_parameter
        (type_ref std::size_t))
      (template_type_parameter)
      (template_type_parameter)
      (template_non_type_parameter
        (type_ref std::size_t)))
    (class_template_partial_specialization __make_tuple_impl
      (template_non_type_parameter _Idx
        (type_ref std::size_t))
      (template_type_parameter _Tuple)
      (template_type_parameter _Tp)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (decl_ref_expr _Idx)
      (template_ref tuple)
      (type_ref _Tp)
      (type_ref _Tuple)
      (decl_ref_expr _Nm)
      (cxx_base_specifier __make_tuple_impl<_Idx + 1, tuple<_Tp..., __tuple_element_t<_Idx, _Tuple> >, _Tuple, _Nm>
        (template_ref __make_tuple_impl)
        (binary_operator
          (decl_ref_expr _Idx)
          (integer_literal 1))
        (template_ref tuple)
        (type_ref _Tp)
        (template_ref __tuple_element_t)
        (decl_ref_expr _Idx)
        (type_ref _Tuple)
        (type_ref _Tuple)
        (decl_ref_expr _Nm)))
    (class_template_partial_specialization __make_tuple_impl
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_type_parameter _Tuple)
      (template_type_parameter _Tp)
      (decl_ref_expr _Nm)
      (template_ref tuple)
      (type_ref _Tp)
      (type_ref _Tuple)
      (decl_ref_expr _Nm)
      (typedef_decl __type
        (template_ref tuple)
        (type_ref _Tp)))
    (class_template __do_make_tuple
      (template_type_parameter _Tuple)
      (cxx_base_specifier __make_tuple_impl<0, tuple<>, _Tuple, tuple_size<_Tuple>::value>
        (template_ref __make_tuple_impl)
        (integer_literal 0)
        (template_ref tuple)
        (type_ref _Tuple)
        (decl_ref_expr
          (template_ref tuple_size)
          (type_ref _Tuple))))
    (class_template __make_tuple
      (template_type_parameter _Tuple)
      (cxx_base_specifier __do_make_tuple<__remove_cvref_t<_Tuple> >
        (template_ref __do_make_tuple)
        (template_ref __remove_cvref_t)
        (type_ref _Tuple)))
    (class_template __combine_tuples
      (template_type_parameter))
    (struct_decl __combine_tuples
      (typedef_decl __type
        (template_ref tuple)))
    (class_template_partial_specialization __combine_tuples
      (template_type_parameter _Ts)
      (template_ref tuple)
      (type_ref _Ts)
      (typedef_decl __type
        (template_ref tuple)
        (type_ref _Ts)))
    (class_template_partial_specialization __combine_tuples
      (template_type_parameter _T1s)
      (template_type_parameter _T2s)
      (template_type_parameter _Rem)
      (template_ref tuple)
      (type_ref _T1s)
      (template_ref tuple)
      (type_ref _T2s)
      (type_ref _Rem)
      (typedef_decl __type
        (template_ref __combine_tuples)
        (template_ref tuple)
        (type_ref _T1s)
        (type_ref _T2s)
        (type_ref _Rem)))
    (class_template __tuple_cat_result
      (template_type_parameter _Tpls)
      (typedef_decl __type
        (template_ref __combine_tuples)
        (template_ref __make_tuple)
        (type_ref _Tpls)))
    (class_template __make_1st_indices
      (template_type_parameter))
    (struct_decl __make_1st_indices
      (typedef_decl __type
        (template_ref _Index_tuple)))
    (class_template_partial_specialization __make_1st_indices
      (template_type_parameter _Tp)
      (template_type_parameter _Tpls)
      (type_ref _Tp)
      (type_ref _Tpls)
      (typedef_decl __type
        (template_ref _Build_index_tuple)
        (decl_ref_expr
          (template_ref tuple_size)
          (template_ref remove_reference)
          (type_ref _Tp))))
    (class_template __tuple_concater
      (template_type_parameter _Ret)
      (template_type_parameter _Indices)
      (template_type_parameter _Tpls))
    (class_template_partial_specialization __tuple_concater
      (template_type_parameter _Ret)
      (template_non_type_parameter _Is
        (type_ref std::size_t))
      (template_type_parameter _Tp)
      (template_type_parameter _Tpls)
      (type_ref _Ret)
      (template_ref _Index_tuple)
      (pack_expansion_expr
        (decl_ref_expr _Is))
      (type_ref _Tp)
      (type_ref _Tpls)
      (function_template _S_do
        (template_type_parameter _Us)
        (type_ref _Ret)
        (parm_decl __tp
          (type_ref _Tp))
        (parm_decl __tps
          (type_ref _Tpls))
        (parm_decl __us
          (type_ref _Us))
        (compound_stmt
          (decl_stmt
            (typedef_decl __idx
              (template_ref __make_1st_indices)
              (type_ref _Tpls)))
          (decl_stmt
            (typedef_decl __next
              (template_ref __tuple_concater)
              (type_ref _Ret)
              (type_ref __idx)
              (type_ref _Tpls)))
          (return_stmt
            (call_expr
              (decl_ref_expr
                (type_ref __next))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tpls))
                  (decl_ref_expr __tps)))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Us))
                  (decl_ref_expr __us)))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref get)
                    (decl_ref_expr _Is))
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref forward)
                      (type_ref _Tp))
                    (decl_ref_expr __tp)))))))))
    (class_template_partial_specialization __tuple_concater
      (template_type_parameter _Ret)
      (type_ref _Ret)
      (template_ref _Index_tuple)
      (function_template _S_do
        (template_type_parameter _Us)
        (type_ref _Ret)
        (parm_decl __us
          (type_ref _Us))
        (compound_stmt
          (return_stmt
            (call_expr
              (type_ref _Ret)
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Us))
                  (decl_ref_expr __us))))))))
    (function_template tuple_cat
      (template_type_parameter _Tpls)
      (template_type_parameter
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __is_tuple_like)
          (type_ref _Tpls)))
      (parm_decl __tpls
        (type_ref _Tpls))
      (template_ref __tuple_cat_result)
      (type_ref _Tpls)
      (compound_stmt
        (decl_stmt
          (typedef_decl __ret
            (template_ref __tuple_cat_result)
            (type_ref _Tpls)))
        (decl_stmt
          (typedef_decl __idx
            (template_ref __make_1st_indices)
            (type_ref _Tpls)))
        (decl_stmt
          (typedef_decl __concater
            (template_ref __tuple_concater)
            (type_ref __ret)
            (type_ref __idx)
            (type_ref _Tpls)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (type_ref __concater))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tpls))
                (decl_ref_expr __tpls)))))))
    (function_template tie
      (template_type_parameter _Elements)
      (template_ref tuple)
      (type_ref _Elements)
      (parm_decl __args
        (type_ref _Elements))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref tuple)
            (type_ref _Elements)
            (pack_expansion_expr
              (decl_ref_expr __args))))))
    (function_template swap
      (template_type_parameter _Elements)
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __and_)
        (template_ref __is_swappable)
        (type_ref _Elements))
      (parm_decl __x
        (template_ref tuple)
        (type_ref _Elements))
      (parm_decl __y
        (template_ref tuple)
        (type_ref _Elements))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __x))
          (decl_ref_expr __y))))
    (function_template swap
      (template_type_parameter _Elements)
      (template_ref enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __is_swappable)
          (type_ref _Elements)))
      (parm_decl
        (template_ref tuple)
        (type_ref _Elements))
      (parm_decl
        (template_ref tuple)
        (type_ref _Elements)))
    (struct_decl _Swallow_assign
      (function_template operator=
        (template_type_parameter _Tp)
        (type_ref struct std::_Swallow_assign)
        (parm_decl
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr))))))
    (var_decl ignore
      (type_ref struct std::_Swallow_assign)
      (init_list_expr))
    (class_template_partial_specialization uses_allocator
      (template_type_parameter _Types)
      (template_type_parameter _Alloc)
      (template_ref tuple)
      (type_ref _Types)
      (type_ref _Alloc)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (function_template pair<_T1, _T2>
      (template_type_parameter _Args1)
      (template_type_parameter _Args2)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref pair)
      (type_ref _T1)
      (type_ref _T2)
      (parm_decl
        (type_ref struct std::piecewise_construct_t))
      (parm_decl __first
        (template_ref tuple)
        (type_ref _Args1))
      (parm_decl __second
        (template_ref tuple)
        (type_ref _Args2))
      (type_ref pair<_T1, _T2>)
      (decl_ref_expr __first)
      (decl_ref_expr __second)
      (call_expr
        (template_ref _Build_index_tuple)
        (size_of_pack_expr
          (type_ref _Args1)))
      (call_expr
        (template_ref _Build_index_tuple)
        (size_of_pack_expr
          (type_ref _Args2)))
      (compound_stmt))
    (function_template pair<_T1, _T2>
      (template_type_parameter _Args1)
      (template_non_type_parameter _Indexes1
        (type_ref std::size_t))
      (template_type_parameter _Args2)
      (template_non_type_parameter _Indexes2
        (type_ref std::size_t))
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (template_ref pair)
      (type_ref _T1)
      (type_ref _T2)
      (parm_decl __tuple1
        (template_ref tuple)
        (type_ref _Args1))
      (parm_decl __tuple2
        (template_ref tuple)
        (type_ref _Args2))
      (parm_decl
        (template_ref _Index_tuple)
        (pack_expansion_expr
          (decl_ref_expr _Indexes1)))
      (parm_decl
        (template_ref _Index_tuple)
        (pack_expansion_expr
          (decl_ref_expr _Indexes2)))
      (member_ref first)
      (pack_expansion_expr
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Args1))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref get)
              (decl_ref_expr _Indexes1))
            (decl_ref_expr __tuple1))))
      (member_ref second)
      (pack_expansion_expr
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Args2))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref get)
              (decl_ref_expr _Indexes2))
            (decl_ref_expr __tuple2))))
      (compound_stmt)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stl_function.h
  (namespace std
    (visibility_attr default)
    (class_template unary_function
      (template_type_parameter _Arg)
      (template_type_parameter _Result)
      (typedef_decl argument_type
        (type_ref _Arg))
      (typedef_decl result_type
        (type_ref _Result)))
    (class_template binary_function
      (template_type_parameter _Arg1)
      (template_type_parameter _Arg2)
      (template_type_parameter _Result)
      (typedef_decl first_argument_type
        (type_ref _Arg1))
      (typedef_decl second_argument_type
        (type_ref _Arg2))
      (typedef_decl result_type
        (type_ref _Result)))
    (struct_decl __is_transparent)
    (class_template plus
      (template_type_parameter _Tp))
    (class_template minus
      (template_type_parameter _Tp))
    (class_template multiplies
      (template_type_parameter _Tp))
    (class_template divides
      (template_type_parameter _Tp))
    (class_template modulus
      (template_type_parameter _Tp))
    (class_template negate
      (template_type_parameter _Tp))
    (class_template plus
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (decl_ref_expr __y))))))
    (class_template minus
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (decl_ref_expr __y))))))
    (class_template multiplies
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template divides
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template modulus
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template negate
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Tp>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator-)))))))
    (struct_decl plus
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator+))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator+))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl minus
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator-))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl multiplies
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl divides
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl modulus
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl negate
      (function_template operator()
        (template_type_parameter _Tp)
        (parm_decl __t
          (type_ref _Tp))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator-)))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator-))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (class_template equal_to
      (template_type_parameter _Tp))
    (class_template not_equal_to
      (template_type_parameter _Tp))
    (class_template greater
      (template_type_parameter _Tp))
    (class_template less
      (template_type_parameter _Tp))
    (class_template greater_equal
      (template_type_parameter _Tp))
    (class_template less_equal
      (template_type_parameter _Tp))
    (class_template equal_to
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (decl_ref_expr __y))))))
    (class_template not_equal_to
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (decl_ref_expr __y))))))
    (class_template greater
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (decl_ref_expr __y))))))
    (class_template less
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (decl_ref_expr __y))))))
    (class_template greater_equal
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator>=))
              (decl_ref_expr __y))))))
    (class_template less_equal
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr __x)
              (decl_ref_expr
                (overloaded_decl_ref operator<=))
              (decl_ref_expr __y))))))
    (class_template_partial_specialization greater
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier binary_function<_Tp *, _Tp *, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (if_stmt
            (call_expr __builtin_is_constant_evaluated
              (decl_ref_expr __builtin_is_constant_evaluated))
            (return_stmt
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator>))
                (decl_ref_expr __y))))
          (return_stmt
            (binary_operator
              (cstyle_cast_expr
                (decl_ref_expr __x))
              (cstyle_cast_expr
                (decl_ref_expr __y)))))))
    (class_template_partial_specialization less
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier binary_function<_Tp *, _Tp *, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (if_stmt
            (call_expr __builtin_is_constant_evaluated
              (decl_ref_expr __builtin_is_constant_evaluated))
            (return_stmt
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y))))
          (return_stmt
            (binary_operator
              (cstyle_cast_expr
                (decl_ref_expr __x))
              (cstyle_cast_expr
                (decl_ref_expr __y)))))))
    (class_template_partial_specialization greater_equal
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier binary_function<_Tp *, _Tp *, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (if_stmt
            (call_expr __builtin_is_constant_evaluated
              (decl_ref_expr __builtin_is_constant_evaluated))
            (return_stmt
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator>=))
                (decl_ref_expr __y))))
          (return_stmt
            (binary_operator
              (cstyle_cast_expr
                (decl_ref_expr __x))
              (cstyle_cast_expr
                (decl_ref_expr __y)))))))
    (class_template_partial_specialization less_equal
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier binary_function<_Tp *, _Tp *, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (if_stmt
            (call_expr __builtin_is_constant_evaluated
              (decl_ref_expr __builtin_is_constant_evaluated))
            (return_stmt
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<=))
                (decl_ref_expr __y))))
          (return_stmt
            (binary_operator
              (cstyle_cast_expr
                (decl_ref_expr __x))
              (cstyle_cast_expr
                (decl_ref_expr __y)))))))
    (struct_decl equal_to
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator==))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl not_equal_to
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator!=))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl greater
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator>))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_cmp))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))
              (call_expr
                (template_ref __ptr_cmp)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))))))
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref greater)
                (template_ref common_type_t)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))
              (decl_ref_expr __t)
              (decl_ref_expr __u)))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent))
      (cxx_access_spec_decl)
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::false_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator>))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::true_type))
        (compound_stmt
          (return_stmt
            (call_expr operator()
              (call_expr greater
                (template_ref greater))
              (decl_ref_expr operator())
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tp))
                  (decl_ref_expr __t)))
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Up))
                  (decl_ref_expr __u)))))))
      (class_template __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier std::true_type
          (type_ref std::true_type)))
      (class_template_partial_specialization __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (member_ref_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Tp))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __not_overloaded2<_Tp, _Up>
          (template_ref __not_overloaded2)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref operator>))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Tp)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (type_alias_template_decl __ptr_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl __ptr_cmp
          (template_ref __and_)
          (template_ref __not_overloaded)
          (type_ref _Tp)
          (type_ref _Up)
          (template_ref is_convertible)
          (type_ref _Tp)
          (template_ref is_convertible)
          (type_ref _Up))))
    (struct_decl less
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator<))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_cmp))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))
              (call_expr
                (template_ref __ptr_cmp)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))))))
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref less)
                (template_ref common_type_t)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))
              (decl_ref_expr __t)
              (decl_ref_expr __u)))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent))
      (cxx_access_spec_decl)
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::false_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::true_type))
        (compound_stmt
          (return_stmt
            (call_expr operator()
              (call_expr less
                (template_ref less))
              (decl_ref_expr operator())
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tp))
                  (decl_ref_expr __t)))
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Up))
                  (decl_ref_expr __u)))))))
      (class_template __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier std::true_type
          (type_ref std::true_type)))
      (class_template_partial_specialization __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (member_ref_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Tp))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __not_overloaded2<_Tp, _Up>
          (template_ref __not_overloaded2)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref operator<))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Tp)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (type_alias_template_decl __ptr_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl __ptr_cmp
          (template_ref __and_)
          (template_ref __not_overloaded)
          (type_ref _Tp)
          (type_ref _Up)
          (template_ref is_convertible)
          (type_ref _Tp)
          (template_ref is_convertible)
          (type_ref _Up))))
    (struct_decl greater_equal
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator>=))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_cmp))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))
              (call_expr
                (template_ref __ptr_cmp)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))))))
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref greater_equal)
                (template_ref common_type_t)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))
              (decl_ref_expr __t)
              (decl_ref_expr __u)))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent))
      (cxx_access_spec_decl)
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::false_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator>=))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::true_type))
        (compound_stmt
          (return_stmt
            (call_expr operator()
              (call_expr greater_equal
                (template_ref greater_equal))
              (decl_ref_expr operator())
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tp))
                  (decl_ref_expr __t)))
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Up))
                  (decl_ref_expr __u)))))))
      (class_template __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier std::true_type
          (type_ref std::true_type)))
      (class_template_partial_specialization __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (member_ref_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Tp))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __not_overloaded2<_Tp, _Up>
          (template_ref __not_overloaded2)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref operator>=))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Tp)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (type_alias_template_decl __ptr_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl __ptr_cmp
          (template_ref __and_)
          (template_ref __not_overloaded)
          (type_ref _Tp)
          (type_ref _Up)
          (template_ref is_convertible)
          (type_ref _Tp)
          (template_ref is_convertible)
          (type_ref _Up))))
    (struct_decl less_equal
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (call_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (decl_ref_expr
            (overloaded_decl_ref operator<=))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref _S_cmp))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))
              (call_expr
                (template_ref __ptr_cmp)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))))))
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref less_equal)
                (template_ref common_type_t)
                (type_ref _Tp)
                (type_ref _Up)
                (init_list_expr))
              (decl_ref_expr __t)
              (decl_ref_expr __u)))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent))
      (cxx_access_spec_decl)
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::false_type))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (decl_ref_expr
                (overloaded_decl_ref operator<=))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (function_template _S_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (parm_decl
          (type_ref std::true_type))
        (compound_stmt
          (return_stmt
            (call_expr operator()
              (call_expr less_equal
                (template_ref less_equal))
              (decl_ref_expr operator())
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Tp))
                  (decl_ref_expr __t)))
              (cxx_static_cast_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Up))
                  (decl_ref_expr __u)))))))
      (class_template __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier std::true_type
          (type_ref std::true_type)))
      (class_template_partial_specialization __not_overloaded2
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (member_ref_expr
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Tp))))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (template_type_parameter)
        (cxx_base_specifier __not_overloaded2<_Tp, _Up>
          (template_ref __not_overloaded2)
          (type_ref _Tp)
          (type_ref _Up)))
      (class_template_partial_specialization __not_overloaded
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_ref _Tp)
        (type_ref _Up)
        (template_ref __void_t)
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref operator<=))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Tp)))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref declval)
              (type_ref _Up))))
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (type_alias_template_decl __ptr_cmp
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (type_alias_decl __ptr_cmp
          (template_ref __and_)
          (template_ref __not_overloaded)
          (type_ref _Tp)
          (type_ref _Up)
          (template_ref is_convertible)
          (type_ref _Tp)
          (template_ref is_convertible)
          (type_ref _Up))))
    (class_template logical_and
      (template_type_parameter _Tp))
    (class_template logical_or
      (template_type_parameter _Tp))
    (class_template logical_not
      (template_type_parameter _Tp))
    (class_template logical_and
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template logical_or
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template logical_not
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Bool>
        (template_ref unary_function)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (decl_ref_expr __x))))))
    (struct_decl logical_and
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl logical_or
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl logical_not
      (function_template operator()
        (template_type_parameter _Tp)
        (parm_decl __t
          (type_ref _Tp))
        (unary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t)))
        (compound_stmt
          (return_stmt
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (class_template bit_and
      (template_type_parameter _Tp))
    (class_template bit_or
      (template_type_parameter _Tp))
    (class_template bit_xor
      (template_type_parameter _Tp))
    (class_template bit_not
      (template_type_parameter _Tp))
    (class_template bit_and
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template bit_or
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template bit_xor
      (template_type_parameter _Tp)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Tp>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (parm_decl __y
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (class_template bit_not
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Tp>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (unary_operator
              (decl_ref_expr __x))))))
    (struct_decl bit_and
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl bit_or
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl bit_xor
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __t
          (type_ref _Tp))
        (parm_decl __u
          (type_ref _Up))
        (binary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __u)))
        (compound_stmt
          (return_stmt
            (binary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Up))
                (decl_ref_expr __u))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (struct_decl bit_not
      (function_template operator()
        (template_type_parameter _Tp)
        (parm_decl __t
          (type_ref _Tp))
        (unary_operator
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t)))
        (compound_stmt
          (return_stmt
            (unary_operator
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t))))))
      (typedef_decl is_transparent
        (type_ref struct std::__is_transparent)))
    (class_template unary_negate
      (template_type_parameter _Predicate)
      (cxx_base_specifier unary_function<typename _Predicate::argument_type, _Bool>
        (template_ref unary_function)
        (type_ref _Predicate))
      (cxx_access_spec_decl)
      (field_decl _M_pred
        (type_ref _Predicate))
      (cxx_access_spec_decl)
      (constructor unary_negate<_Predicate>
        (parm_decl __x
          (type_ref _Predicate))
        (member_ref _M_pred)
        (decl_ref_expr __x)
        (compound_stmt))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Predicate))
        (compound_stmt
          (return_stmt
            (unary_operator
              (call_expr _M_pred
                (member_ref_expr _M_pred)
                (decl_ref_expr __x)))))))
    (function_template not1
      (template_type_parameter _Predicate)
      (template_ref unary_negate)
      (type_ref _Predicate)
      (parm_decl __pred
        (type_ref _Predicate))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref unary_negate)
            (type_ref _Predicate)
            (decl_ref_expr __pred)))))
    (class_template binary_negate
      (template_type_parameter _Predicate)
      (cxx_base_specifier binary_function<typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, _Bool>
        (template_ref binary_function)
        (type_ref _Predicate)
        (type_ref _Predicate))
      (cxx_access_spec_decl)
      (field_decl _M_pred
        (type_ref _Predicate))
      (cxx_access_spec_decl)
      (constructor binary_negate<_Predicate>
        (parm_decl __x
          (type_ref _Predicate))
        (member_ref _M_pred)
        (decl_ref_expr __x)
        (compound_stmt))
      (cxx_method operator()
        (parm_decl __x
          (type_ref _Predicate))
        (parm_decl __y
          (type_ref _Predicate))
        (compound_stmt
          (return_stmt
            (unary_operator
              (call_expr _M_pred
                (member_ref_expr _M_pred)
                (decl_ref_expr __x)
                (decl_ref_expr __y)))))))
    (function_template not2
      (template_type_parameter _Predicate)
      (template_ref binary_negate)
      (type_ref _Predicate)
      (parm_decl __pred
        (type_ref _Predicate))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref binary_negate)
            (type_ref _Predicate)
            (decl_ref_expr __pred)))))
    (class_template pointer_to_unary_function
      (template_type_parameter _Arg)
      (template_type_parameter _Result)
      (cxx_base_specifier unary_function<_Arg, _Result>
        (template_ref unary_function)
        (type_ref _Arg)
        (type_ref _Result))
      (cxx_access_spec_decl)
      (field_decl _M_ptr
        (type_ref _Result)
        (parm_decl
          (type_ref _Arg)))
      (cxx_access_spec_decl)
      (constructor pointer_to_unary_function<_Arg, _Result>
        (compound_stmt))
      (constructor pointer_to_unary_function<_Arg, _Result>
        (parm_decl __x
          (type_ref _Result)
          (parm_decl
            (type_ref _Arg)))
        (member_ref _M_ptr)
        (decl_ref_expr __x)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Result)
        (parm_decl __x
          (type_ref _Arg))
        (compound_stmt
          (return_stmt
            (call_expr _M_ptr
              (member_ref_expr _M_ptr)
              (decl_ref_expr __x))))))
    (function_template ptr_fun
      (template_type_parameter _Arg)
      (template_type_parameter _Result)
      (template_ref pointer_to_unary_function)
      (type_ref _Arg)
      (type_ref _Result)
      (parm_decl __x
        (type_ref _Result)
        (parm_decl
          (type_ref _Arg)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref pointer_to_unary_function)
            (type_ref _Arg)
            (type_ref _Result)
            (decl_ref_expr __x)))))
    (class_template pointer_to_binary_function
      (template_type_parameter _Arg1)
      (template_type_parameter _Arg2)
      (template_type_parameter _Result)
      (cxx_base_specifier binary_function<_Arg1, _Arg2, _Result>
        (template_ref binary_function)
        (type_ref _Arg1)
        (type_ref _Arg2)
        (type_ref _Result))
      (cxx_access_spec_decl)
      (field_decl _M_ptr
        (type_ref _Result)
        (parm_decl
          (type_ref _Arg1))
        (parm_decl
          (type_ref _Arg2)))
      (cxx_access_spec_decl)
      (constructor pointer_to_binary_function<_Arg1, _Arg2, _Result>
        (compound_stmt))
      (constructor pointer_to_binary_function<_Arg1, _Arg2, _Result>
        (parm_decl __x
          (type_ref _Result)
          (parm_decl
            (type_ref _Arg1))
          (parm_decl
            (type_ref _Arg2)))
        (member_ref _M_ptr)
        (decl_ref_expr __x)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Result)
        (parm_decl __x
          (type_ref _Arg1))
        (parm_decl __y
          (type_ref _Arg2))
        (compound_stmt
          (return_stmt
            (call_expr _M_ptr
              (member_ref_expr _M_ptr)
              (decl_ref_expr __x)
              (decl_ref_expr __y))))))
    (function_template ptr_fun
      (template_type_parameter _Arg1)
      (template_type_parameter _Arg2)
      (template_type_parameter _Result)
      (template_ref pointer_to_binary_function)
      (type_ref _Arg1)
      (type_ref _Arg2)
      (type_ref _Result)
      (parm_decl __x
        (type_ref _Result)
        (parm_decl
          (type_ref _Arg1))
        (parm_decl
          (type_ref _Arg2)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref pointer_to_binary_function)
            (type_ref _Arg1)
            (type_ref _Arg2)
            (type_ref _Result)
            (decl_ref_expr __x)))))
    (class_template _Identity
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Tp>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __x))))
      (cxx_method operator()
        (type_ref _Tp)
        (parm_decl __x
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (decl_ref_expr __x)))))
    (class_template_partial_specialization _Identity
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier _Identity<_Tp>
        (template_ref _Identity)
        (type_ref _Tp)))
    (class_template _Select1st
      (template_type_parameter _Pair)
      (cxx_base_specifier unary_function<_Pair, typename _Pair::first_type>
        (template_ref unary_function)
        (type_ref _Pair)
        (type_ref _Pair))
      (cxx_method operator()
        (type_ref _Pair)
        (parm_decl __x
          (type_ref _Pair))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x)))))
      (cxx_method operator()
        (type_ref _Pair)
        (parm_decl __x
          (type_ref _Pair))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x)))))
      (function_template operator()
        (template_type_parameter _Pair2)
        (type_ref _Pair2)
        (parm_decl __x
          (type_ref _Pair2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x)))))
      (function_template operator()
        (template_type_parameter _Pair2)
        (type_ref _Pair2)
        (parm_decl __x
          (type_ref _Pair2))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x))))))
    (class_template _Select2nd
      (template_type_parameter _Pair)
      (cxx_base_specifier unary_function<_Pair, typename _Pair::second_type>
        (template_ref unary_function)
        (type_ref _Pair)
        (type_ref _Pair))
      (cxx_method operator()
        (type_ref _Pair)
        (parm_decl __x
          (type_ref _Pair))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x)))))
      (cxx_method operator()
        (type_ref _Pair)
        (parm_decl __x
          (type_ref _Pair))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __x))))))
    (class_template mem_fun_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp *, _Ret>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor mem_fun_t<_Ret, _Tp>
        (parm_decl __pf
          (type_ref _Ret))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __p)
                  (member_ref_expr _M_f)))))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)))
    (class_template const_mem_fun_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<const _Tp *, _Ret>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor const_mem_fun_t<_Ret, _Tp>
        (parm_decl __pf
          (type_ref _Ret))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __p)
                  (member_ref_expr _M_f)))))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)))
    (class_template mem_fun_ref_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Ret>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor mem_fun_ref_t<_Ret, _Tp>
        (parm_decl __pf
          (type_ref _Ret))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __r
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __r)
                  (member_ref_expr _M_f)))))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)))
    (class_template const_mem_fun_ref_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (cxx_base_specifier unary_function<_Tp, _Ret>
        (template_ref unary_function)
        (type_ref _Tp)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor const_mem_fun_ref_t<_Ret, _Tp>
        (parm_decl __pf
          (type_ref _Ret))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __r
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __r)
                  (member_ref_expr _M_f)))))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)))
    (class_template mem_fun1_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (cxx_base_specifier binary_function<_Tp *, _Arg, _Ret>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Arg)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor mem_fun1_t<_Ret, _Tp, _Arg>
        (parm_decl __pf
          (type_ref _Ret)
          (parm_decl
            (type_ref _Arg)))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __x
          (type_ref _Arg))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __p)
                  (member_ref_expr _M_f)))
              (decl_ref_expr __x)))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg))))
    (class_template const_mem_fun1_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (cxx_base_specifier binary_function<const _Tp *, _Arg, _Ret>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Arg)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor const_mem_fun1_t<_Ret, _Tp, _Arg>
        (parm_decl __pf
          (type_ref _Ret)
          (parm_decl
            (type_ref _Arg)))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __x
          (type_ref _Arg))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __p)
                  (member_ref_expr _M_f)))
              (decl_ref_expr __x)))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg))))
    (class_template mem_fun1_ref_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (cxx_base_specifier binary_function<_Tp, _Arg, _Ret>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Arg)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor mem_fun1_ref_t<_Ret, _Tp, _Arg>
        (parm_decl __pf
          (type_ref _Ret)
          (parm_decl
            (type_ref _Arg)))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __r
          (type_ref _Tp))
        (parm_decl __x
          (type_ref _Arg))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __r)
                  (member_ref_expr _M_f)))
              (decl_ref_expr __x)))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg))))
    (class_template const_mem_fun1_ref_t
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (cxx_base_specifier binary_function<_Tp, _Arg, _Ret>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Arg)
        (type_ref _Ret))
      (cxx_access_spec_decl)
      (constructor const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
        (parm_decl __pf
          (type_ref _Ret)
          (parm_decl
            (type_ref _Arg)))
        (member_ref _M_f)
        (decl_ref_expr __pf)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Ret)
        (parm_decl __r
          (type_ref _Tp))
        (parm_decl __x
          (type_ref _Arg))
        (compound_stmt
          (return_stmt
            (call_expr
              (paren_expr
                (binary_operator
                  (decl_ref_expr __r)
                  (member_ref_expr _M_f)))
              (decl_ref_expr __x)))))
      (cxx_access_spec_decl)
      (field_decl _M_f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg))))
    (function_template mem_fun
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_ref mem_fun_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (parm_decl __f
        (type_ref _Ret))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref mem_fun_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (decl_ref_expr __f)))))
    (function_template mem_fun
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_ref const_mem_fun_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (parm_decl __f
        (type_ref _Ret))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref const_mem_fun_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (decl_ref_expr __f)))))
    (function_template mem_fun_ref
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_ref mem_fun_ref_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (parm_decl __f
        (type_ref _Ret))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref mem_fun_ref_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (decl_ref_expr __f)))))
    (function_template mem_fun_ref
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_ref const_mem_fun_ref_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (parm_decl __f
        (type_ref _Ret))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref const_mem_fun_ref_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (decl_ref_expr __f)))))
    (function_template mem_fun
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (template_ref mem_fun1_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (type_ref _Arg)
      (parm_decl __f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref mem_fun1_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (type_ref _Arg)
            (decl_ref_expr __f)))))
    (function_template mem_fun
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (template_ref const_mem_fun1_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (type_ref _Arg)
      (parm_decl __f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref const_mem_fun1_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (type_ref _Arg)
            (decl_ref_expr __f)))))
    (function_template mem_fun_ref
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (template_ref mem_fun1_ref_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (type_ref _Arg)
      (parm_decl __f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref mem_fun1_ref_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (type_ref _Arg)
            (decl_ref_expr __f)))))
    (function_template mem_fun_ref
      (template_type_parameter _Ret)
      (template_type_parameter _Tp)
      (template_type_parameter _Arg)
      (template_ref const_mem_fun1_ref_t)
      (type_ref _Ret)
      (type_ref _Tp)
      (type_ref _Arg)
      (parm_decl __f
        (type_ref _Ret)
        (parm_decl
          (type_ref _Arg)))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref const_mem_fun1_ref_t)
            (type_ref _Ret)
            (type_ref _Tp)
            (type_ref _Arg)
            (decl_ref_expr __f)))))
    (class_template __has_is_transparent
      (template_type_parameter _Func)
      (template_type_parameter _SfinaeType)
      (template_type_parameter
        (template_ref __void_t)))
    (class_template_partial_specialization __has_is_transparent
      (template_type_parameter _Func)
      (template_type_parameter _SfinaeType)
      (type_ref _Func)
      (type_ref _SfinaeType)
      (template_ref __void_t)
      (type_ref _Func)
      (typedef_decl type))
    (type_alias_template_decl __has_is_transparent_t
      (template_type_parameter _Func)
      (template_type_parameter _SfinaeType)
      (type_alias_decl __has_is_transparent_t
        (template_ref __has_is_transparent)
        (type_ref _Func)
        (type_ref _SfinaeType))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/backward/binders.h
  (namespace std
    (visibility_attr default)
    (class_template binder1st
      (template_type_parameter _Operation)
      (cxx_base_specifier unary_function<typename _Operation::second_argument_type, typename _Operation::result_type>
        (template_ref unary_function)
        (type_ref _Operation)
        (type_ref _Operation))
      (cxx_access_spec_decl)
      (field_decl op
        (type_ref _Operation))
      (field_decl value
        (type_ref _Operation))
      (cxx_access_spec_decl)
      (constructor binder1st<_Operation>
        (parm_decl __x
          (type_ref _Operation))
        (parm_decl __y
          (type_ref _Operation))
        (member_ref op)
        (decl_ref_expr __x)
        (member_ref value)
        (decl_ref_expr __y)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Operation)
        (parm_decl __x
          (type_ref _Operation))
        (compound_stmt
          (return_stmt
            (call_expr op
              (member_ref_expr op)
              (member_ref_expr value)
              (decl_ref_expr __x)))))
      (cxx_method operator()
        (type_ref _Operation)
        (parm_decl __x
          (type_ref _Operation))
        (compound_stmt
          (return_stmt
            (call_expr op
              (member_ref_expr op)
              (member_ref_expr value)
              (decl_ref_expr __x))))))
    (function_template bind1st
      (template_type_parameter _Operation)
      (template_type_parameter _Tp)
      (template_ref binder1st)
      (type_ref _Operation)
      (parm_decl __fn
        (type_ref _Operation))
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Arg1_type
            (type_ref _Operation)))
        (return_stmt
          (call_expr
            (template_ref binder1st)
            (type_ref _Operation)
            (decl_ref_expr __fn)
            (call_expr
              (type_ref _Arg1_type)
              (decl_ref_expr __x))))))
    (class_template binder2nd
      (template_type_parameter _Operation)
      (cxx_base_specifier unary_function<typename _Operation::first_argument_type, typename _Operation::result_type>
        (template_ref unary_function)
        (type_ref _Operation)
        (type_ref _Operation))
      (cxx_access_spec_decl)
      (field_decl op
        (type_ref _Operation))
      (field_decl value
        (type_ref _Operation))
      (cxx_access_spec_decl)
      (constructor binder2nd<_Operation>
        (parm_decl __x
          (type_ref _Operation))
        (parm_decl __y
          (type_ref _Operation))
        (member_ref op)
        (decl_ref_expr __x)
        (member_ref value)
        (decl_ref_expr __y)
        (compound_stmt))
      (cxx_method operator()
        (type_ref _Operation)
        (parm_decl __x
          (type_ref _Operation))
        (compound_stmt
          (return_stmt
            (call_expr op
              (member_ref_expr op)
              (decl_ref_expr __x)
              (member_ref_expr value)))))
      (cxx_method operator()
        (type_ref _Operation)
        (parm_decl __x
          (type_ref _Operation))
        (compound_stmt
          (return_stmt
            (call_expr op
              (member_ref_expr op)
              (decl_ref_expr __x)
              (member_ref_expr value))))))
    (function_template bind2nd
      (template_type_parameter _Operation)
      (template_type_parameter _Tp)
      (template_ref binder2nd)
      (type_ref _Operation)
      (parm_decl __fn
        (type_ref _Operation))
      (parm_decl __x
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Arg2_type
            (type_ref _Operation)))
        (return_stmt
          (call_expr
            (template_ref binder2nd)
            (type_ref _Operation)
            (decl_ref_expr __fn)
            (call_expr
              (type_ref _Arg2_type)
              (decl_ref_expr __x)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/hash_bytes.h
  (namespace std
    (function_decl _Hash_bytes
      (type_ref std::size_t)
      (parm_decl __ptr)
      (parm_decl __len
        (type_ref std::size_t))
      (parm_decl __seed
        (type_ref std::size_t)))
    (function_decl _Fnv_hash_bytes
      (type_ref std::size_t)
      (parm_decl __ptr)
      (parm_decl __len
        (type_ref std::size_t))
      (parm_decl __seed
        (type_ref std::size_t))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/functional_hash.h
  (namespace std
    (visibility_attr default)
    (class_template __hash_base
      (template_type_parameter _Result)
      (template_type_parameter _Arg)
      (typedef_decl result_type
        (type_ref _Result))
      (typedef_decl argument_type
        (type_ref _Arg)))
    (class_template hash
      (template_type_parameter _Tp))
    (class_template __poison_hash
      (template_type_parameter _Tp)
      (template_type_parameter)
      (var_decl __enable_hash_call
        (cxx_bool_literal_expr))
      (cxx_access_spec_decl)
      (constructor __poison_hash<_Tp, type-parameter-0-1>
        (parm_decl
          (type_ref __poison_hash<_Tp, type-parameter-0-1>)))
      (destructor ~__poison_hash<_Tp, type-parameter-0-1>))
    (class_template_partial_specialization __poison_hash
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (template_ref __void_t)
      (call_expr
        (call_expr
          (template_ref hash)
          (type_ref _Tp))
        (call_expr
          (decl_ref_expr
            (overloaded_decl_ref declval)
            (type_ref _Tp))))
      (var_decl __enable_hash_call
        (cxx_bool_literal_expr)))
    (class_template __hash_enum
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_enum)
          (type_ref _Tp)))
      (cxx_access_spec_decl)
      (constructor __hash_enum<_Tp, >
        (parm_decl
          (type_ref __hash_enum<_Tp, >)))
      (destructor ~__hash_enum<_Tp, >))
    (class_template_partial_specialization __hash_enum
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __hash_base<std::size_t, _Tp>
        (template_ref __hash_base)
        (type_ref std::size_t)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (type_alias_decl __type
              (template_ref underlying_type)
              (type_ref _Tp)))
          (return_stmt
            (call_expr
              (call_expr
                (template_ref hash)
                (type_ref __type)
                (init_list_expr))
              (cxx_static_cast_expr
                (type_ref __type)
                (decl_ref_expr __val)))))))
    (class_template hash
      (template_type_parameter _Tp)
      (cxx_base_specifier __hash_enum<_Tp>
        (template_ref __hash_enum)
        (type_ref _Tp)))
    (class_template_partial_specialization hash
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_base_specifier __hash_base<std::size_t, _Tp *>
        (template_ref __hash_base)
        (type_ref std::size_t)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __p
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (cxx_reinterpret_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __p))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, _Bool>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, char>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, signed char>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned char>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, wchar_t>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, char16_t>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, char32_t>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, short>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, int>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, long>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, long long>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned short>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned int>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned long>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned long long>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, __int128>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, unsigned __int128>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref std::size_t)
              (decl_ref_expr __val))))))
    (struct_decl _Hash_impl
      (cxx_method hash
        (type_ref std::size_t)
        (parm_decl __ptr)
        (parm_decl __clength
          (type_ref std::size_t))
        (parm_decl __seed
          (type_ref std::size_t)
          (cxx_static_cast_expr
            (type_ref std::size_t)
            (integer_literal 0xc70f6907UL)))
        (compound_stmt
          (return_stmt
            (call_expr _Hash_bytes
              (decl_ref_expr _Hash_bytes)
              (decl_ref_expr __ptr)
              (decl_ref_expr __clength)
              (decl_ref_expr __seed)))))
      (function_template hash
        (template_type_parameter _Tp)
        (type_ref std::size_t)
        (parm_decl __val
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref hash))
              (unary_operator
                (decl_ref_expr __val))
              (cxx_unary_expr
                (paren_expr
                  (decl_ref_expr __val)))))))
      (function_template __hash_combine
        (template_type_parameter _Tp)
        (type_ref std::size_t)
        (parm_decl __val
          (type_ref _Tp))
        (parm_decl __hash
          (type_ref std::size_t))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref hash))
              (unary_operator
                (decl_ref_expr __val))
              (cxx_unary_expr
                (paren_expr
                  (decl_ref_expr __val)))
              (decl_ref_expr __hash))))))
    (struct_decl _Fnv_hash_impl
      (cxx_method hash
        (type_ref std::size_t)
        (parm_decl __ptr)
        (parm_decl __clength
          (type_ref std::size_t))
        (parm_decl __seed
          (type_ref std::size_t)
          (cxx_static_cast_expr
            (type_ref std::size_t)
            (integer_literal 2166136261UL)))
        (compound_stmt
          (return_stmt
            (call_expr _Fnv_hash_bytes
              (decl_ref_expr _Fnv_hash_bytes)
              (decl_ref_expr __ptr)
              (decl_ref_expr __clength)
              (decl_ref_expr __seed)))))
      (function_template hash
        (template_type_parameter _Tp)
        (type_ref std::size_t)
        (parm_decl __val
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref hash))
              (unary_operator
                (decl_ref_expr __val))
              (cxx_unary_expr
                (paren_expr
                  (decl_ref_expr __val)))))))
      (function_template __hash_combine
        (template_type_parameter _Tp)
        (type_ref std::size_t)
        (parm_decl __val
          (type_ref _Tp))
        (parm_decl __hash
          (type_ref std::size_t))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (overloaded_decl_ref hash))
              (unary_operator
                (decl_ref_expr __val))
              (cxx_unary_expr
                (paren_expr
                  (decl_ref_expr __val)))
              (decl_ref_expr __hash))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, float>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (conditional_operator
              (binary_operator
                (decl_ref_expr __val)
                (floating_literal))
              (call_expr hash
                (decl_ref_expr hash
                  (namespace_ref std)
                  (type_ref struct std::_Hash_impl))
                (decl_ref_expr __val))
              (integer_literal 0))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, double>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __val)
        (compound_stmt
          (return_stmt
            (conditional_operator
              (binary_operator
                (decl_ref_expr __val)
                (floating_literal))
              (call_expr hash
                (decl_ref_expr hash
                  (namespace_ref std)
                  (type_ref struct std::_Hash_impl))
                (decl_ref_expr __val))
              (integer_literal 0))))))
    (struct_decl hash
      (cxx_base_specifier __hash_base<std::size_t, long double>
        (template_ref __hash_base)
        (type_ref std::size_t))
      (cxx_method operator()
        (pure_attr)
        (type_ref std::size_t)
        (parm_decl __val)))
    (class_template __is_fast_hash
      (template_type_parameter _Hash)
      (cxx_base_specifier std::true_type
        (namespace_ref std)
        (type_ref std::true_type)))
    (struct_decl __is_fast_hash
      (template_ref hash)
      (cxx_base_specifier std::false_type
        (namespace_ref std)
        (type_ref std::false_type))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/unique_ptr.h
  (namespace std
    (visibility_attr default)
    (class_template auto_ptr
      (template_type_parameter))
    (class_template default_delete
      (template_type_parameter _Tp)
      (constructor default_delete<_Tp>)
      (function_template default_delete<_Tp>
        (template_type_parameter _Up)
        (template_type_parameter
          (template_ref _Require)
          (template_ref is_convertible)
          (type_ref _Up)
          (type_ref _Tp))
        (parm_decl
          (template_ref default_delete)
          (type_ref _Up))
        (compound_stmt))
      (cxx_method operator()
        (parm_decl __ptr
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (static_assert
              (unary_operator
                (member_ref_expr
                  (template_ref is_void)
                  (type_ref _Tp)))
              (string_literal "can't delete pointer to incomplete type")))
          (decl_stmt
            (static_assert
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Tp))
                (integer_literal 0))
              (string_literal "can't delete pointer to incomplete type")))
          (cxx_delete_expr
            (decl_ref_expr __ptr)))))
    (class_template_partial_specialization default_delete
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (cxx_access_spec_decl)
      (constructor default_delete<type-parameter-0-0[]>)
      (function_template default_delete<type-parameter-0-0[]>
        (template_type_parameter _Up)
        (template_type_parameter
          (template_ref _Require)
          (template_ref is_convertible)
          (type_ref _Up)
          (type_ref _Tp))
        (parm_decl
          (template_ref default_delete)
          (type_ref _Up))
        (compound_stmt))
      (function_template operator()
        (template_type_parameter _Up)
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref is_convertible)
          (type_ref _Up)
          (type_ref _Tp))
        (parm_decl __ptr
          (type_ref _Up))
        (compound_stmt
          (decl_stmt
            (static_assert
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Tp))
                (integer_literal 0))
              (string_literal "can't delete pointer to incomplete type")))
          (cxx_delete_expr
            (decl_ref_expr __ptr)))))
    (class_template __uniq_ptr_impl
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (class_template _Ptr
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_type_parameter)
        (type_alias_decl type
          (type_ref _Up)))
      (class_template_partial_specialization _Ptr
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (type_ref _Up)
        (type_ref _Ep)
        (template_ref __void_t)
        (template_ref remove_reference)
        (type_ref _Ep)
        (type_alias_decl type
          (template_ref remove_reference)
          (type_ref _Ep)))
      (cxx_access_spec_decl)
      (type_alias_decl _DeleterConstraint
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __not_)
          (template_ref is_pointer)
          (type_ref _Dp)
          (template_ref is_default_constructible)
          (type_ref _Dp)))
      (type_alias_decl pointer
        (template_ref _Ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (static_assert
        (unary_operator
          (decl_ref_expr
            (template_ref is_rvalue_reference)
            (type_ref _Dp)))
        (string_literal "unique_ptr's deleter type must be a function object type or an lvalue reference type"))
      (constructor __uniq_ptr_impl<_Tp, _Dp>)
      (constructor __uniq_ptr_impl<_Tp, _Dp>
        (parm_decl __p
          (type_ref std::__uniq_ptr_impl::pointer))
        (member_ref _M_t)
        (compound_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref _M_ptr)))
            (decl_ref_expr __p))))
      (function_template __uniq_ptr_impl<_Tp, _Dp>
        (template_type_parameter _Del)
        (parm_decl __p
          (type_ref std::__uniq_ptr_impl::pointer))
        (parm_decl __d
          (type_ref _Del))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Del))
          (decl_ref_expr __d))
        (compound_stmt))
      (constructor __uniq_ptr_impl<_Tp, _Dp>
        (parm_decl __u
          (type_ref __uniq_ptr_impl<_Tp, _Dp>))
        (member_ref _M_t)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (member_ref_expr
            (decl_ref_expr __u)))
        (compound_stmt
          (binary_operator
            (call_expr
              (member_ref_expr
                (decl_ref_expr __u)))
            (cxx_null_ptr_literal_expr))))
      (cxx_method operator=
        (type_ref __uniq_ptr_impl<_Tp, _Dp>)
        (parm_decl __u
          (type_ref __uniq_ptr_impl<_Tp, _Dp>))
        (compound_stmt
          (call_expr reset
            (member_ref_expr reset)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __u))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref _M_deleter)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Dp))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __u)))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method _M_ptr
        (type_ref std::__uniq_ptr_impl::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (integer_literal 0))
              (member_ref_expr _M_t)))))
      (cxx_method _M_ptr
        (type_ref std::__uniq_ptr_impl::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (integer_literal 0))
              (member_ref_expr _M_t)))))
      (cxx_method _M_deleter
        (type_ref _Dp)
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (integer_literal 1))
              (member_ref_expr _M_t)))))
      (cxx_method _M_deleter
        (type_ref _Dp)
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref get)
                (integer_literal 1))
              (member_ref_expr _M_t)))))
      (cxx_method reset
        (parm_decl __p
          (type_ref std::__uniq_ptr_impl::pointer))
        (compound_stmt
          (decl_stmt
            (var_decl __old_p
              (type_ref std::__uniq_ptr_impl::pointer)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_ptr)))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref _M_ptr)))
            (decl_ref_expr __p))
          (if_stmt
            (decl_ref_expr __old_p)
            (call_expr
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_deleter)))
              (decl_ref_expr __old_p)))))
      (cxx_method release
        (type_ref std::__uniq_ptr_impl::pointer)
        (compound_stmt
          (decl_stmt
            (var_decl __p
              (type_ref std::__uniq_ptr_impl::pointer)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_ptr)))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref _M_ptr)))
            (cxx_null_ptr_literal_expr))
          (return_stmt
            (decl_ref_expr __p))))
      (cxx_method swap
        (parm_decl __rhs
          (type_ref __uniq_ptr_impl<_Tp, _Dp>))
        (compound_stmt
          (decl_stmt
            (using_declaration swap
              (namespace_ref std)
              (overloaded_decl_ref swap)))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (call_expr
              (member_ref_expr
                (cxx_this_expr)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs))))
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref swap))
            (call_expr
              (member_ref_expr
                (cxx_this_expr)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (cxx_access_spec_decl)
      (field_decl _M_t
        (template_ref tuple)
        (type_ref std::__uniq_ptr_impl::pointer)
        (type_ref _Dp)))
    (class_template __uniq_ptr_data
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_move_constructible)
          (type_ref _Dp)))
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_move_assignable)
          (type_ref _Dp)))
      (cxx_base_specifier __uniq_ptr_impl<_Tp, _Dp>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (using_declaration __uniq_ptr_impl<type-parameter-0-0, type-parameter-0-1>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp)
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (constructor __uniq_ptr_data<_Tp, _Dp, , >
        (parm_decl
          (type_ref __uniq_ptr_data<_Tp, _Dp, , >)))
      (cxx_method operator=
        (type_ref __uniq_ptr_data<_Tp, _Dp, , >)
        (parm_decl
          (type_ref __uniq_ptr_data<_Tp, _Dp, , >))))
    (class_template_partial_specialization __uniq_ptr_data
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (type_ref _Tp)
      (type_ref _Dp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __uniq_ptr_impl<_Tp, _Dp>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (using_declaration __uniq_ptr_impl<type-parameter-0-0, type-parameter-0-1>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp)
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (constructor __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false>
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false>)))
      (cxx_method operator=
        (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false>)
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, true, false>))))
    (class_template_partial_specialization __uniq_ptr_data
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (type_ref _Tp)
      (type_ref _Dp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __uniq_ptr_impl<_Tp, _Dp>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (using_declaration __uniq_ptr_impl<type-parameter-0-0, type-parameter-0-1>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp)
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (constructor __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true>
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true>)))
      (cxx_method operator=
        (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true>)
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, true>))))
    (class_template_partial_specialization __uniq_ptr_data
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (type_ref _Tp)
      (type_ref _Dp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __uniq_ptr_impl<_Tp, _Dp>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (using_declaration __uniq_ptr_impl<type-parameter-0-0, type-parameter-0-1>
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp)
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (constructor __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false>
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false>)))
      (cxx_method operator=
        (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false>)
        (parm_decl
          (type_ref __uniq_ptr_data<type-parameter-0-0, type-parameter-0-1, false, false>))))
    (class_template unique_ptr
      (template_type_parameter _Tp)
      (template_type_parameter _Dp
        (template_ref default_delete)
        (type_ref _Tp))
      (type_alias_template_decl _DeleterConstraint
        (template_type_parameter _Up)
        (type_alias_decl _DeleterConstraint
          (template_ref __uniq_ptr_impl)
          (type_ref _Tp)
          (type_ref _Up)))
      (field_decl _M_t
        (template_ref __uniq_ptr_data)
        (type_ref _Tp)
        (type_ref _Dp))
      (cxx_access_spec_decl)
      (type_alias_decl pointer
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (type_alias_decl element_type
        (type_ref _Tp))
      (type_alias_decl deleter_type
        (type_ref _Dp))
      (cxx_access_spec_decl)
      (type_alias_template_decl __safe_conversion_up
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (type_alias_decl __safe_conversion_up
          (template_ref __and_)
          (template_ref is_convertible)
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep)
          (type_ref std::unique_ptr::pointer)
          (template_ref __not_)
          (template_ref is_array)
          (type_ref _Up)))
      (cxx_access_spec_decl)
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Del))
        (member_ref _M_t)
        (compound_stmt))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Del))
        (parm_decl __p
          (type_ref std::unique_ptr::pointer))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (compound_stmt))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref std::unique_ptr::deleter_type))
        (template_type_parameter
          (template_ref _Require)
          (template_ref is_copy_constructible)
          (type_ref _Del))
        (parm_decl __p
          (type_ref std::unique_ptr::pointer))
        (parm_decl __d
          (type_ref std::unique_ptr::deleter_type))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (decl_ref_expr __d)
        (compound_stmt))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref std::unique_ptr::deleter_type))
        (template_type_parameter
          (template_ref _Require)
          (template_ref is_move_constructible)
          (type_ref _Del))
        (parm_decl __p
          (type_ref std::unique_ptr::pointer))
        (parm_decl __d
          (template_ref __enable_if_t)
          (unary_operator
            (decl_ref_expr
              (template_ref is_lvalue_reference)
              (type_ref _Del)))
          (type_ref _Del))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref std::unique_ptr::deleter_type))
        (template_type_parameter _DelUnref
          (template_ref remove_reference)
          (type_ref _Del))
        (parm_decl
          (type_ref std::unique_ptr::pointer))
        (parm_decl
          (template_ref __enable_if_t)
          (decl_ref_expr
            (template_ref is_lvalue_reference)
            (type_ref _Del))
          (type_ref _DelUnref)))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Del
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Del))
        (parm_decl
          (type_ref std::nullptr_t))
        (member_ref _M_t)
        (compound_stmt))
      (constructor unique_ptr<_Tp, _Dp>
        (parm_decl
          (type_ref unique_ptr<_Tp, _Dp>)))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_type_parameter
          (template_ref _Require)
          (template_ref __safe_conversion_up)
          (type_ref _Up)
          (type_ref _Ep)
          (template_ref conditional)
          (decl_ref_expr
            (template_ref is_reference)
            (type_ref _Dp))
          (template_ref is_same)
          (type_ref _Ep)
          (type_ref _Dp)
          (template_ref is_convertible)
          (type_ref _Ep)
          (type_ref _Dp))
        (parm_decl __u
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep))
        (member_ref _M_t)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __u)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Ep))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __u))))
        (compound_stmt))
      (function_template unique_ptr<_Tp, _Dp>
        (template_type_parameter _Up)
        (template_type_parameter
          (template_ref _Require)
          (template_ref is_convertible)
          (type_ref _Up)
          (type_ref _Tp)
          (template_ref is_same)
          (type_ref _Dp)
          (template_ref default_delete)
          (type_ref _Tp))
        (parm_decl __u
          (template_ref auto_ptr)
          (type_ref _Up)))
      (destructor ~unique_ptr<_Tp, _Dp>
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_invocable)
                (type_ref std::unique_ptr::deleter_type)
                (type_ref std::unique_ptr::pointer))
              (string_literal "unique_ptr's deleter must be invocable with a pointer")))
          (decl_stmt
            (var_decl __ptr
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_t)))))
          (if_stmt
            (call_expr
              (decl_ref_expr __ptr)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref get_deleter)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __ptr))))
          (binary_operator
            (decl_ref_expr __ptr)
            (call_expr
              (type_ref std::unique_ptr::pointer)))))
      (cxx_method operator=
        (type_ref unique_ptr<_Tp, _Dp>)
        (parm_decl
          (type_ref unique_ptr<_Tp, _Dp>)))
      (function_template operator=
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __safe_conversion_up)
          (type_ref _Up)
          (type_ref _Ep)
          (template_ref is_assignable)
          (type_ref std::unique_ptr::deleter_type)
          (type_ref _Ep))
        (type_ref unique_ptr<_Tp, _Dp>)
        (parm_decl __u
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep))
        (compound_stmt
          (call_expr reset
            (member_ref_expr reset)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __u))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref get_deleter)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Ep))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __u)))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref unique_ptr<_Tp, _Dp>)
        (parm_decl
          (type_ref std::nullptr_t))
        (compound_stmt
          (call_expr reset
            (member_ref_expr reset))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator*
        (template_ref add_lvalue_reference)
        (type_ref std::unique_ptr::element_type)
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr get
                          (member_ref_expr get))
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (call_expr
                          (type_ref std::unique_ptr::pointer))))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (unary_operator
              (call_expr get
                (member_ref_expr get))))))
      (cxx_method operator->
        (type_ref std::unique_ptr::pointer)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr get
              (member_ref_expr get)))))
      (cxx_method get
        (type_ref std::unique_ptr::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (cxx_method get_deleter
        (type_ref std::unique_ptr::deleter_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (cxx_method get_deleter
        (type_ref std::unique_ptr::deleter_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (conversion_function operator bool
        (compound_stmt
          (return_stmt
            (conditional_operator
              (call_expr
                (call_expr get
                  (member_ref_expr get))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (call_expr
                  (type_ref std::unique_ptr::pointer)))
              (cxx_bool_literal_expr)
              (cxx_bool_literal_expr)))))
      (cxx_method release
        (type_ref std::unique_ptr::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (cxx_method reset
        (parm_decl __p
          (type_ref std::unique_ptr::pointer)
          (call_expr
            (type_ref std::unique_ptr::pointer)))
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_invocable)
                (type_ref std::unique_ptr::deleter_type)
                (type_ref std::unique_ptr::pointer))
              (string_literal "unique_ptr's deleter must be invocable with a pointer")))
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_t))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __p)))))
      (cxx_method swap
        (parm_decl __u
          (type_ref unique_ptr<_Tp, _Dp>))
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_swappable)
                (type_ref _Dp))
              (string_literal "deleter must be swappable")))
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_t))
            (member_ref_expr
              (decl_ref_expr __u)))))
      (constructor unique_ptr<_Tp, _Dp>
        (parm_decl
          (type_ref unique_ptr<_Tp, _Dp>)))
      (cxx_method operator=
        (type_ref unique_ptr<_Tp, _Dp>)
        (parm_decl
          (type_ref unique_ptr<_Tp, _Dp>))))
    (class_template_partial_specialization unique_ptr
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (type_ref _Tp)
      (type_ref _Dp)
      (type_alias_template_decl _DeleterConstraint
        (template_type_parameter _Up)
        (type_alias_decl _DeleterConstraint
          (template_ref __uniq_ptr_impl)
          (type_ref _Tp)
          (type_ref _Up)))
      (field_decl _M_t
        (template_ref __uniq_ptr_data)
        (type_ref _Tp)
        (type_ref _Dp))
      (type_alias_template_decl __remove_cv
        (template_type_parameter _Up)
        (type_alias_decl __remove_cv
          (template_ref remove_cv)
          (type_ref _Up)))
      (type_alias_template_decl __is_derived_Tp
        (template_type_parameter _Up)
        (type_alias_decl __is_derived_Tp
          (template_ref __and_)
          (template_ref is_base_of)
          (type_ref _Tp)
          (type_ref _Up)
          (template_ref __not_)
          (template_ref is_same)
          (template_ref __remove_cv)
          (type_ref _Tp)
          (template_ref __remove_cv)
          (type_ref _Up)))
      (cxx_access_spec_decl)
      (type_alias_decl pointer
        (template_ref __uniq_ptr_impl)
        (type_ref _Tp)
        (type_ref _Dp))
      (type_alias_decl element_type
        (type_ref _Tp))
      (type_alias_decl deleter_type
        (type_ref _Dp))
      (type_alias_template_decl __safe_conversion_up
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_type_parameter _UPtr
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep))
        (template_type_parameter _UP_pointer
          (type_ref _UPtr))
        (template_type_parameter _UP_element_type
          (type_ref _UPtr))
        (type_alias_decl __safe_conversion_up
          (template_ref __and_)
          (template_ref is_array)
          (type_ref _Up)
          (template_ref is_same)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)
          (template_ref is_same)
          (type_ref _UP_pointer)
          (type_ref _UP_element_type)
          (template_ref is_convertible)
          (type_ref _UP_element_type)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)))
      (type_alias_template_decl __safe_conversion_raw
        (template_type_parameter _Up)
        (type_alias_decl __safe_conversion_raw
          (template_ref __and_)
          (template_ref __or_)
          (template_ref __or_)
          (template_ref is_same)
          (type_ref _Up)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
          (template_ref is_same)
          (type_ref _Up)
          (type_ref std::nullptr_t)
          (template_ref __and_)
          (template_ref is_pointer)
          (type_ref _Up)
          (template_ref is_same)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)
          (template_ref is_convertible)
          (template_ref remove_pointer)
          (type_ref _Up)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Del
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Del))
        (member_ref _M_t)
        (compound_stmt))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Up)
        (template_type_parameter _Vp
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Vp))
        (template_type_parameter
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __safe_conversion_raw)
            (type_ref _Up)))
        (parm_decl __p
          (type_ref _Up))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (compound_stmt))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Up)
        (template_type_parameter _Del
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type))
        (template_type_parameter
          (template_ref _Require)
          (template_ref __safe_conversion_raw)
          (type_ref _Up)
          (template_ref is_copy_constructible)
          (type_ref _Del))
        (parm_decl __p
          (type_ref _Up))
        (parm_decl __d
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type))
        (member_ref _M_t)
        (decl_ref_expr __p)
        (decl_ref_expr __d)
        (compound_stmt))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Up)
        (template_type_parameter _Del
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type))
        (template_type_parameter
          (template_ref _Require)
          (template_ref __safe_conversion_raw)
          (type_ref _Up)
          (template_ref is_move_constructible)
          (type_ref _Del))
        (parm_decl __p
          (type_ref _Up))
        (parm_decl __d
          (template_ref __enable_if_t)
          (unary_operator
            (decl_ref_expr
              (template_ref is_lvalue_reference)
              (type_ref _Del)))
          (type_ref _Del))
        (member_ref _M_t)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __p))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Up)
        (template_type_parameter _Del
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type))
        (template_type_parameter _DelUnref
          (template_ref remove_reference)
          (type_ref _Del))
        (template_type_parameter
          (template_ref _Require)
          (template_ref __safe_conversion_raw)
          (type_ref _Up))
        (parm_decl
          (type_ref _Up))
        (parm_decl
          (template_ref __enable_if_t)
          (decl_ref_expr
            (template_ref is_lvalue_reference)
            (type_ref _Del))
          (type_ref _DelUnref)))
      (constructor unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (parm_decl
          (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Del
          (type_ref _Dp))
        (template_type_parameter
          (template_ref _DeleterConstraint)
          (type_ref _Del))
        (parm_decl
          (type_ref std::nullptr_t))
        (member_ref _M_t)
        (compound_stmt))
      (function_template unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_type_parameter
          (template_ref _Require)
          (template_ref __safe_conversion_up)
          (type_ref _Up)
          (type_ref _Ep)
          (template_ref conditional)
          (decl_ref_expr
            (template_ref is_reference)
            (type_ref _Dp))
          (template_ref is_same)
          (type_ref _Ep)
          (type_ref _Dp)
          (template_ref is_convertible)
          (type_ref _Ep)
          (type_ref _Dp))
        (parm_decl __u
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep))
        (member_ref _M_t)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __u)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref forward)
            (type_ref _Ep))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __u))))
        (compound_stmt))
      (destructor ~unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (compound_stmt
          (decl_stmt
            (var_decl __ptr
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_t)))))
          (if_stmt
            (call_expr
              (decl_ref_expr __ptr)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref get_deleter)))
              (decl_ref_expr __ptr)))
          (binary_operator
            (decl_ref_expr __ptr)
            (call_expr
              (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)))))
      (cxx_method operator=
        (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)
        (parm_decl
          (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)))
      (function_template operator=
        (template_type_parameter _Up)
        (template_type_parameter _Ep)
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref __safe_conversion_up)
          (type_ref _Up)
          (type_ref _Ep)
          (template_ref is_assignable)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type)
          (type_ref _Ep))
        (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)
        (parm_decl __u
          (template_ref unique_ptr)
          (type_ref _Up)
          (type_ref _Ep))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref reset))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __u))))
          (binary_operator
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref get_deleter)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Ep))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __u)))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)
        (parm_decl
          (type_ref std::nullptr_t))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref reset)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator[]
        (namespace_ref std)
        (template_ref add_lvalue_reference)
        (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)
        (parm_decl __i
          (type_ref std::size_t))
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr get
                          (member_ref_expr get))
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (call_expr
                          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer))))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (array_subscript_expr
              (call_expr get
                (member_ref_expr get))
              (decl_ref_expr __i)))))
      (cxx_method get
        (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (cxx_method get_deleter
        (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (cxx_method get_deleter
        (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::deleter_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (conversion_function operator bool
        (compound_stmt
          (return_stmt
            (conditional_operator
              (call_expr
                (call_expr get
                  (member_ref_expr get))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (call_expr
                  (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)))
              (cxx_bool_literal_expr)
              (cxx_bool_literal_expr)))))
      (cxx_method release
        (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_t))))))
      (function_template reset
        (template_type_parameter _Up)
        (template_type_parameter
          (template_ref _Require)
          (template_ref __or_)
          (template_ref is_same)
          (type_ref _Up)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
          (template_ref __and_)
          (template_ref is_same)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type)
          (template_ref is_pointer)
          (type_ref _Up)
          (template_ref is_convertible)
          (template_ref remove_pointer)
          (type_ref _Up)
          (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::element_type))
        (parm_decl __p
          (type_ref _Up))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_t))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __p)))))
      (cxx_method reset
        (parm_decl
          (type_ref std::nullptr_t)
          (cxx_null_ptr_literal_expr))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref reset))
            (call_expr
              (type_ref std::unique_ptr<type-parameter-0-0[], type-parameter-0-1>::pointer)))))
      (cxx_method swap
        (parm_decl __u
          (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>))
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_swappable)
                (type_ref _Dp))
              (string_literal "deleter must be swappable")))
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_t))
            (member_ref_expr
              (decl_ref_expr __u)))))
      (constructor unique_ptr<type-parameter-0-0[], type-parameter-0-1>
        (parm_decl
          (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)))
      (cxx_method operator=
        (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>)
        (parm_decl
          (type_ref unique_ptr<type-parameter-0-0[], type-parameter-0-1>))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_ref enable_if)
      (decl_ref_expr
        (template_ref __is_swappable)
        (type_ref _Dp))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __x))
          (decl_ref_expr __y))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_ref enable_if)
      (unary_operator
        (decl_ref_expr
          (template_ref __is_swappable)
          (type_ref _Dp)))
      (parm_decl
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp)))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __x)))))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __x)))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __x)))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __x)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (decl_stmt
          (typedef_decl _CT
            (namespace_ref std)
            (template_ref common_type)
            (template_ref unique_ptr)
            (type_ref _Tp)
            (type_ref _Dp)
            (template_ref unique_ptr)
            (type_ref _Up)
            (type_ref _Ep)))
        (return_stmt
          (call_expr
            (call_expr
              (namespace_ref std)
              (template_ref less)
              (type_ref _CT))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __y)))))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (namespace_ref std)
              (template_ref less)
              (template_ref unique_ptr)
              (type_ref _Tp)
              (type_ref _Dp))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (namespace_ref std)
              (template_ref less)
              (template_ref unique_ptr)
              (type_ref _Tp)
              (type_ref _Dp))
            (cxx_null_ptr_literal_expr)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __y)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (return_stmt
          (paren_expr
            (call_expr
              (decl_ref_expr __y)
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (decl_ref_expr __x))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (namespace_ref std)
              (template_ref less)
              (template_ref unique_ptr)
              (type_ref _Tp)
              (type_ref _Dp))
            (cxx_null_ptr_literal_expr)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (namespace_ref std)
              (template_ref less)
              (template_ref unique_ptr)
              (type_ref _Tp)
              (type_ref _Dp))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __x)))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_type_parameter _Up)
      (template_type_parameter _Ep)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl __y
        (template_ref unique_ptr)
        (type_ref _Up)
        (type_ref _Ep))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __y)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __x)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __x
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __x)))))))
    (class_template __uniq_ptr_hash
      (template_type_parameter _Up)
      (template_type_parameter _Ptr
        (type_ref _Up))
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref __poison_hash)
          (type_ref _Ptr)))
      (cxx_base_specifier __poison_hash<_Ptr>
        (template_ref __poison_hash)
        (type_ref _Ptr))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __u
          (type_ref _Up))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref hash)
                (type_ref _Ptr))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __u))))))))
    (class_template_partial_specialization __uniq_ptr_hash
      (template_type_parameter _Up)
      (template_type_parameter _Ptr)
      (type_ref _Up)
      (type_ref _Ptr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier __poison_hash<_Ptr>
        (template_ref __poison_hash)
        (type_ref _Ptr)))
    (class_template_partial_specialization hash
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_ref unique_ptr)
      (type_ref _Tp)
      (type_ref _Dp)
      (cxx_base_specifier __hash_base<std::size_t, unique_ptr<_Tp, _Dp> >
        (template_ref __hash_base)
        (type_ref std::size_t)
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp))
      (cxx_base_specifier __uniq_ptr_hash<unique_ptr<_Tp, _Dp> >
        (template_ref __uniq_ptr_hash)
        (template_ref unique_ptr)
        (type_ref _Tp)
        (type_ref _Dp)))
    (class_template _MakeUniq
      (template_type_parameter _Tp)
      (typedef_decl __single_object
        (template_ref unique_ptr)
        (type_ref _Tp)))
    (class_template_partial_specialization _MakeUniq
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (typedef_decl __array
        (template_ref unique_ptr)
        (type_ref _Tp)))
    (class_template_partial_specialization _MakeUniq
      (template_type_parameter _Tp)
      (template_non_type_parameter _Bound
        (type_ref std::size_t))
      (type_ref _Tp)
      (decl_ref_expr _Bound)
      (struct_decl __invalid_type))
    (function_template make_unique
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (template_ref _MakeUniq)
      (type_ref _Tp)
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref unique_ptr)
            (type_ref _Tp)
            (cxx_new_expr
              (type_ref _Tp)
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Args))
                  (decl_ref_expr __args))))))))
    (function_template make_unique
      (template_type_parameter _Tp)
      (template_ref _MakeUniq)
      (type_ref _Tp)
      (parm_decl __num
        (type_ref std::size_t))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref unique_ptr)
            (type_ref _Tp)
            (cxx_new_expr
              (template_ref remove_extent_t)
              (type_ref _Tp)
              (decl_ref_expr __num))))))
    (function_template make_unique
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (template_ref _MakeUniq)
      (type_ref _Tp)
      (parm_decl
        (type_ref _Args))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stringfwd.h
  (namespace std
    (visibility_attr default)
    (class_template char_traits
      (template_type_parameter _CharT))
    (struct_decl char_traits)
    (struct_decl char_traits)
    (struct_decl char_traits)
    (struct_decl char_traits)
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/stringfwd.h
    (namespace __cxx11
      (class_template basic_string
        (template_type_parameter _CharT)
        (template_type_parameter _Traits
          (template_ref char_traits)
          (type_ref _CharT))
        (template_type_parameter _Alloc
          (template_ref allocator)
          (type_ref _CharT))))
    (typedef_decl string
      (template_ref basic_string))
    (typedef_decl wstring
      (template_ref basic_string))
    (typedef_decl u16string
      (template_ref basic_string))
    (typedef_decl u32string
      (template_ref basic_string)))
  (typedef_decl _Float32)
  (typedef_decl _Float64)
  (typedef_decl _Float32x)
  (typedef_decl _Float64x)
  (typedef_decl size_t)
  (typedef_decl va_list
    (type_ref __builtin_va_list))
  (typedef_decl __gnuc_va_list
    (type_ref __builtin_va_list))
  (typedef_decl wint_t)
  (struct_decl
    (field_decl __count)
    (union_decl
      (field_decl __wch)
      (field_decl __wchb
        (integer_literal 4)))
    (field_decl __value
      (union_decl
        (field_decl __wch)
        (field_decl __wchb
          (integer_literal 4)))))
  (typedef_decl __mbstate_t
    (struct_decl
      (field_decl __count)
      (union_decl
        (field_decl __wch)
        (field_decl __wchb
          (integer_literal 4)))
      (field_decl __value
        (union_decl
          (field_decl __wch)
          (field_decl __wchb
            (integer_literal 4))))))
  (typedef_decl mbstate_t
    (type_ref __mbstate_t))
  (struct_decl _IO_FILE)
  (typedef_decl __FILE
    (type_ref struct _IO_FILE))
  (struct_decl _IO_FILE)
  (typedef_decl FILE
    (type_ref struct _IO_FILE))
  (struct_decl __locale_struct
    (struct_decl __locale_data)
    (field_decl __locales
      (type_ref struct __locale_data)
      (integer_literal 13))
    (field_decl __ctype_b)
    (field_decl __ctype_tolower)
    (field_decl __ctype_toupper)
    (field_decl __names
      (integer_literal 13)))
  (typedef_decl __locale_t
    (type_ref struct __locale_struct))
  (typedef_decl locale_t
    (type_ref __locale_t))
  (struct_decl tm)
  (function_decl wcscpy
    (parm_decl __dest)
    (parm_decl __src))
  (function_decl wcsncpy
    (parm_decl __dest)
    (parm_decl __src)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcscat
    (parm_decl __dest)
    (parm_decl __src))
  (function_decl wcsncat
    (parm_decl __dest)
    (parm_decl __src)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcscmp
    (pure_attr)
    (parm_decl __s1)
    (parm_decl __s2))
  (function_decl wcsncmp
    (pure_attr)
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcscasecmp
    (parm_decl __s1)
    (parm_decl __s2))
  (function_decl wcsncasecmp
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcscasecmp_l
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcsncasecmp_l
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcscoll
    (parm_decl __s1)
    (parm_decl __s2))
  (function_decl wcsxfrm
    (type_ref size_t)
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcscoll_l
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcsxfrm_l
    (type_ref size_t)
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcsdup
    (parm_decl __s))
  (function_decl wcschr
    (pure_attr)
    (parm_decl __wcs)
    (parm_decl __wc))
  (function_decl wcsrchr
    (pure_attr)
    (parm_decl __wcs)
    (parm_decl __wc))
  (function_decl wcschrnul
    (pure_attr)
    (parm_decl __s)
    (parm_decl __wc))
  (function_decl wcscspn
    (pure_attr)
    (type_ref size_t)
    (parm_decl __wcs)
    (parm_decl __reject))
  (function_decl wcsspn
    (pure_attr)
    (type_ref size_t)
    (parm_decl __wcs)
    (parm_decl __accept))
  (function_decl wcspbrk
    (pure_attr)
    (parm_decl __wcs)
    (parm_decl __accept))
  (function_decl wcsstr
    (pure_attr)
    (parm_decl __haystack)
    (parm_decl __needle))
  (function_decl wcstok
    (parm_decl __s)
    (parm_decl __delim)
    (parm_decl __ptr))
  (function_decl wcslen
    (pure_attr)
    (type_ref size_t)
    (parm_decl __s))
  (function_decl wcswcs
    (pure_attr)
    (parm_decl __haystack)
    (parm_decl __needle))
  (function_decl wcsnlen
    (pure_attr)
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __maxlen
      (type_ref size_t)))
  (function_decl wmemchr
    (pure_attr)
    (parm_decl __s)
    (parm_decl __c)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wmemcmp
    (pure_attr)
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wmemcpy
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wmemmove
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wmemset
    (parm_decl __s)
    (parm_decl __c)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wmempcpy
    (parm_decl __s1)
    (parm_decl __s2)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl btowc
    (type_ref wint_t)
    (parm_decl __c))
  (function_decl wctob
    (parm_decl __c
      (type_ref wint_t)))
  (function_decl mbsinit
    (pure_attr)
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl mbrtowc
    (type_ref size_t)
    (parm_decl __pwc)
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __p
      (type_ref mbstate_t)))
  (function_decl wcrtomb
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __wc)
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl __mbrlen
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl mbrlen
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl mbsrtowcs
    (type_ref size_t)
    (parm_decl __dst)
    (parm_decl __src)
    (parm_decl __len
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl wcsrtombs
    (type_ref size_t)
    (parm_decl __dst)
    (parm_decl __src)
    (parm_decl __len
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl mbsnrtowcs
    (type_ref size_t)
    (parm_decl __dst)
    (parm_decl __src)
    (parm_decl __nmc
      (type_ref size_t))
    (parm_decl __len
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl wcsnrtombs
    (type_ref size_t)
    (parm_decl __dst)
    (parm_decl __src)
    (parm_decl __nwc
      (type_ref size_t))
    (parm_decl __len
      (type_ref size_t))
    (parm_decl __ps
      (type_ref mbstate_t)))
  (function_decl wcwidth
    (parm_decl __c))
  (function_decl wcswidth
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl wcstod
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstof
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstold
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstof32
    (type_ref _Float32)
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstof64
    (type_ref _Float64)
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstof32x
    (type_ref _Float32x)
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstof64x
    (type_ref _Float64x)
    (parm_decl __nptr)
    (parm_decl __endptr))
  (function_decl wcstol
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstoul
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstoll
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstoull
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstoq
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstouq
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base))
  (function_decl wcstol_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstoul_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstoll_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstoull_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __base)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstod_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstof_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstold_l
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstof32_l
    (type_ref _Float32)
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstof64_l
    (type_ref _Float64)
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstof32x_l
    (type_ref _Float32x)
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcstof64x_l
    (type_ref _Float64x)
    (parm_decl __nptr)
    (parm_decl __endptr)
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl wcpcpy
    (parm_decl __dest)
    (parm_decl __src))
  (function_decl wcpncpy
    (parm_decl __dest)
    (parm_decl __src)
    (parm_decl __n
      (type_ref size_t)))
  (function_decl open_wmemstream
    (type_ref __FILE)
    (parm_decl __bufloc)
    (parm_decl __sizeloc
      (type_ref size_t)))
  (function_decl fwide
    (parm_decl __fp
      (type_ref __FILE))
    (parm_decl __mode))
  (function_decl fwprintf
    (parm_decl __stream
      (type_ref __FILE))
    (parm_decl __format))
  (function_decl wprintf
    (parm_decl __format))
  (function_decl swprintf
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __format))
  (function_decl vfwprintf
    (parm_decl __s
      (type_ref __FILE))
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vwprintf
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vswprintf
    (parm_decl __s)
    (parm_decl __n
      (type_ref size_t))
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl fwscanf
    (parm_decl __stream
      (type_ref __FILE))
    (parm_decl __format))
  (function_decl wscanf
    (parm_decl __format))
  (function_decl swscanf
    (parm_decl __s)
    (parm_decl __format))
  (function_decl fwscanf
    (asm_label_attr __isoc99_fwscanf)
    (parm_decl __stream
      (type_ref __FILE))
    (parm_decl __format))
  (function_decl wscanf
    (asm_label_attr __isoc99_wscanf)
    (parm_decl __format))
  (function_decl swscanf
    (asm_label_attr __isoc99_swscanf)
    (parm_decl __s)
    (parm_decl __format))
  (function_decl vfwscanf
    (parm_decl __s
      (type_ref __FILE))
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vwscanf
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vswscanf
    (parm_decl __s)
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vfwscanf
    (asm_label_attr __isoc99_vfwscanf)
    (parm_decl __s
      (type_ref __FILE))
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vwscanf
    (asm_label_attr __isoc99_vwscanf)
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl vswscanf
    (asm_label_attr __isoc99_vswscanf)
    (parm_decl __s)
    (parm_decl __format)
    (parm_decl __arg
      (type_ref __gnuc_va_list)))
  (function_decl fgetwc
    (type_ref wint_t)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl getwc
    (type_ref wint_t)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl getwchar
    (type_ref wint_t))
  (function_decl fputwc
    (type_ref wint_t)
    (parm_decl __wc)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl putwc
    (type_ref wint_t)
    (parm_decl __wc)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl putwchar
    (type_ref wint_t)
    (parm_decl __wc))
  (function_decl fgetws
    (parm_decl __ws)
    (parm_decl __n)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl fputws
    (parm_decl __ws)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl ungetwc
    (type_ref wint_t)
    (parm_decl __wc
      (type_ref wint_t))
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl getwc_unlocked
    (type_ref wint_t)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl getwchar_unlocked
    (type_ref wint_t))
  (function_decl fgetwc_unlocked
    (type_ref wint_t)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl fputwc_unlocked
    (type_ref wint_t)
    (parm_decl __wc)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl putwc_unlocked
    (type_ref wint_t)
    (parm_decl __wc)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl putwchar_unlocked
    (type_ref wint_t)
    (parm_decl __wc))
  (function_decl fgetws_unlocked
    (parm_decl __ws)
    (parm_decl __n)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl fputws_unlocked
    (parm_decl __ws)
    (parm_decl __stream
      (type_ref __FILE)))
  (function_decl wcsftime
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __maxsize
      (type_ref size_t))
    (parm_decl __format)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl wcsftime_l
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __maxsize
      (type_ref size_t))
    (parm_decl __format)
    (parm_decl __tp
      (type_ref struct tm))
    (parm_decl __loc
      (type_ref locale_t)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cwchar
  (namespace std
    (using_declaration mbstate_t
      (overloaded_decl_ref mbstate_t)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cwchar
  (namespace std
    (visibility_attr default)
    (using_declaration wint_t
      (overloaded_decl_ref wint_t))
    (using_declaration btowc
      (overloaded_decl_ref btowc))
    (using_declaration fgetwc
      (overloaded_decl_ref fgetwc))
    (using_declaration fgetws
      (overloaded_decl_ref fgetws))
    (using_declaration fputwc
      (overloaded_decl_ref fputwc))
    (using_declaration fputws
      (overloaded_decl_ref fputws))
    (using_declaration fwide
      (overloaded_decl_ref fwide))
    (using_declaration fwprintf
      (overloaded_decl_ref fwprintf))
    (using_declaration fwscanf
      (overloaded_decl_ref fwscanf))
    (using_declaration getwc
      (overloaded_decl_ref getwc))
    (using_declaration getwchar
      (overloaded_decl_ref getwchar))
    (using_declaration mbrlen
      (overloaded_decl_ref mbrlen))
    (using_declaration mbrtowc
      (overloaded_decl_ref mbrtowc))
    (using_declaration mbsinit
      (overloaded_decl_ref mbsinit))
    (using_declaration mbsrtowcs
      (overloaded_decl_ref mbsrtowcs))
    (using_declaration putwc
      (overloaded_decl_ref putwc))
    (using_declaration putwchar
      (overloaded_decl_ref putwchar))
    (using_declaration swprintf
      (overloaded_decl_ref swprintf))
    (using_declaration swscanf
      (overloaded_decl_ref swscanf))
    (using_declaration ungetwc
      (overloaded_decl_ref ungetwc))
    (using_declaration vfwprintf
      (overloaded_decl_ref vfwprintf))
    (using_declaration vfwscanf
      (overloaded_decl_ref vfwscanf))
    (using_declaration vswprintf
      (overloaded_decl_ref vswprintf))
    (using_declaration vswscanf
      (overloaded_decl_ref vswscanf))
    (using_declaration vwprintf
      (overloaded_decl_ref vwprintf))
    (using_declaration vwscanf
      (overloaded_decl_ref vwscanf))
    (using_declaration wcrtomb
      (overloaded_decl_ref wcrtomb))
    (using_declaration wcscat
      (overloaded_decl_ref wcscat))
    (using_declaration wcscmp
      (overloaded_decl_ref wcscmp))
    (using_declaration wcscoll
      (overloaded_decl_ref wcscoll))
    (using_declaration wcscpy
      (overloaded_decl_ref wcscpy))
    (using_declaration wcscspn
      (overloaded_decl_ref wcscspn))
    (using_declaration wcsftime
      (overloaded_decl_ref wcsftime))
    (using_declaration wcslen
      (overloaded_decl_ref wcslen))
    (using_declaration wcsncat
      (overloaded_decl_ref wcsncat))
    (using_declaration wcsncmp
      (overloaded_decl_ref wcsncmp))
    (using_declaration wcsncpy
      (overloaded_decl_ref wcsncpy))
    (using_declaration wcsrtombs
      (overloaded_decl_ref wcsrtombs))
    (using_declaration wcsspn
      (overloaded_decl_ref wcsspn))
    (using_declaration wcstod
      (overloaded_decl_ref wcstod))
    (using_declaration wcstof
      (overloaded_decl_ref wcstof))
    (using_declaration wcstok
      (overloaded_decl_ref wcstok))
    (using_declaration wcstol
      (overloaded_decl_ref wcstol))
    (using_declaration wcstoul
      (overloaded_decl_ref wcstoul))
    (using_declaration wcsxfrm
      (overloaded_decl_ref wcsxfrm))
    (using_declaration wctob
      (overloaded_decl_ref wctob))
    (using_declaration wmemcmp
      (overloaded_decl_ref wmemcmp))
    (using_declaration wmemcpy
      (overloaded_decl_ref wmemcpy))
    (using_declaration wmemmove
      (overloaded_decl_ref wmemmove))
    (using_declaration wmemset
      (overloaded_decl_ref wmemset))
    (using_declaration wprintf
      (overloaded_decl_ref wprintf))
    (using_declaration wscanf
      (overloaded_decl_ref wscanf))
    (using_declaration wcschr
      (overloaded_decl_ref wcschr))
    (using_declaration wcspbrk
      (overloaded_decl_ref wcspbrk))
    (using_declaration wcsrchr
      (overloaded_decl_ref wcsrchr))
    (using_declaration wcsstr
      (overloaded_decl_ref wcsstr))
    (using_declaration wmemchr
      (overloaded_decl_ref wmemchr))
    (function_decl wcschr
      (parm_decl __p)
      (parm_decl __c)
      (compound_stmt
        (return_stmt
          (call_expr wcschr
            (decl_ref_expr wcschr)
            (cxx_const_cast_expr
              (decl_ref_expr __p))
            (decl_ref_expr __c)))))
    (function_decl wcspbrk
      (parm_decl __s1)
      (parm_decl __s2)
      (compound_stmt
        (return_stmt
          (call_expr wcspbrk
            (decl_ref_expr wcspbrk)
            (cxx_const_cast_expr
              (decl_ref_expr __s1))
            (decl_ref_expr __s2)))))
    (function_decl wcsrchr
      (parm_decl __p)
      (parm_decl __c)
      (compound_stmt
        (return_stmt
          (call_expr wcsrchr
            (decl_ref_expr wcsrchr)
            (cxx_const_cast_expr
              (decl_ref_expr __p))
            (decl_ref_expr __c)))))
    (function_decl wcsstr
      (parm_decl __s1)
      (parm_decl __s2)
      (compound_stmt
        (return_stmt
          (call_expr wcsstr
            (decl_ref_expr wcsstr)
            (cxx_const_cast_expr
              (decl_ref_expr __s1))
            (decl_ref_expr __s2)))))
    (function_decl wmemchr
      (parm_decl __p)
      (parm_decl __c)
      (parm_decl __n
        (type_ref std::size_t))
      (compound_stmt
        (return_stmt
          (call_expr wmemchr
            (decl_ref_expr wmemchr)
            (cxx_const_cast_expr
              (decl_ref_expr __p))
            (decl_ref_expr __c)
            (decl_ref_expr __n))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cwchar
  (namespace __gnu_cxx
    (using_declaration wcstold
      (overloaded_decl_ref wcstold))
    (using_declaration wcstoll
      (overloaded_decl_ref wcstoll))
    (using_declaration wcstoull
      (overloaded_decl_ref wcstoull)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cwchar
  (namespace std
    (using_declaration wcstold
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref wcstold))
    (using_declaration wcstoll
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref wcstoll))
    (using_declaration wcstoull
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref wcstoull)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/cwchar
  (namespace std
    (using_declaration wcstof
      (namespace_ref std)
      (overloaded_decl_ref wcstof))
    (using_declaration vfwscanf
      (namespace_ref std)
      (overloaded_decl_ref vfwscanf))
    (using_declaration vswscanf
      (namespace_ref std)
      (overloaded_decl_ref vswscanf))
    (using_declaration vwscanf
      (namespace_ref std)
      (overloaded_decl_ref vwscanf))
    (using_declaration wcstold
      (namespace_ref std)
      (overloaded_decl_ref wcstold))
    (using_declaration wcstoll
      (namespace_ref std)
      (overloaded_decl_ref wcstoll))
    (using_declaration wcstoull
      (namespace_ref std)
      (overloaded_decl_ref wcstoull)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/postypes.h
  (namespace std
    (visibility_attr default)
    (typedef_decl streamoff)
    (typedef_decl streamsize
      (type_ref std::ptrdiff_t))
    (class_template fpos
      (template_type_parameter _StateT)
      (cxx_access_spec_decl)
      (field_decl _M_off
        (type_ref std::streamoff))
      (field_decl _M_state
        (type_ref _StateT))
      (cxx_access_spec_decl)
      (constructor fpos<_StateT>
        (member_ref _M_off)
        (integer_literal 0)
        (member_ref _M_state)
        (compound_stmt))
      (constructor fpos<_StateT>
        (parm_decl __off
          (type_ref std::streamoff))
        (member_ref _M_off)
        (decl_ref_expr __off)
        (member_ref _M_state)
        (compound_stmt))
      (constructor fpos<_StateT>
        (parm_decl
          (type_ref fpos<_StateT>)))
      (cxx_method operator=
        (type_ref fpos<_StateT>)
        (parm_decl
          (type_ref fpos<_StateT>)))
      (destructor ~fpos<_StateT>)
      (conversion_function operator long
        (type_ref std::streamoff)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_off))))
      (cxx_method state
        (parm_decl __st
          (type_ref _StateT))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_state)
            (decl_ref_expr __st))))
      (cxx_method state
        (type_ref _StateT)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_state))))
      (cxx_method operator+=
        (type_ref fpos<_StateT>)
        (parm_decl __off
          (type_ref std::streamoff))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_off)
            (decl_ref_expr __off))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator-=
        (type_ref fpos<_StateT>)
        (parm_decl __off
          (type_ref std::streamoff))
        (compound_stmt
          (compound_assignment_operator
            (member_ref_expr _M_off)
            (decl_ref_expr __off))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator+
        (type_ref fpos<_StateT>)
        (parm_decl __off
          (type_ref std::streamoff))
        (compound_stmt
          (decl_stmt
            (var_decl __pos
              (type_ref fpos<_StateT>)
              (unary_operator
                (cxx_this_expr))))
          (compound_assignment_operator
            (decl_ref_expr __pos)
            (decl_ref_expr __off))
          (return_stmt
            (decl_ref_expr __pos))))
      (cxx_method operator-
        (type_ref fpos<_StateT>)
        (parm_decl __off
          (type_ref std::streamoff))
        (compound_stmt
          (decl_stmt
            (var_decl __pos
              (type_ref fpos<_StateT>)
              (unary_operator
                (cxx_this_expr))))
          (compound_assignment_operator
            (decl_ref_expr __pos)
            (decl_ref_expr __off))
          (return_stmt
            (decl_ref_expr __pos))))
      (cxx_method operator-
        (type_ref std::streamoff)
        (parm_decl __other
          (type_ref fpos<_StateT>))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr _M_off)
              (decl_ref_expr
                (overloaded_decl_ref operator-))
              (member_ref_expr
                (decl_ref_expr __other)))))))
    (function_template operator==
      (template_type_parameter _StateT)
      (parm_decl __lhs
        (template_ref fpos)
        (type_ref _StateT))
      (parm_decl __rhs
        (template_ref fpos)
        (type_ref _StateT))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr
              (type_ref std::streamoff)
              (decl_ref_expr __lhs))
            (call_expr
              (type_ref std::streamoff)
              (decl_ref_expr __rhs))))))
    (function_template operator!=
      (template_type_parameter _StateT)
      (parm_decl __lhs
        (template_ref fpos)
        (type_ref _StateT))
      (parm_decl __rhs
        (template_ref fpos)
        (type_ref _StateT))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr
              (type_ref std::streamoff)
              (decl_ref_expr __lhs))
            (call_expr
              (type_ref std::streamoff)
              (decl_ref_expr __rhs))))))
    (typedef_decl streampos
      (template_ref fpos))
    (typedef_decl wstreampos
      (template_ref fpos))
    (typedef_decl u16streampos
      (template_ref fpos))
    (typedef_decl u32streampos
      (template_ref fpos)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/iosfwd
  (namespace std
    (visibility_attr default)
    (class_decl ios_base)
    (class_template basic_ios
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_streambuf
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_istream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_ostream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_iostream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/iosfwd
    (namespace __cxx11
      (class_template basic_stringbuf
        (template_type_parameter _CharT)
        (template_type_parameter _Traits
          (template_ref char_traits)
          (type_ref _CharT))
        (template_type_parameter _Alloc
          (template_ref allocator)
          (type_ref _CharT)))
      (class_template basic_istringstream
        (template_type_parameter _CharT)
        (template_type_parameter _Traits
          (template_ref char_traits)
          (type_ref _CharT))
        (template_type_parameter _Alloc
          (template_ref allocator)
          (type_ref _CharT)))
      (class_template basic_ostringstream
        (template_type_parameter _CharT)
        (template_type_parameter _Traits
          (template_ref char_traits)
          (type_ref _CharT))
        (template_type_parameter _Alloc
          (template_ref allocator)
          (type_ref _CharT)))
      (class_template basic_stringstream
        (template_type_parameter _CharT)
        (template_type_parameter _Traits
          (template_ref char_traits)
          (type_ref _CharT))
        (template_type_parameter _Alloc
          (template_ref allocator)
          (type_ref _CharT))))
    (class_template basic_filebuf
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_ifstream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_ofstream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template basic_fstream
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template istreambuf_iterator
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (class_template ostreambuf_iterator
      (template_type_parameter _CharT)
      (template_type_parameter _Traits
        (template_ref char_traits)
        (type_ref _CharT)))
    (typedef_decl ios
      (template_ref basic_ios))
    (typedef_decl streambuf
      (template_ref basic_streambuf))
    (typedef_decl istream
      (template_ref basic_istream))
    (typedef_decl ostream
      (template_ref basic_ostream))
    (typedef_decl iostream
      (template_ref basic_iostream))
    (typedef_decl stringbuf
      (template_ref basic_stringbuf))
    (typedef_decl istringstream
      (template_ref basic_istringstream))
    (typedef_decl ostringstream
      (template_ref basic_ostringstream))
    (typedef_decl stringstream
      (template_ref basic_stringstream))
    (typedef_decl filebuf
      (template_ref basic_filebuf))
    (typedef_decl ifstream
      (template_ref basic_ifstream))
    (typedef_decl ofstream
      (template_ref basic_ofstream))
    (typedef_decl fstream
      (template_ref basic_fstream))
    (typedef_decl wios
      (template_ref basic_ios))
    (typedef_decl wstreambuf
      (template_ref basic_streambuf))
    (typedef_decl wistream
      (template_ref basic_istream))
    (typedef_decl wostream
      (template_ref basic_ostream))
    (typedef_decl wiostream
      (template_ref basic_iostream))
    (typedef_decl wstringbuf
      (template_ref basic_stringbuf))
    (typedef_decl wistringstream
      (template_ref basic_istringstream))
    (typedef_decl wostringstream
      (template_ref basic_ostringstream))
    (typedef_decl wstringstream
      (template_ref basic_stringstream))
    (typedef_decl wfilebuf
      (template_ref basic_filebuf))
    (typedef_decl wifstream
      (template_ref basic_ifstream))
    (typedef_decl wofstream
      (template_ref basic_ofstream))
    (typedef_decl wfstream
      (template_ref basic_fstream)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/typeinfo
  (namespace __cxxabiv1
    (class_decl __class_type_info))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/typeinfo
  (namespace std
    (class_decl type_info
      (cxx_access_spec_decl)
      (destructor ~type_info)
      (cxx_method name
        (compound_stmt
          (return_stmt
            (conditional_operator
              (binary_operator
                (array_subscript_expr
                  (member_ref_expr __name)
                  (integer_literal 0))
                (character_literal))
              (binary_operator
                (member_ref_expr __name)
                (integer_literal 1))
              (member_ref_expr __name)))))
      (cxx_method before
        (parm_decl __arg
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (conditional_operator
              (paren_expr
                (binary_operator
                  (binary_operator
                    (array_subscript_expr
                      (member_ref_expr __name)
                      (integer_literal 0))
                    (character_literal))
                  (binary_operator
                    (array_subscript_expr
                      (member_ref_expr __name
                        (decl_ref_expr __arg))
                      (integer_literal 0))
                    (character_literal))))
              (binary_operator
                (member_ref_expr __name)
                (member_ref_expr __name
                  (decl_ref_expr __arg)))
              (binary_operator
                (call_expr __builtin_strcmp
                  (decl_ref_expr __builtin_strcmp)
                  (member_ref_expr __name)
                  (member_ref_expr __name
                    (decl_ref_expr __arg)))
                (integer_literal 0))))))
      (cxx_method operator==
        (parm_decl __arg
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (paren_expr
              (binary_operator
                (paren_expr
                  (binary_operator
                    (member_ref_expr __name)
                    (member_ref_expr __name
                      (decl_ref_expr __arg))))
                (paren_expr
                  (binary_operator
                    (binary_operator
                      (array_subscript_expr
                        (member_ref_expr __name)
                        (integer_literal 0))
                      (character_literal))
                    (binary_operator
                      (call_expr __builtin_strcmp
                        (decl_ref_expr __builtin_strcmp)
                        (member_ref_expr __name)
                        (member_ref_expr __name
                          (decl_ref_expr __arg)))
                      (integer_literal 0)))))))))
      (cxx_method operator!=
        (parm_decl __arg
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (unary_operator
              (call_expr operator==
                (member_ref_expr operator==)
                (decl_ref_expr __arg))))))
      (cxx_method hash_code
        (type_ref std::size_t)
        (compound_stmt
          (return_stmt
            (call_expr _Hash_bytes
              (decl_ref_expr _Hash_bytes)
              (call_expr name
                (member_ref_expr name))
              (call_expr __builtin_strlen
                (decl_ref_expr __builtin_strlen)
                (call_expr name
                  (member_ref_expr name)))
              (cxx_static_cast_expr
                (type_ref std::size_t)
                (integer_literal 0xc70f6907UL))))))
      (cxx_method __is_pointer_p)
      (cxx_method __is_function_p)
      (cxx_method __do_catch
        (parm_decl __thr_type
          (type_ref class std::type_info))
        (parm_decl __thr_obj)
        (parm_decl __outer))
      (cxx_method __do_upcast
        (parm_decl __target
          (namespace_ref __cxxabiv1)
          (type_ref class __cxxabiv1::__class_type_info))
        (parm_decl __obj_ptr))
      (cxx_access_spec_decl)
      (field_decl __name)
      (constructor type_info
        (parm_decl __n)
        (member_ref __name)
        (decl_ref_expr __n)
        (compound_stmt))
      (cxx_access_spec_decl)
      (cxx_method operator=
        (type_ref class std::type_info)
        (parm_decl
          (type_ref class std::type_info)))
      (constructor type_info
        (parm_decl
          (type_ref class std::type_info))))
    (class_decl bad_cast
      (cxx_base_specifier class std::exception
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (constructor bad_cast
        (compound_stmt))
      (destructor ~bad_cast)
      (cxx_method what))
    (class_decl bad_typeid
      (cxx_base_specifier class std::exception
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (constructor bad_typeid
        (compound_stmt))
      (destructor ~bad_typeid)
      (cxx_method what)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/allocated_ptr.h
  (namespace std
    (visibility_attr default)
    (class_template __allocated_ptr
      (template_type_parameter _Alloc)
      (type_alias_decl pointer
        (template_ref allocator_traits)
        (type_ref _Alloc))
      (type_alias_decl value_type
        (template_ref allocator_traits)
        (type_ref _Alloc))
      (constructor __allocated_ptr<_Alloc>
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __ptr
          (type_ref std::__allocated_ptr::pointer))
        (member_ref _M_alloc)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __addressof))
          (decl_ref_expr __a))
        (member_ref _M_ptr)
        (decl_ref_expr __ptr)
        (compound_stmt))
      (function_template __allocated_ptr<_Alloc>
        (template_type_parameter _Ptr)
        (template_type_parameter _Req
          (template_ref _Require)
          (template_ref is_same)
          (type_ref _Ptr)
          (type_ref std::__allocated_ptr::value_type))
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __ptr
          (type_ref _Ptr))
        (member_ref _M_alloc)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __addressof))
          (decl_ref_expr __a))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (template_ref pointer_traits)
            (type_ref std::__allocated_ptr::pointer))
          (unary_operator
            (decl_ref_expr __ptr)))
        (compound_stmt))
      (constructor __allocated_ptr<_Alloc>
        (parm_decl __gd
          (type_ref __allocated_ptr<_Alloc>))
        (member_ref _M_alloc)
        (member_ref_expr
          (decl_ref_expr __gd))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __gd))
        (compound_stmt
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __gd))
            (cxx_null_ptr_literal_expr))))
      (destructor ~__allocated_ptr<_Alloc>
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_ptr)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (namespace_ref std)
                (template_ref allocator_traits)
                (type_ref _Alloc))
              (unary_operator
                (member_ref_expr _M_alloc))
              (member_ref_expr _M_ptr)
              (integer_literal 1)))))
      (cxx_method operator=
        (type_ref __allocated_ptr<_Alloc>)
        (parm_decl
          (namespace_ref std)
          (type_ref std::nullptr_t))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (cxx_null_ptr_literal_expr))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method get
        (type_ref std::__allocated_ptr::value_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __to_address))
              (member_ref_expr _M_ptr)))))
      (cxx_access_spec_decl)
      (field_decl _M_alloc
        (type_ref _Alloc))
      (field_decl _M_ptr
        (type_ref std::__allocated_ptr::pointer)))
    (function_template __allocate_guarded
      (template_type_parameter _Alloc)
      (template_ref __allocated_ptr)
      (type_ref _Alloc)
      (parm_decl __a
        (type_ref _Alloc))
      (compound_stmt
        (return_stmt
          (init_list_expr
            (decl_ref_expr __a)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (template_ref allocator_traits)
                (type_ref _Alloc))
              (decl_ref_expr __a)
              (integer_literal 1)))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/refwrap.h
  (namespace std
    (visibility_attr default)
    (class_template _Maybe_unary_or_binary_function
      (template_type_parameter _Res)
      (template_type_parameter _ArgTypes))
    (class_template_partial_specialization _Maybe_unary_or_binary_function
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (type_ref _T1)
      (cxx_base_specifier std::unary_function<_T1, _Res>
        (namespace_ref std)
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Maybe_unary_or_binary_function
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (type_ref _T1)
      (type_ref _T2)
      (cxx_base_specifier std::binary_function<_T1, _T2, _Res>
        (namespace_ref std)
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template _Mem_fn_traits
      (template_type_parameter _Signature))
    (class_template _Mem_fn_traits_base
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_alias_decl __result_type
        (type_ref _Res))
      (type_alias_decl __maybe_type
        (template_ref _Maybe_unary_or_binary_function)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __arity
        (template_ref integral_constant)
        (type_ref std::size_t)
        (size_of_pack_expr
          (type_ref _ArgTypes))))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::false_type)))
    (class_template_partial_specialization _Mem_fn_traits
      (template_type_parameter _Res)
      (template_type_parameter _Class)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (cxx_base_specifier _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
        (template_ref _Mem_fn_traits_base)
        (type_ref _Res)
        (type_ref _Class)
        (type_ref _ArgTypes))
      (type_alias_decl __vararg
        (type_ref std::true_type)))
    (class_template _Maybe_get_result_type
      (template_type_parameter _Functor)
      (template_type_parameter
        (template_ref __void_t)))
    (class_template_partial_specialization _Maybe_get_result_type
      (template_type_parameter _Functor)
      (type_ref _Functor)
      (template_ref __void_t)
      (type_ref _Functor)
      (typedef_decl result_type
        (type_ref _Functor)))
    (class_template _Weak_result_type_impl
      (template_type_parameter _Functor)
      (cxx_base_specifier _Maybe_get_result_type<_Functor>
        (template_ref _Maybe_get_result_type)
        (type_ref _Functor)))
    (class_template_partial_specialization _Weak_result_type_impl
      (template_type_parameter _Res)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (typedef_decl result_type
        (type_ref _Res)))
    (class_template_partial_specialization _Weak_result_type_impl
      (template_type_parameter _Res)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (typedef_decl result_type
        (type_ref _Res)))
    (class_template_partial_specialization _Weak_result_type_impl
      (template_type_parameter _Res)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (typedef_decl result_type
        (type_ref _Res)))
    (class_template_partial_specialization _Weak_result_type_impl
      (template_type_parameter _Res)
      (template_type_parameter _ArgTypes)
      (type_ref _Res)
      (parm_decl
        (type_ref _ArgTypes))
      (typedef_decl result_type
        (type_ref _Res)))
    (class_template _Weak_result_type_memfun
      (template_type_parameter _Functor)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_member_function_pointer)
          (type_ref _Functor)))
      (cxx_base_specifier _Weak_result_type_impl<_Functor>
        (template_ref _Weak_result_type_impl)
        (type_ref _Functor)))
    (class_template_partial_specialization _Weak_result_type_memfun
      (template_type_parameter _MemFunPtr)
      (type_ref _MemFunPtr)
      (cxx_bool_literal_expr)
      (type_alias_decl result_type
        (template_ref _Mem_fn_traits)
        (type_ref _MemFunPtr)))
    (class_template_partial_specialization _Weak_result_type_memfun
      (template_type_parameter _Func)
      (template_type_parameter _Class)
      (type_ref _Func)
      (cxx_bool_literal_expr))
    (class_template _Weak_result_type
      (template_type_parameter _Functor)
      (cxx_base_specifier _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
        (template_ref _Weak_result_type_memfun)
        (template_ref remove_cv)
        (type_ref _Functor)))
    (class_template _Refwrap_base_arg1
      (template_type_parameter _Tp)
      (template_type_parameter
        (template_ref __void_t)))
    (class_template_partial_specialization _Refwrap_base_arg1
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (template_ref __void_t)
      (type_ref _Tp)
      (typedef_decl argument_type
        (type_ref _Tp)))
    (class_template _Refwrap_base_arg2
      (template_type_parameter _Tp)
      (template_type_parameter
        (template_ref __void_t)))
    (class_template_partial_specialization _Refwrap_base_arg2
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (template_ref __void_t)
      (type_ref _Tp)
      (type_ref _Tp)
      (typedef_decl first_argument_type
        (type_ref _Tp))
      (typedef_decl second_argument_type
        (type_ref _Tp)))
    (class_template _Reference_wrapper_base
      (template_type_parameter _Tp)
      (cxx_base_specifier _Weak_result_type<_Tp>
        (template_ref _Weak_result_type)
        (type_ref _Tp))
      (cxx_base_specifier _Refwrap_base_arg1<_Tp>
        (template_ref _Refwrap_base_arg1)
        (type_ref _Tp))
      (cxx_base_specifier _Refwrap_base_arg2<_Tp>
        (template_ref _Refwrap_base_arg2)
        (type_ref _Tp)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (cxx_base_specifier unary_function<_T1, _Res>
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (cxx_base_specifier unary_function<_T1, _Res>
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (cxx_base_specifier unary_function<_T1, _Res>
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (cxx_base_specifier unary_function<_T1, _Res>
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (parm_decl
        (type_ref _T2))
      (cxx_base_specifier binary_function<_T1, _T2, _Res>
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (parm_decl
        (type_ref _T2))
      (cxx_base_specifier binary_function<_T1, _T2, _Res>
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (parm_decl
        (type_ref _T2))
      (cxx_base_specifier binary_function<_T1, _T2, _Res>
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (parm_decl
        (type_ref _T2))
      (cxx_base_specifier binary_function<_T1, _T2, _Res>
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (cxx_base_specifier unary_function<_T1, _Res>
        (template_ref unary_function)
        (type_ref _T1)
        (type_ref _Res)))
    (class_template_partial_specialization _Reference_wrapper_base
      (template_type_parameter _Res)
      (template_type_parameter _T1)
      (template_type_parameter _T2)
      (type_ref _Res)
      (parm_decl
        (type_ref _T1))
      (parm_decl
        (type_ref _T2))
      (cxx_base_specifier binary_function<_T1, _T2, _Res>
        (template_ref binary_function)
        (type_ref _T1)
        (type_ref _T2)
        (type_ref _Res)))
    (class_template _Reference_wrapper_base_memfun
      (template_type_parameter _Tp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_member_function_pointer)
          (type_ref _Tp)))
      (cxx_base_specifier _Reference_wrapper_base<_Tp>
        (template_ref _Reference_wrapper_base)
        (type_ref _Tp)))
    (class_template_partial_specialization _Reference_wrapper_base_memfun
      (template_type_parameter _MemFunPtr)
      (type_ref _MemFunPtr)
      (cxx_bool_literal_expr)
      (cxx_base_specifier _Mem_fn_traits<_MemFunPtr>::__maybe_type
        (template_ref _Mem_fn_traits)
        (type_ref _MemFunPtr))
      (type_alias_decl result_type
        (template_ref _Mem_fn_traits)
        (type_ref _MemFunPtr)))
    (class_template reference_wrapper
      (template_type_parameter _Tp)
      (cxx_base_specifier _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>
        (template_ref _Reference_wrapper_base_memfun)
        (template_ref remove_cv)
        (type_ref _Tp))
      (field_decl _M_data
        (type_ref _Tp))
      (cxx_method _S_fun
        (type_ref _Tp)
        (parm_decl __r
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __addressof))
              (decl_ref_expr __r)))))
      (cxx_method _S_fun
        (parm_decl
          (type_ref _Tp)))
      (type_alias_template_decl __not_same
        (template_type_parameter _Up)
        (template_type_parameter _Up2
          (template_ref __remove_cvref_t)
          (type_ref _Up))
        (type_alias_decl __not_same
          (template_ref enable_if)
          (unary_operator
            (decl_ref_expr
              (template_ref is_same)
              (type_ref reference_wrapper<_Tp>)
              (type_ref _Up2)))))
      (cxx_access_spec_decl)
      (typedef_decl type
        (type_ref _Tp))
      (function_template reference_wrapper<_Tp>
        (template_type_parameter _Up)
        (template_type_parameter
          (template_ref __not_same)
          (type_ref _Up))
        (template_type_parameter
          (call_expr
            (decl_ref_expr
              (type_ref reference_wrapper<_Tp>)
              (overloaded_decl_ref _S_fun))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Up)))))
        (parm_decl __uref
          (type_ref _Up))
        (member_ref _M_data)
        (call_expr
          (decl_ref_expr
            (type_ref reference_wrapper<_Tp>)
            (overloaded_decl_ref _S_fun))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Up))
            (decl_ref_expr __uref)))
        (compound_stmt))
      (constructor reference_wrapper<_Tp>
        (parm_decl
          (type_ref reference_wrapper<_Tp>)))
      (cxx_method operator=
        (type_ref reference_wrapper<_Tp>)
        (parm_decl
          (type_ref reference_wrapper<_Tp>)))
      (conversion_function operator type-parameter-0-0 &
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (cxx_this_expr))))))
      (cxx_method get
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (unary_operator
              (member_ref_expr _M_data)))))
      (function_template operator()
        (template_type_parameter _Args)
        (template_ref result_of)
        (type_ref _Tp)
        (parm_decl
          (type_ref _Args))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (return_stmt
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref __invoke))
              (call_expr get
                (member_ref_expr get))
              (pack_expansion_expr
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref forward)
                    (type_ref _Args))
                  (decl_ref_expr __args))))))))
    (function_template ref
      (template_type_parameter _Tp)
      (template_ref reference_wrapper)
      (type_ref _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reference_wrapper)
            (type_ref _Tp)
            (decl_ref_expr __t)))))
    (function_template cref
      (template_type_parameter _Tp)
      (template_ref reference_wrapper)
      (type_ref _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (template_ref reference_wrapper)
            (type_ref _Tp)
            (decl_ref_expr __t)))))
    (function_template ref
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref _Tp)))
    (function_template cref
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref _Tp)))
    (function_template ref
      (template_type_parameter _Tp)
      (template_ref reference_wrapper)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref reference_wrapper)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __t))))
    (function_template cref
      (template_type_parameter _Tp)
      (template_ref reference_wrapper)
      (type_ref _Tp)
      (parm_decl __t
        (template_ref reference_wrapper)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (init_list_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __t))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/aligned_buffer.h
  (namespace __gnu_cxx
    (class_template __aligned_membuf
      (template_type_parameter _Tp)
      (struct_decl _Tp2
        (field_decl _M_t
          (type_ref _Tp)))
      (field_decl _M_storage
        (aligned_attr)
        (cxx_unary_expr
          (type_ref _Tp)))
      (constructor __aligned_membuf<_Tp>)
      (constructor __aligned_membuf<_Tp>
        (parm_decl
          (namespace_ref std)
          (type_ref std::nullptr_t))
        (compound_stmt))
      (cxx_method _M_addr
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (unary_operator
                (member_ref_expr _M_storage))))))
      (cxx_method _M_addr
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (unary_operator
                (member_ref_expr _M_storage))))))
      (cxx_method _M_ptr
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_addr)))))))
      (cxx_method _M_ptr
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_addr))))))))
    (class_template __aligned_buffer
      (template_type_parameter _Tp)
      (cxx_base_specifier std::aligned_storage<sizeof(_Tp), __alignof(_Tp)>
        (namespace_ref std)
        (template_ref aligned_storage)
        (cxx_unary_expr
          (type_ref _Tp))
        (cxx_unary_expr
          (type_ref _Tp)))
      (field_decl _M_storage
        (namespace_ref std)
        (template_ref aligned_storage)
        (cxx_unary_expr
          (type_ref _Tp))
        (cxx_unary_expr
          (type_ref _Tp)))
      (constructor __aligned_buffer<_Tp>)
      (constructor __aligned_buffer<_Tp>
        (parm_decl
          (namespace_ref std)
          (type_ref std::nullptr_t))
        (compound_stmt))
      (cxx_method _M_addr
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (unary_operator
                (member_ref_expr _M_storage))))))
      (cxx_method _M_addr
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (unary_operator
                (member_ref_expr _M_storage))))))
      (cxx_method _M_ptr
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_addr)))))))
      (cxx_method _M_ptr
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_addr)))))))))
  (typedef_decl time_t
    (type_ref __time_t))
  (struct_decl timespec
    (field_decl tv_sec
      (type_ref __time_t))
    (field_decl tv_nsec
      (type_ref __syscall_slong_t)))
  (typedef_decl pid_t
    (type_ref __pid_t))
  (struct_decl sched_param
    (field_decl sched_priority))
  (function_decl clone
    (parm_decl __fn
      (parm_decl __arg))
    (parm_decl __child_stack)
    (parm_decl __flags)
    (parm_decl __arg))
  (function_decl unshare
    (parm_decl __flags))
  (function_decl sched_getcpu)
  (function_decl getcpu
    (parm_decl)
    (parm_decl))
  (function_decl setns
    (parm_decl __fd)
    (parm_decl __nstype))
  (typedef_decl __cpu_mask)
  (struct_decl
    (field_decl __bits
      (type_ref __cpu_mask)
      (binary_operator
        (integer_literal ...)
        (paren_expr
          (binary_operator
            (integer_literal ...)
            (cxx_unary_expr
              (type_ref __cpu_mask)))))))
  (typedef_decl cpu_set_t
    (struct_decl
      (field_decl __bits
        (type_ref __cpu_mask)
        (binary_operator
          (integer_literal ...)
          (paren_expr
            (binary_operator
              (integer_literal ...)
              (cxx_unary_expr
                (type_ref __cpu_mask))))))))
  (function_decl __sched_cpucount
    (parm_decl __setsize
      (type_ref size_t))
    (parm_decl __setp
      (type_ref cpu_set_t)))
  (function_decl __sched_cpualloc
    (type_ref cpu_set_t)
    (parm_decl __count
      (type_ref size_t)))
  (function_decl __sched_cpufree
    (parm_decl __set
      (type_ref cpu_set_t)))
  (function_decl sched_setparam
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl sched_getparam
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl sched_setscheduler
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __policy)
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl sched_getscheduler
    (parm_decl __pid
      (type_ref __pid_t)))
  (function_decl sched_yield)
  (function_decl sched_get_priority_max
    (parm_decl __algorithm))
  (function_decl sched_get_priority_min
    (parm_decl __algorithm))
  (function_decl sched_rr_get_interval
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __t
      (type_ref struct timespec)))
  (function_decl sched_setaffinity
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (function_decl sched_getaffinity
    (parm_decl __pid
      (type_ref __pid_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (struct_decl timeval
    (field_decl tv_sec
      (type_ref __time_t))
    (field_decl tv_usec
      (type_ref __suseconds_t)))
  (struct_decl timex
    (field_decl modes)
    (field_decl offset
      (type_ref __syscall_slong_t))
    (field_decl freq
      (type_ref __syscall_slong_t))
    (field_decl maxerror
      (type_ref __syscall_slong_t))
    (field_decl esterror
      (type_ref __syscall_slong_t))
    (field_decl status)
    (field_decl constant
      (type_ref __syscall_slong_t))
    (field_decl precision
      (type_ref __syscall_slong_t))
    (field_decl tolerance
      (type_ref __syscall_slong_t))
    (field_decl time
      (type_ref struct timeval))
    (field_decl tick
      (type_ref __syscall_slong_t))
    (field_decl ppsfreq
      (type_ref __syscall_slong_t))
    (field_decl jitter
      (type_ref __syscall_slong_t))
    (field_decl shift)
    (field_decl stabil
      (type_ref __syscall_slong_t))
    (field_decl jitcnt
      (type_ref __syscall_slong_t))
    (field_decl calcnt
      (type_ref __syscall_slong_t))
    (field_decl errcnt
      (type_ref __syscall_slong_t))
    (field_decl stbcnt
      (type_ref __syscall_slong_t))
    (field_decl tai)
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32))
    (field_decl
      (integer_literal 32)))
  (function_decl clock_adjtime
    (parm_decl __clock_id
      (type_ref __clockid_t))
    (parm_decl __utx
      (type_ref struct timex)))
  (typedef_decl clock_t
    (type_ref __clock_t))
  (struct_decl tm
    (field_decl tm_sec)
    (field_decl tm_min)
    (field_decl tm_hour)
    (field_decl tm_mday)
    (field_decl tm_mon)
    (field_decl tm_year)
    (field_decl tm_wday)
    (field_decl tm_yday)
    (field_decl tm_isdst)
    (field_decl tm_gmtoff)
    (field_decl tm_zone))
  (typedef_decl clockid_t
    (type_ref __clockid_t))
  (typedef_decl timer_t
    (type_ref __timer_t))
  (struct_decl itimerspec
    (field_decl it_interval
      (type_ref struct timespec))
    (field_decl it_value
      (type_ref struct timespec)))
  (struct_decl sigevent)
  (function_decl clock
    (type_ref clock_t))
  (function_decl time
    (type_ref time_t)
    (parm_decl __timer
      (type_ref time_t)))
  (function_decl difftime
    (const_attr)
    (parm_decl __time1
      (type_ref time_t))
    (parm_decl __time0
      (type_ref time_t)))
  (function_decl mktime
    (type_ref time_t)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl strftime
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __maxsize
      (type_ref size_t))
    (parm_decl __format)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl strptime
    (parm_decl __s)
    (parm_decl __fmt)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl strftime_l
    (type_ref size_t)
    (parm_decl __s)
    (parm_decl __maxsize
      (type_ref size_t))
    (parm_decl __format)
    (parm_decl __tp
      (type_ref struct tm))
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl strptime_l
    (parm_decl __s)
    (parm_decl __fmt)
    (parm_decl __tp
      (type_ref struct tm))
    (parm_decl __loc
      (type_ref locale_t)))
  (function_decl gmtime
    (type_ref struct tm)
    (parm_decl __timer
      (type_ref time_t)))
  (function_decl localtime
    (type_ref struct tm)
    (parm_decl __timer
      (type_ref time_t)))
  (function_decl gmtime_r
    (type_ref struct tm)
    (parm_decl __timer
      (type_ref time_t))
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl localtime_r
    (type_ref struct tm)
    (parm_decl __timer
      (type_ref time_t))
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl asctime
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl ctime
    (parm_decl __timer
      (type_ref time_t)))
  (function_decl asctime_r
    (parm_decl __tp
      (type_ref struct tm))
    (parm_decl __buf))
  (function_decl ctime_r
    (parm_decl __timer
      (type_ref time_t))
    (parm_decl __buf))
  (var_decl __tzname
    (integer_literal 2))
  (var_decl __daylight)
  (var_decl __timezone)
  (var_decl tzname
    (integer_literal 2))
  (function_decl tzset)
  (var_decl daylight)
  (var_decl timezone)
  (function_decl timegm
    (type_ref time_t)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl timelocal
    (type_ref time_t)
    (parm_decl __tp
      (type_ref struct tm)))
  (function_decl dysize
    (const_attr)
    (parm_decl __year))
  (function_decl nanosleep
    (parm_decl __requested_time
      (type_ref struct timespec))
    (parm_decl __remaining
      (type_ref struct timespec)))
  (function_decl clock_getres
    (parm_decl __clock_id
      (type_ref clockid_t))
    (parm_decl __res
      (type_ref struct timespec)))
  (function_decl clock_gettime
    (parm_decl __clock_id
      (type_ref clockid_t))
    (parm_decl __tp
      (type_ref struct timespec)))
  (function_decl clock_settime
    (parm_decl __clock_id
      (type_ref clockid_t))
    (parm_decl __tp
      (type_ref struct timespec)))
  (function_decl clock_nanosleep
    (parm_decl __clock_id
      (type_ref clockid_t))
    (parm_decl __flags)
    (parm_decl __req
      (type_ref struct timespec))
    (parm_decl __rem
      (type_ref struct timespec)))
  (function_decl clock_getcpuclockid
    (parm_decl __pid
      (type_ref pid_t))
    (parm_decl __clock_id
      (type_ref clockid_t)))
  (function_decl timer_create
    (parm_decl __clock_id
      (type_ref clockid_t))
    (parm_decl __evp
      (type_ref struct sigevent))
    (parm_decl __timerid
      (type_ref timer_t)))
  (function_decl timer_delete
    (parm_decl __timerid
      (type_ref timer_t)))
  (function_decl timer_settime
    (parm_decl __timerid
      (type_ref timer_t))
    (parm_decl __flags)
    (parm_decl __value
      (type_ref struct itimerspec))
    (parm_decl __ovalue
      (type_ref struct itimerspec)))
  (function_decl timer_gettime
    (parm_decl __timerid
      (type_ref timer_t))
    (parm_decl __value
      (type_ref struct itimerspec)))
  (function_decl timer_getoverrun
    (parm_decl __timerid
      (type_ref timer_t)))
  (function_decl timespec_get
    (parm_decl __ts
      (type_ref struct timespec))
    (parm_decl __base))
  (function_decl timespec_getres
    (parm_decl __ts
      (type_ref struct timespec))
    (parm_decl __base))
  (var_decl getdate_err)
  (function_decl getdate
    (type_ref struct tm)
    (parm_decl __string))
  (function_decl getdate_r
    (parm_decl __string)
    (parm_decl __resbufp
      (type_ref struct tm)))
  (union_decl
    (field_decl __value64)
    (struct_decl
      (field_decl __low)
      (field_decl __high))
    (field_decl __value32
      (struct_decl
        (field_decl __low)
        (field_decl __high))))
  (typedef_decl __atomic_wide_counter
    (union_decl
      (field_decl __value64)
      (struct_decl
        (field_decl __low)
        (field_decl __high))
      (field_decl __value32
        (struct_decl
          (field_decl __low)
          (field_decl __high)))))
  (struct_decl __pthread_internal_list
    (field_decl __prev
      (type_ref struct __pthread_internal_list))
    (field_decl __next
      (type_ref struct __pthread_internal_list)))
  (typedef_decl __pthread_list_t
    (struct_decl __pthread_internal_list
      (field_decl __prev
        (type_ref struct __pthread_internal_list))
      (field_decl __next
        (type_ref struct __pthread_internal_list))))
  (struct_decl __pthread_internal_slist
    (field_decl __next
      (type_ref struct __pthread_internal_slist)))
  (typedef_decl __pthread_slist_t
    (struct_decl __pthread_internal_slist
      (field_decl __next
        (type_ref struct __pthread_internal_slist))))
  (struct_decl __pthread_mutex_s
    (field_decl __lock)
    (field_decl __count)
    (field_decl __owner)
    (field_decl __nusers)
    (field_decl __kind)
    (field_decl __spins)
    (field_decl __elision)
    (field_decl __list
      (type_ref __pthread_list_t)))
  (struct_decl __pthread_rwlock_arch_t
    (field_decl __readers)
    (field_decl __writers)
    (field_decl __wrphase_futex)
    (field_decl __writers_futex)
    (field_decl __pad3)
    (field_decl __pad4)
    (field_decl __cur_writer)
    (field_decl __shared)
    (field_decl __rwelision)
    (field_decl __pad1
      (integer_literal 7))
    (field_decl __pad2)
    (field_decl __flags))
  (struct_decl __pthread_cond_s
    (field_decl __wseq
      (type_ref __atomic_wide_counter))
    (field_decl __g1_start
      (type_ref __atomic_wide_counter))
    (field_decl __g_refs
      (integer_literal 2))
    (field_decl __g_size
      (integer_literal 2))
    (field_decl __g1_orig_size)
    (field_decl __wrefs)
    (field_decl __g_signals
      (integer_literal 2)))
  (typedef_decl __tss_t)
  (typedef_decl __thrd_t)
  (struct_decl
    (field_decl __data))
  (typedef_decl __once_flag
    (struct_decl
      (field_decl __data)))
  (typedef_decl pthread_t)
  (union_decl
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_mutexattr_t
    (union_decl
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (union_decl
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_condattr_t
    (union_decl
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (typedef_decl pthread_key_t)
  (typedef_decl pthread_once_t)
  (union_decl pthread_attr_t
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_attr_t
    (type_ref union pthread_attr_t))
  (union_decl
    (field_decl __data
      (type_ref struct __pthread_mutex_s))
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_mutex_t
    (union_decl
      (field_decl __data
        (type_ref struct __pthread_mutex_s))
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (union_decl
    (field_decl __data
      (type_ref struct __pthread_cond_s))
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_cond_t
    (union_decl
      (field_decl __data
        (type_ref struct __pthread_cond_s))
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (union_decl
    (field_decl __data
      (type_ref struct __pthread_rwlock_arch_t))
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_rwlock_t
    (union_decl
      (field_decl __data
        (type_ref struct __pthread_rwlock_arch_t))
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (union_decl
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_rwlockattr_t
    (union_decl
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (typedef_decl pthread_spinlock_t)
  (union_decl
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_barrier_t
    (union_decl
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (union_decl
    (field_decl __size
      (integer_literal))
    (field_decl __align))
  (typedef_decl pthread_barrierattr_t
    (union_decl
      (field_decl __size
        (integer_literal))
      (field_decl __align)))
  (typedef_decl __jmp_buf
    (integer_literal 8))
  (struct_decl
    (field_decl __val
      (paren_expr
        (binary_operator
          (integer_literal ...)
          (paren_expr
            (binary_operator
              (integer_literal ...)
              (cxx_unary_expr)))))))
  (typedef_decl __sigset_t
    (struct_decl
      (field_decl __val
        (paren_expr
          (binary_operator
            (integer_literal ...)
            (paren_expr
              (binary_operator
                (integer_literal ...)
                (cxx_unary_expr))))))))
  (struct_decl __jmp_buf_tag
    (field_decl __jmpbuf
      (type_ref __jmp_buf))
    (field_decl __mask_was_saved)
    (field_decl __saved_mask
      (type_ref __sigset_t)))
  (function_decl __sysconf
    (parm_decl __name))
  (enum_decl
    (enum_constant_decl PTHREAD_CREATE_JOINABLE)
    (enum_constant_decl PTHREAD_CREATE_DETACHED))
  (enum_decl
    (enum_constant_decl PTHREAD_MUTEX_TIMED_NP)
    (enum_constant_decl PTHREAD_MUTEX_RECURSIVE_NP)
    (enum_constant_decl PTHREAD_MUTEX_ERRORCHECK_NP)
    (enum_constant_decl PTHREAD_MUTEX_ADAPTIVE_NP)
    (enum_constant_decl PTHREAD_MUTEX_NORMAL
      (decl_ref_expr PTHREAD_MUTEX_TIMED_NP))
    (enum_constant_decl PTHREAD_MUTEX_RECURSIVE
      (decl_ref_expr PTHREAD_MUTEX_RECURSIVE_NP))
    (enum_constant_decl PTHREAD_MUTEX_ERRORCHECK
      (decl_ref_expr PTHREAD_MUTEX_ERRORCHECK_NP))
    (enum_constant_decl PTHREAD_MUTEX_DEFAULT
      (decl_ref_expr PTHREAD_MUTEX_NORMAL))
    (enum_constant_decl PTHREAD_MUTEX_FAST_NP
      (decl_ref_expr PTHREAD_MUTEX_TIMED_NP)))
  (enum_decl
    (enum_constant_decl PTHREAD_MUTEX_STALLED)
    (enum_constant_decl PTHREAD_MUTEX_STALLED_NP
      (decl_ref_expr PTHREAD_MUTEX_STALLED))
    (enum_constant_decl PTHREAD_MUTEX_ROBUST)
    (enum_constant_decl PTHREAD_MUTEX_ROBUST_NP
      (decl_ref_expr PTHREAD_MUTEX_ROBUST)))
  (enum_decl
    (enum_constant_decl PTHREAD_PRIO_NONE)
    (enum_constant_decl PTHREAD_PRIO_INHERIT)
    (enum_constant_decl PTHREAD_PRIO_PROTECT))
  (enum_decl
    (enum_constant_decl PTHREAD_RWLOCK_PREFER_READER_NP)
    (enum_constant_decl PTHREAD_RWLOCK_PREFER_WRITER_NP)
    (enum_constant_decl PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP)
    (enum_constant_decl PTHREAD_RWLOCK_DEFAULT_NP
      (decl_ref_expr PTHREAD_RWLOCK_PREFER_READER_NP)))
  (enum_decl
    (enum_constant_decl PTHREAD_INHERIT_SCHED)
    (enum_constant_decl PTHREAD_EXPLICIT_SCHED))
  (enum_decl
    (enum_constant_decl PTHREAD_SCOPE_SYSTEM)
    (enum_constant_decl PTHREAD_SCOPE_PROCESS))
  (enum_decl
    (enum_constant_decl PTHREAD_PROCESS_PRIVATE)
    (enum_constant_decl PTHREAD_PROCESS_SHARED))
  (struct_decl _pthread_cleanup_buffer
    (field_decl __routine
      (parm_decl))
    (field_decl __arg)
    (field_decl __canceltype)
    (field_decl __prev
      (type_ref struct _pthread_cleanup_buffer)))
  (enum_decl
    (enum_constant_decl PTHREAD_CANCEL_ENABLE)
    (enum_constant_decl PTHREAD_CANCEL_DISABLE))
  (enum_decl
    (enum_constant_decl PTHREAD_CANCEL_DEFERRED)
    (enum_constant_decl PTHREAD_CANCEL_ASYNCHRONOUS))
  (function_decl pthread_create
    (parm_decl __newthread
      (type_ref pthread_t))
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __start_routine
      (parm_decl))
    (parm_decl __arg))
  (function_decl pthread_exit
    (parm_decl __retval))
  (function_decl pthread_join
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __thread_return))
  (function_decl pthread_tryjoin_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __thread_return))
  (function_decl pthread_timedjoin_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __thread_return)
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_clockjoin_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __thread_return)
    (parm_decl __clockid
      (type_ref clockid_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_detach
    (parm_decl __th
      (type_ref pthread_t)))
  (function_decl pthread_self
    (const_attr)
    (type_ref pthread_t))
  (function_decl pthread_equal
    (const_attr)
    (parm_decl __thread1
      (type_ref pthread_t))
    (parm_decl __thread2
      (type_ref pthread_t)))
  (function_decl pthread_attr_init
    (parm_decl __attr
      (type_ref pthread_attr_t)))
  (function_decl pthread_attr_destroy
    (parm_decl __attr
      (type_ref pthread_attr_t)))
  (function_decl pthread_attr_getdetachstate
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __detachstate))
  (function_decl pthread_attr_setdetachstate
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __detachstate))
  (function_decl pthread_attr_getguardsize
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __guardsize
      (type_ref size_t)))
  (function_decl pthread_attr_setguardsize
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __guardsize
      (type_ref size_t)))
  (function_decl pthread_attr_getschedparam
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl pthread_attr_setschedparam
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl pthread_attr_getschedpolicy
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __policy))
  (function_decl pthread_attr_setschedpolicy
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __policy))
  (function_decl pthread_attr_getinheritsched
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __inherit))
  (function_decl pthread_attr_setinheritsched
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __inherit))
  (function_decl pthread_attr_getscope
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __scope))
  (function_decl pthread_attr_setscope
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __scope))
  (function_decl pthread_attr_getstackaddr
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stackaddr))
  (function_decl pthread_attr_setstackaddr
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stackaddr))
  (function_decl pthread_attr_getstacksize
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stacksize
      (type_ref size_t)))
  (function_decl pthread_attr_setstacksize
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stacksize
      (type_ref size_t)))
  (function_decl pthread_attr_getstack
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stackaddr)
    (parm_decl __stacksize
      (type_ref size_t)))
  (function_decl pthread_attr_setstack
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __stackaddr)
    (parm_decl __stacksize
      (type_ref size_t)))
  (function_decl pthread_attr_setaffinity_np
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (function_decl pthread_attr_getaffinity_np
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (function_decl pthread_getattr_default_np
    (parm_decl __attr
      (type_ref pthread_attr_t)))
  (function_decl pthread_attr_setsigmask_np
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl sigmask
      (type_ref __sigset_t)))
  (function_decl pthread_attr_getsigmask_np
    (parm_decl __attr
      (type_ref pthread_attr_t))
    (parm_decl sigmask
      (type_ref __sigset_t)))
  (function_decl pthread_setattr_default_np
    (parm_decl __attr
      (type_ref pthread_attr_t)))
  (function_decl pthread_getattr_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __attr
      (type_ref pthread_attr_t)))
  (function_decl pthread_setschedparam
    (parm_decl __target_thread
      (type_ref pthread_t))
    (parm_decl __policy)
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl pthread_getschedparam
    (parm_decl __target_thread
      (type_ref pthread_t))
    (parm_decl __policy)
    (parm_decl __param
      (type_ref struct sched_param)))
  (function_decl pthread_setschedprio
    (parm_decl __target_thread
      (type_ref pthread_t))
    (parm_decl __prio))
  (function_decl pthread_getname_np
    (parm_decl __target_thread
      (type_ref pthread_t))
    (parm_decl __buf)
    (parm_decl __buflen
      (type_ref size_t)))
  (function_decl pthread_setname_np
    (parm_decl __target_thread
      (type_ref pthread_t))
    (parm_decl __name))
  (function_decl pthread_getconcurrency)
  (function_decl pthread_setconcurrency
    (parm_decl __level))
  (function_decl pthread_yield)
  (function_decl pthread_yield
    (visibility_attr default)
    (asm_label_attr sched_yield))
  (function_decl pthread_setaffinity_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (function_decl pthread_getaffinity_np
    (parm_decl __th
      (type_ref pthread_t))
    (parm_decl __cpusetsize
      (type_ref size_t))
    (parm_decl __cpuset
      (type_ref cpu_set_t)))
  (function_decl pthread_once
    (parm_decl __once_control
      (type_ref pthread_once_t))
    (parm_decl __init_routine))
  (function_decl pthread_setcancelstate
    (parm_decl __state)
    (parm_decl __oldstate))
  (function_decl pthread_setcanceltype
    (parm_decl __type)
    (parm_decl __oldtype))
  (function_decl pthread_cancel
    (parm_decl __th
      (type_ref pthread_t)))
  (function_decl pthread_testcancel)
  (struct_decl __cancel_jmp_buf_tag
    (field_decl __cancel_jmp_buf
      (type_ref __jmp_buf))
    (field_decl __mask_was_saved))
  (struct_decl
    (field_decl __cancel_jmp_buf
      (type_ref struct __cancel_jmp_buf_tag)
      (integer_literal 1))
    (field_decl __pad
      (integer_literal 4)))
  (typedef_decl __pthread_unwind_buf_t
    (aligned_attr)
    (struct_decl
      (field_decl __cancel_jmp_buf
        (type_ref struct __cancel_jmp_buf_tag)
        (integer_literal 1))
      (field_decl __pad
        (integer_literal 4))))
  (struct_decl __pthread_cleanup_frame
    (field_decl __cancel_routine
      (parm_decl))
    (field_decl __cancel_arg)
    (field_decl __do_it)
    (field_decl __cancel_type))
  (class_decl __pthread_cleanup_class
    (field_decl __cancel_routine
      (parm_decl))
    (field_decl __cancel_arg)
    (field_decl __do_it)
    (field_decl __cancel_type)
    (cxx_access_spec_decl)
    (constructor __pthread_cleanup_class
      (parm_decl __fct
        (parm_decl))
      (parm_decl __arg)
      (member_ref __cancel_routine)
      (decl_ref_expr __fct)
      (member_ref __cancel_arg)
      (decl_ref_expr __arg)
      (member_ref __do_it)
      (integer_literal 1)
      (compound_stmt))
    (destructor ~__pthread_cleanup_class
      (compound_stmt
        (if_stmt
          (member_ref_expr __do_it)
          (call_expr __cancel_routine
            (member_ref_expr __cancel_routine)
            (member_ref_expr __cancel_arg)))))
    (cxx_method __setdoit
      (parm_decl __newval)
      (compound_stmt
        (binary_operator
          (member_ref_expr __do_it)
          (decl_ref_expr __newval))))
    (cxx_method __defer
      (compound_stmt
        (call_expr pthread_setcanceltype
          (decl_ref_expr pthread_setcanceltype)
          (decl_ref_expr PTHREAD_CANCEL_DEFERRED)
          (unary_operator
            (member_ref_expr __cancel_type)))))
    (cxx_method __restore
      (compound_stmt
        (call_expr pthread_setcanceltype
          (decl_ref_expr pthread_setcanceltype)
          (member_ref_expr __cancel_type)
          (integer_literal 0)))))
  (function_decl __sigsetjmp
    (parm_decl __env
      (type_ref struct __jmp_buf_tag)
      (integer_literal 1))
    (parm_decl __savemask))
  (function_decl pthread_mutex_init
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __mutexattr
      (type_ref pthread_mutexattr_t)))
  (function_decl pthread_mutex_destroy
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutex_trylock
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutex_lock
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutex_timedlock
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_mutex_clocklock
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __clockid
      (type_ref clockid_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_mutex_unlock
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutex_getprioceiling
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __prioceiling))
  (function_decl pthread_mutex_setprioceiling
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __prioceiling)
    (parm_decl __old_ceiling))
  (function_decl pthread_mutex_consistent
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutex_consistent_np
    (asm_label_attr pthread_mutex_consistent)
    (parm_decl
      (type_ref pthread_mutex_t)))
  (function_decl pthread_mutexattr_init
    (parm_decl __attr
      (type_ref pthread_mutexattr_t)))
  (function_decl pthread_mutexattr_destroy
    (parm_decl __attr
      (type_ref pthread_mutexattr_t)))
  (function_decl pthread_mutexattr_getpshared
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __pshared))
  (function_decl pthread_mutexattr_setpshared
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __pshared))
  (function_decl pthread_mutexattr_gettype
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __kind))
  (function_decl pthread_mutexattr_settype
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __kind))
  (function_decl pthread_mutexattr_getprotocol
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __protocol))
  (function_decl pthread_mutexattr_setprotocol
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __protocol))
  (function_decl pthread_mutexattr_getprioceiling
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __prioceiling))
  (function_decl pthread_mutexattr_setprioceiling
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __prioceiling))
  (function_decl pthread_mutexattr_getrobust
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __robustness))
  (function_decl pthread_mutexattr_getrobust_np
    (asm_label_attr pthread_mutexattr_getrobust)
    (parm_decl
      (type_ref pthread_mutexattr_t))
    (parm_decl))
  (function_decl pthread_mutexattr_setrobust
    (parm_decl __attr
      (type_ref pthread_mutexattr_t))
    (parm_decl __robustness))
  (function_decl pthread_mutexattr_setrobust_np
    (asm_label_attr pthread_mutexattr_setrobust)
    (parm_decl
      (type_ref pthread_mutexattr_t))
    (parm_decl))
  (function_decl pthread_rwlock_init
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t))
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t)))
  (function_decl pthread_rwlock_destroy
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlock_rdlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlock_tryrdlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlock_timedrdlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_rwlock_clockrdlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t))
    (parm_decl __clockid
      (type_ref clockid_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_rwlock_wrlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlock_trywrlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlock_timedwrlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_rwlock_clockwrlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t))
    (parm_decl __clockid
      (type_ref clockid_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_rwlock_unlock
    (parm_decl __rwlock
      (type_ref pthread_rwlock_t)))
  (function_decl pthread_rwlockattr_init
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t)))
  (function_decl pthread_rwlockattr_destroy
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t)))
  (function_decl pthread_rwlockattr_getpshared
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t))
    (parm_decl __pshared))
  (function_decl pthread_rwlockattr_setpshared
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t))
    (parm_decl __pshared))
  (function_decl pthread_rwlockattr_getkind_np
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t))
    (parm_decl __pref))
  (function_decl pthread_rwlockattr_setkind_np
    (parm_decl __attr
      (type_ref pthread_rwlockattr_t))
    (parm_decl __pref))
  (function_decl pthread_cond_init
    (parm_decl __cond
      (type_ref pthread_cond_t))
    (parm_decl __cond_attr
      (type_ref pthread_condattr_t)))
  (function_decl pthread_cond_destroy
    (parm_decl __cond
      (type_ref pthread_cond_t)))
  (function_decl pthread_cond_signal
    (parm_decl __cond
      (type_ref pthread_cond_t)))
  (function_decl pthread_cond_broadcast
    (parm_decl __cond
      (type_ref pthread_cond_t)))
  (function_decl pthread_cond_wait
    (parm_decl __cond
      (type_ref pthread_cond_t))
    (parm_decl __mutex
      (type_ref pthread_mutex_t)))
  (function_decl pthread_cond_timedwait
    (parm_decl __cond
      (type_ref pthread_cond_t))
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_cond_clockwait
    (parm_decl __cond
      (type_ref pthread_cond_t))
    (parm_decl __mutex
      (type_ref pthread_mutex_t))
    (parm_decl __clock_id
      (type_ref __clockid_t))
    (parm_decl __abstime
      (type_ref struct timespec)))
  (function_decl pthread_condattr_init
    (parm_decl __attr
      (type_ref pthread_condattr_t)))
  (function_decl pthread_condattr_destroy
    (parm_decl __attr
      (type_ref pthread_condattr_t)))
  (function_decl pthread_condattr_getpshared
    (parm_decl __attr
      (type_ref pthread_condattr_t))
    (parm_decl __pshared))
  (function_decl pthread_condattr_setpshared
    (parm_decl __attr
      (type_ref pthread_condattr_t))
    (parm_decl __pshared))
  (function_decl pthread_condattr_getclock
    (parm_decl __attr
      (type_ref pthread_condattr_t))
    (parm_decl __clock_id
      (type_ref __clockid_t)))
  (function_decl pthread_condattr_setclock
    (parm_decl __attr
      (type_ref pthread_condattr_t))
    (parm_decl __clock_id
      (type_ref __clockid_t)))
  (function_decl pthread_spin_init
    (parm_decl __lock
      (type_ref pthread_spinlock_t))
    (parm_decl __pshared))
  (function_decl pthread_spin_destroy
    (parm_decl __lock
      (type_ref pthread_spinlock_t)))
  (function_decl pthread_spin_lock
    (parm_decl __lock
      (type_ref pthread_spinlock_t)))
  (function_decl pthread_spin_trylock
    (parm_decl __lock
      (type_ref pthread_spinlock_t)))
  (function_decl pthread_spin_unlock
    (parm_decl __lock
      (type_ref pthread_spinlock_t)))
  (function_decl pthread_barrier_init
    (parm_decl __barrier
      (type_ref pthread_barrier_t))
    (parm_decl __attr
      (type_ref pthread_barrierattr_t))
    (parm_decl __count))
  (function_decl pthread_barrier_destroy
    (parm_decl __barrier
      (type_ref pthread_barrier_t)))
  (function_decl pthread_barrier_wait
    (parm_decl __barrier
      (type_ref pthread_barrier_t)))
  (function_decl pthread_barrierattr_init
    (parm_decl __attr
      (type_ref pthread_barrierattr_t)))
  (function_decl pthread_barrierattr_destroy
    (parm_decl __attr
      (type_ref pthread_barrierattr_t)))
  (function_decl pthread_barrierattr_getpshared
    (parm_decl __attr
      (type_ref pthread_barrierattr_t))
    (parm_decl __pshared))
  (function_decl pthread_barrierattr_setpshared
    (parm_decl __attr
      (type_ref pthread_barrierattr_t))
    (parm_decl __pshared))
  (function_decl pthread_key_create
    (parm_decl __key
      (type_ref pthread_key_t))
    (parm_decl __destr_function
      (parm_decl)))
  (function_decl pthread_key_delete
    (parm_decl __key
      (type_ref pthread_key_t)))
  (function_decl pthread_getspecific
    (parm_decl __key
      (type_ref pthread_key_t)))
  (function_decl pthread_setspecific
    (parm_decl __key
      (type_ref pthread_key_t))
    (parm_decl __pointer))
  (function_decl pthread_getcpuclockid
    (parm_decl __thread_id
      (type_ref pthread_t))
    (parm_decl __clock_id
      (type_ref __clockid_t)))
  (function_decl pthread_atfork
    (parm_decl __prepare)
    (parm_decl __parent)
    (parm_decl __child))
  (typedef_decl __gthread_t
    (type_ref pthread_t))
  (typedef_decl __gthread_key_t
    (type_ref pthread_key_t))
  (typedef_decl __gthread_once_t
    (type_ref pthread_once_t))
  (typedef_decl __gthread_mutex_t
    (type_ref pthread_mutex_t))
  (typedef_decl __gthread_recursive_mutex_t
    (type_ref pthread_mutex_t))
  (typedef_decl __gthread_cond_t
    (type_ref pthread_cond_t))
  (typedef_decl __gthread_time_t
    (type_ref struct timespec))
  (function_decl __gthread_active_p
    (compound_stmt
      (return_stmt
        (integer_literal 1))))
  (function_decl __gthread_create
    (parm_decl __threadid
      (type_ref __gthread_t))
    (parm_decl __func
      (parm_decl))
    (parm_decl __args)
    (compound_stmt
      (return_stmt
        (call_expr pthread_create
          (decl_ref_expr pthread_create)
          (decl_ref_expr __threadid)
          (gnu_null_expr)
          (decl_ref_expr __func)
          (decl_ref_expr __args)))))
  (function_decl __gthread_join
    (parm_decl __threadid
      (type_ref __gthread_t))
    (parm_decl __value_ptr)
    (compound_stmt
      (return_stmt
        (call_expr pthread_join
          (decl_ref_expr pthread_join)
          (decl_ref_expr __threadid)
          (decl_ref_expr __value_ptr)))))
  (function_decl __gthread_detach
    (parm_decl __threadid
      (type_ref __gthread_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_detach
          (decl_ref_expr pthread_detach)
          (decl_ref_expr __threadid)))))
  (function_decl __gthread_equal
    (parm_decl __t1
      (type_ref __gthread_t))
    (parm_decl __t2
      (type_ref __gthread_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_equal
          (decl_ref_expr pthread_equal)
          (decl_ref_expr __t1)
          (decl_ref_expr __t2)))))
  (function_decl __gthread_self
    (type_ref __gthread_t)
    (compound_stmt
      (return_stmt
        (call_expr pthread_self
          (decl_ref_expr pthread_self)))))
  (function_decl __gthread_yield
    (compound_stmt
      (return_stmt
        (call_expr sched_yield
          (decl_ref_expr sched_yield)))))
  (function_decl __gthread_once
    (parm_decl __once
      (type_ref __gthread_once_t))
    (parm_decl __func)
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_once
            (decl_ref_expr pthread_once)
            (decl_ref_expr __once)
            (decl_ref_expr __func)))
        (return_stmt
          (unary_operator
            (integer_literal 1))))))
  (function_decl __gthread_key_create
    (parm_decl __key
      (type_ref __gthread_key_t))
    (parm_decl __dtor
      (parm_decl))
    (compound_stmt
      (return_stmt
        (call_expr pthread_key_create
          (decl_ref_expr pthread_key_create)
          (decl_ref_expr __key)
          (decl_ref_expr __dtor)))))
  (function_decl __gthread_key_delete
    (parm_decl __key
      (type_ref __gthread_key_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_key_delete
          (decl_ref_expr pthread_key_delete)
          (decl_ref_expr __key)))))
  (function_decl __gthread_getspecific
    (parm_decl __key
      (type_ref __gthread_key_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_getspecific
          (decl_ref_expr pthread_getspecific)
          (decl_ref_expr __key)))))
  (function_decl __gthread_setspecific
    (parm_decl __key
      (type_ref __gthread_key_t))
    (parm_decl __ptr)
    (compound_stmt
      (return_stmt
        (call_expr pthread_setspecific
          (decl_ref_expr pthread_setspecific)
          (decl_ref_expr __key)
          (decl_ref_expr __ptr)))))
  (function_decl __gthread_mutex_init_function
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (call_expr pthread_mutex_init
          (decl_ref_expr pthread_mutex_init)
          (decl_ref_expr __mutex)
          (gnu_null_expr)))))
  (function_decl __gthread_mutex_destroy
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_mutex_destroy
            (decl_ref_expr pthread_mutex_destroy)
            (decl_ref_expr __mutex)))
        (return_stmt
          (integer_literal 0)))))
  (function_decl __gthread_mutex_lock
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_mutex_lock
            (decl_ref_expr pthread_mutex_lock)
            (decl_ref_expr __mutex)))
        (return_stmt
          (integer_literal 0)))))
  (function_decl __gthread_mutex_trylock
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_mutex_trylock
            (decl_ref_expr pthread_mutex_trylock)
            (decl_ref_expr __mutex)))
        (return_stmt
          (integer_literal 0)))))
  (function_decl __gthread_mutex_timedlock
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (parm_decl __abs_timeout
      (type_ref __gthread_time_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_mutex_timedlock
            (decl_ref_expr pthread_mutex_timedlock)
            (decl_ref_expr __mutex)
            (decl_ref_expr __abs_timeout)))
        (return_stmt
          (integer_literal 0)))))
  (function_decl __gthread_mutex_unlock
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (if_stmt
        (call_expr __gthread_active_p
          (decl_ref_expr __gthread_active_p))
        (return_stmt
          (call_expr pthread_mutex_unlock
            (decl_ref_expr pthread_mutex_unlock)
            (decl_ref_expr __mutex)))
        (return_stmt
          (integer_literal 0)))))
  (function_decl __gthread_recursive_mutex_lock
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_mutex_lock
          (decl_ref_expr __gthread_mutex_lock)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_recursive_mutex_trylock
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_mutex_trylock
          (decl_ref_expr __gthread_mutex_trylock)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_recursive_mutex_timedlock
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (parm_decl __abs_timeout
      (type_ref __gthread_time_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_mutex_timedlock
          (decl_ref_expr __gthread_mutex_timedlock)
          (decl_ref_expr __mutex)
          (decl_ref_expr __abs_timeout)))))
  (function_decl __gthread_recursive_mutex_unlock
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_mutex_unlock
          (decl_ref_expr __gthread_mutex_unlock)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_recursive_mutex_destroy
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_mutex_destroy
          (decl_ref_expr __gthread_mutex_destroy)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_cond_broadcast
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_cond_broadcast
          (decl_ref_expr pthread_cond_broadcast)
          (decl_ref_expr __cond)))))
  (function_decl __gthread_cond_signal
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_cond_signal
          (decl_ref_expr pthread_cond_signal)
          (decl_ref_expr __cond)))))
  (function_decl __gthread_cond_wait
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_cond_wait
          (decl_ref_expr pthread_cond_wait)
          (decl_ref_expr __cond)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_cond_timedwait
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (parm_decl __mutex
      (type_ref __gthread_mutex_t))
    (parm_decl __abs_timeout
      (type_ref __gthread_time_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_cond_timedwait
          (decl_ref_expr pthread_cond_timedwait)
          (decl_ref_expr __cond)
          (decl_ref_expr __mutex)
          (decl_ref_expr __abs_timeout)))))
  (function_decl __gthread_cond_wait_recursive
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (parm_decl __mutex
      (type_ref __gthread_recursive_mutex_t))
    (compound_stmt
      (return_stmt
        (call_expr __gthread_cond_wait
          (decl_ref_expr __gthread_cond_wait)
          (decl_ref_expr __cond)
          (decl_ref_expr __mutex)))))
  (function_decl __gthread_cond_destroy
    (parm_decl __cond
      (type_ref __gthread_cond_t))
    (compound_stmt
      (return_stmt
        (call_expr pthread_cond_destroy
          (decl_ref_expr pthread_cond_destroy)
          (decl_ref_expr __cond)))))
  (typedef_decl _Atomic_word)
  (var_decl __libc_single_threaded)
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/atomicity.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (function_decl __is_single_threaded
      (compound_stmt
        (return_stmt
          (decl_ref_expr __libc_single_threaded))))
    (function_decl __exchange_and_add
      (type_ref _Atomic_word)
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (return_stmt
          (decl_ref_expr __mem)
          (integer_literal)
          (decl_ref_expr __val))))
    (function_decl __atomic_add
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (decl_ref_expr __mem)
        (integer_literal)
        (decl_ref_expr __val)))
    (function_decl __exchange_and_add_single
      (type_ref _Atomic_word)
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (decl_stmt
          (var_decl __result
            (type_ref _Atomic_word)
            (unary_operator
              (decl_ref_expr __mem))))
        (compound_assignment_operator
          (unary_operator
            (decl_ref_expr __mem))
          (decl_ref_expr __val))
        (return_stmt
          (decl_ref_expr __result))))
    (function_decl __atomic_add_single
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (compound_assignment_operator
          (unary_operator
            (decl_ref_expr __mem))
          (decl_ref_expr __val))))
    (function_decl __exchange_and_add_dispatch
      (type_ref _Atomic_word)
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (if_stmt
          (call_expr __is_single_threaded
            (decl_ref_expr __is_single_threaded))
          (return_stmt
            (call_expr __exchange_and_add_single
              (decl_ref_expr __exchange_and_add_single)
              (decl_ref_expr __mem)
              (decl_ref_expr __val)))
          (return_stmt
            (call_expr __exchange_and_add
              (decl_ref_expr __exchange_and_add)
              (decl_ref_expr __mem)
              (decl_ref_expr __val))))))
    (function_decl __atomic_add_dispatch
      (parm_decl __mem
        (type_ref _Atomic_word))
      (parm_decl __val)
      (compound_stmt
        (if_stmt
          (call_expr __is_single_threaded
            (decl_ref_expr __is_single_threaded))
          (call_expr __atomic_add_single
            (decl_ref_expr __atomic_add_single)
            (decl_ref_expr __mem)
            (decl_ref_expr __val))
          (call_expr __atomic_add
            (decl_ref_expr __atomic_add)
            (decl_ref_expr __mem)
            (decl_ref_expr __val))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/exception
  (namespace std
    (class_decl bad_exception
      (cxx_base_specifier class std::exception
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (constructor bad_exception
        (compound_stmt))
      (destructor ~bad_exception)
      (cxx_method what))
    (typedef_decl terminate_handler)
    (typedef_decl unexpected_handler)
    (function_decl set_terminate
      (type_ref std::terminate_handler)
      (parm_decl
        (type_ref std::terminate_handler)))
    (function_decl get_terminate
      (type_ref std::terminate_handler))
    (function_decl terminate)
    (function_decl set_unexpected
      (type_ref std::unexpected_handler)
      (parm_decl
        (type_ref std::unexpected_handler)))
    (function_decl get_unexpected
      (type_ref std::unexpected_handler))
    (function_decl unexpected)
    (function_decl uncaught_exception
      (pure_attr))
    (function_decl uncaught_exceptions
      (pure_attr)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/exception
  (namespace __gnu_cxx
    (function_decl __verbose_terminate_handler))
  (typedef_decl ptrdiff_t)
  (struct_decl
    (field_decl __clang_max_align_nonce1
      (aligned_attr))
    (field_decl __clang_max_align_nonce2
      (aligned_attr)))
  (typedef_decl max_align_t
    (struct_decl
      (field_decl __clang_max_align_nonce1
        (aligned_attr))
      (field_decl __clang_max_align_nonce2
        (aligned_attr))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/cxxabi_init_exception.h
  (namespace std
    (class_decl type_info
      (visibility_attr default)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/cxxabi_init_exception.h
  (namespace __cxxabiv1
    (struct_decl __cxa_refcounted_exception)
    (function_decl __cxa_allocate_exception
      (parm_decl
        (type_ref size_t)))
    (function_decl __cxa_free_exception
      (parm_decl))
    (function_decl __cxa_init_primary_exception
      (type_ref struct __cxxabiv1::__cxa_refcounted_exception)
      (parm_decl object)
      (parm_decl tinfo
        (namespace_ref std)
        (type_ref class std::type_info))
      (parm_decl dest
        (parm_decl))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/exception_ptr.h
  (namespace std
    (class_decl type_info
      (visibility_attr default))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/exception_ptr.h
    (namespace __exception_ptr
      (class_decl exception_ptr))
    (using_declaration exception_ptr
      (namespace_ref __exception_ptr)
      (overloaded_decl_ref exception_ptr))
    (function_decl current_exception)
    (function_template make_exception_ptr
      (template_type_parameter _Ex)
      (parm_decl
        (type_ref _Ex)))
    (function_decl rethrow_exception
      (parm_decl))
    ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/exception_ptr.h
    (namespace __exception_ptr
      (using_declaration rethrow_exception
        (namespace_ref std)
        (overloaded_decl_ref rethrow_exception))
      (class_decl exception_ptr
        (visibility_attr default)
        (field_decl _M_exception_object)
        (constructor exception_ptr
          (parm_decl __e))
        (cxx_method _M_addref)
        (cxx_method _M_release)
        (cxx_method _M_get
          (pure_attr))
        (friend_decl
          (function_decl current_exception
            (visibility_attr default)
            (type_ref class std::__exception_ptr::exception_ptr)
            (namespace_ref std)))
        (friend_decl
          (function_decl rethrow_exception
            (visibility_attr default)
            (namespace_ref std)
            (parm_decl
              (type_ref class std::__exception_ptr::exception_ptr))))
        (friend_decl
          (function_template make_exception_ptr
            (template_type_parameter _Ex)
            (visibility_attr default)
            (type_ref class std::__exception_ptr::exception_ptr)
            (namespace_ref std)
            (parm_decl
              (type_ref _Ex))))
        (cxx_access_spec_decl)
        (constructor exception_ptr)
        (constructor exception_ptr
          (parm_decl
            (type_ref class std::__exception_ptr::exception_ptr)))
        (constructor exception_ptr
          (parm_decl
            (type_ref std::nullptr_t))
          (member_ref _M_exception_object)
          (cxx_null_ptr_literal_expr)
          (compound_stmt))
        (constructor exception_ptr
          (parm_decl __o
            (type_ref class std::__exception_ptr::exception_ptr))
          (member_ref _M_exception_object)
          (member_ref_expr _M_exception_object
            (decl_ref_expr __o))
          (compound_stmt
            (binary_operator
              (member_ref_expr _M_exception_object
                (decl_ref_expr __o))
              (cxx_null_ptr_literal_expr))))
        (cxx_method operator=
          (type_ref class std::__exception_ptr::exception_ptr)
          (parm_decl
            (type_ref class std::__exception_ptr::exception_ptr)))
        (cxx_method operator=
          (type_ref class std::__exception_ptr::exception_ptr)
          (parm_decl __o
            (type_ref class std::__exception_ptr::exception_ptr))
          (compound_stmt
            (call_expr swap
              (member_ref_expr swap
                (cxx_functional_cast_expr
                  (type_ref class std::__exception_ptr::exception_ptr)
                  (call_expr exception_ptr
                    (cxx_static_cast_expr
                      (type_ref class std::__exception_ptr::exception_ptr)
                      (decl_ref_expr __o)))))
              (unary_operator
                (cxx_this_expr)))
            (return_stmt
              (unary_operator
                (cxx_this_expr)))))
        (destructor ~exception_ptr)
        (cxx_method swap
          (parm_decl
            (type_ref class std::__exception_ptr::exception_ptr)))
        (conversion_function operator bool
          (compound_stmt
            (return_stmt
              (member_ref_expr _M_exception_object))))
        (friend_decl
          (function_decl operator==
            (parm_decl __x
              (type_ref class std::__exception_ptr::exception_ptr))
            (parm_decl __y
              (type_ref class std::__exception_ptr::exception_ptr))
            (compound_stmt
              (return_stmt
                (binary_operator
                  (member_ref_expr _M_exception_object
                    (decl_ref_expr __x))
                  (member_ref_expr _M_exception_object
                    (decl_ref_expr __y)))))))
        (friend_decl
          (function_decl operator!=
            (parm_decl __x
              (type_ref class std::__exception_ptr::exception_ptr))
            (parm_decl __y
              (type_ref class std::__exception_ptr::exception_ptr))
            (compound_stmt
              (return_stmt
                (binary_operator
                  (member_ref_expr _M_exception_object
                    (decl_ref_expr __x))
                  (member_ref_expr _M_exception_object
                    (decl_ref_expr __y)))))))
        (cxx_method __cxa_exception_type
          (pure_attr)
          (namespace_ref std)
          (type_ref class std::type_info)))
      (constructor exception_ptr
        (type_ref class std::__exception_ptr::exception_ptr)
        (member_ref _M_exception_object)
        (integer_literal 0)
        (compound_stmt))
      (constructor exception_ptr
        (type_ref class std::__exception_ptr::exception_ptr)
        (parm_decl __other
          (type_ref class std::__exception_ptr::exception_ptr))
        (member_ref _M_exception_object)
        (member_ref_expr _M_exception_object
          (decl_ref_expr __other))
        (compound_stmt
          (if_stmt
            (member_ref_expr _M_exception_object)
            (call_expr _M_addref
              (member_ref_expr _M_addref)))))
      (destructor ~exception_ptr
        (type_ref class std::__exception_ptr::exception_ptr)
        (compound_stmt
          (if_stmt
            (member_ref_expr _M_exception_object)
            (call_expr _M_release
              (member_ref_expr _M_release)))))
      (cxx_method operator=
        (type_ref class std::__exception_ptr::exception_ptr)
        (type_ref class std::__exception_ptr::exception_ptr)
        (parm_decl __other
          (type_ref class std::__exception_ptr::exception_ptr))
        (compound_stmt
          (call_expr swap
            (member_ref_expr swap
              (cxx_functional_cast_expr
                (type_ref class std::__exception_ptr::exception_ptr)
                (call_expr exception_ptr
                  (decl_ref_expr __other))))
            (unary_operator
              (cxx_this_expr)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method swap
        (type_ref class std::__exception_ptr::exception_ptr)
        (parm_decl __other
          (type_ref class std::__exception_ptr::exception_ptr))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (member_ref_expr _M_exception_object)))
          (binary_operator
            (member_ref_expr _M_exception_object)
            (member_ref_expr _M_exception_object
              (decl_ref_expr __other)))
          (binary_operator
            (member_ref_expr _M_exception_object
              (decl_ref_expr __other))
            (decl_ref_expr __tmp))))
      (function_decl swap
        (parm_decl __lhs
          (type_ref class std::__exception_ptr::exception_ptr))
        (parm_decl __rhs
          (type_ref class std::__exception_ptr::exception_ptr))
        (compound_stmt
          (call_expr swap
            (member_ref_expr swap
              (decl_ref_expr __lhs))
            (decl_ref_expr __rhs))))
      (function_template __dest_thunk
        (template_type_parameter _Ex)
        (parm_decl __x)
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_static_cast_expr
                (type_ref _Ex)
                (decl_ref_expr __x))
              (type_ref _Ex))))))
    (function_template make_exception_ptr
      (template_type_parameter _Ex)
      (visibility_attr default)
      (parm_decl __ex
        (type_ref _Ex))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Ex2
            (template_ref remove_reference)
            (type_ref _Ex)))
        (decl_stmt
          (var_decl __e
            (call_expr __cxa_allocate_exception
              (decl_ref_expr __cxa_allocate_exception
                (namespace_ref __cxxabiv1))
              (cxx_unary_expr
                (type_ref _Ex)))))
        (cstyle_cast_expr
          (call_expr __cxa_init_primary_exception
            (decl_ref_expr __cxa_init_primary_exception
              (namespace_ref __cxxabiv1))
            (decl_ref_expr __e)
            (cxx_const_cast_expr
              (namespace_ref std)
              (type_ref class std::type_info)
              (unary_operator
                (cxx_typeid_expr
                  (type_ref _Ex))))
            (decl_ref_expr
              (namespace_ref __exception_ptr)
              (overloaded_decl_ref __dest_thunk)
              (type_ref _Ex2))))
        (cxx_try_stmt
          (compound_stmt
            (cxx_new_expr
              (decl_ref_expr __e)
              (type_ref _Ex2)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Ex))
                (decl_ref_expr __ex)))
            (return_stmt
              (call_expr
                (cxx_functional_cast_expr
                  (call_expr exception_ptr
                    (decl_ref_expr __e))))))
          (cxx_catch_stmt
            (compound_stmt
              (call_expr __cxa_free_exception
                (decl_ref_expr __cxa_free_exception
                  (namespace_ref __cxxabiv1))
                (decl_ref_expr __e))
              (return_stmt
                (call_expr
                  (call_expr current_exception
                    (decl_ref_expr current_exception))))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/nested_exception.h
  (namespace std
    (class_decl nested_exception
      (field_decl _M_ptr)
      (cxx_access_spec_decl)
      (constructor nested_exception
        (member_ref _M_ptr)
        (call_expr
          (call_expr current_exception
            (decl_ref_expr current_exception)))
        (compound_stmt))
      (constructor nested_exception
        (parm_decl
          (type_ref class std::nested_exception)))
      (cxx_method operator=
        (type_ref class std::nested_exception)
        (parm_decl
          (type_ref class std::nested_exception)))
      (destructor ~nested_exception)
      (cxx_method rethrow_nested
        (compound_stmt
          (if_stmt
            (call_expr operator bool
              (member_ref_expr operator bool
                (member_ref_expr _M_ptr)))
            (call_expr rethrow_exception
              (decl_ref_expr rethrow_exception)
              (call_expr exception_ptr
                (member_ref_expr _M_ptr))))
          (call_expr terminate
            (decl_ref_expr terminate
              (namespace_ref std)))))
      (cxx_method nested_ptr
        (compound_stmt
          (return_stmt
            (call_expr exception_ptr
              (member_ref_expr _M_ptr))))))
    (class_template _Nested_exception
      (template_type_parameter _Except)
      (cxx_base_specifier _Except
        (type_ref _Except))
      (cxx_base_specifier class std::nested_exception
        (type_ref class std::nested_exception))
      (constructor _Nested_exception<_Except>
        (parm_decl __ex
          (type_ref _Except))
        (type_ref _Except)
        (decl_ref_expr __ex)
        (compound_stmt))
      (constructor _Nested_exception<_Except>
        (parm_decl __ex
          (type_ref _Except))
        (type_ref _Except)
        (cxx_static_cast_expr
          (type_ref _Except)
          (decl_ref_expr __ex))
        (compound_stmt)))
    (function_template __throw_with_nested_impl
      (template_type_parameter _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (parm_decl
        (type_ref std::true_type))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Up
            (template_ref remove_reference)
            (type_ref _Tp)))
        (cxx_throw_expr
          (call_expr
            (template_ref _Nested_exception)
            (type_ref _Up)
            (init_list_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Tp))
                (decl_ref_expr __t)))))))
    (function_template __throw_with_nested_impl
      (template_type_parameter _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (parm_decl
        (type_ref std::false_type))
      (compound_stmt
        (cxx_throw_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t)))))
    (function_template throw_with_nested
      (template_type_parameter _Tp)
      (parm_decl __t
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Up
            (template_ref decay)
            (type_ref _Tp)))
        (decl_stmt
          (type_alias_decl _CopyConstructible
            (template_ref __and_)
            (template_ref is_copy_constructible)
            (type_ref _Up)
            (template_ref is_move_constructible)
            (type_ref _Up)))
        (decl_stmt
          (static_assert
            (decl_ref_expr
              (type_ref _CopyConstructible))
            (string_literal "throw_with_nested argument must be CopyConstructible")))
        (decl_stmt
          (type_alias_decl __nest
            (template_ref __and_)
            (template_ref is_class)
            (type_ref _Up)
            (template_ref __bool_constant)
            (unary_operator
              (type_ref _Up))
            (template_ref __not_)
            (template_ref is_base_of)
            (type_ref class std::nested_exception)
            (type_ref _Up)))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __throw_with_nested_impl))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Tp))
            (decl_ref_expr __t))
          (call_expr
            (type_ref __nest)
            (init_list_expr)))))
    (type_alias_template_decl __rethrow_if_nested_cond
      (template_type_parameter _Tp)
      (type_alias_decl __rethrow_if_nested_cond
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __and_)
          (template_ref is_polymorphic)
          (type_ref _Tp)
          (template_ref __or_)
          (template_ref __not_)
          (template_ref is_base_of)
          (type_ref class std::nested_exception)
          (type_ref _Tp)
          (template_ref is_convertible)
          (type_ref _Tp)
          (type_ref class std::nested_exception))))
    (function_template __rethrow_if_nested_impl
      (template_type_parameter _Ex)
      (template_ref __rethrow_if_nested_cond)
      (type_ref _Ex)
      (parm_decl __ptr
        (type_ref _Ex))
      (compound_stmt
        (if_stmt
          (var_decl __ne_ptr
            (cxx_dynamic_cast_expr
              (type_ref class std::nested_exception)
              (decl_ref_expr __ptr)))
          (decl_ref_expr __ne_ptr)
          (call_expr rethrow_nested
            (member_ref_expr rethrow_nested
              (decl_ref_expr __ne_ptr))))))
    (function_decl __rethrow_if_nested_impl
      (parm_decl)
      (compound_stmt))
    (function_template rethrow_if_nested
      (template_type_parameter _Ex)
      (parm_decl __ex
        (type_ref _Ex))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref __rethrow_if_nested_impl))
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __addressof))
            (decl_ref_expr __ex))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/ext/concurrence.h
  (namespace __gnu_cxx
    (visibility_attr default)
    (enum_decl _Lock_policy
      (enum_constant_decl _S_single)
      (enum_constant_decl _S_mutex)
      (enum_constant_decl _S_atomic))
    (var_decl __default_lock_policy
      (type_ref enum __gnu_cxx::_Lock_policy)
      (decl_ref_expr _S_atomic))
    (class_decl __concurrence_lock_error
      (cxx_base_specifier std::exception
        (namespace_ref std)
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (cxx_method what
        (compound_stmt
          (return_stmt
            (string_literal "__gnu_cxx::__concurrence_lock_error")))))
    (class_decl __concurrence_unlock_error
      (cxx_base_specifier std::exception
        (namespace_ref std)
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (cxx_method what
        (compound_stmt
          (return_stmt
            (string_literal "__gnu_cxx::__concurrence_unlock_error")))))
    (class_decl __concurrence_broadcast_error
      (cxx_base_specifier std::exception
        (namespace_ref std)
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (cxx_method what
        (compound_stmt
          (return_stmt
            (string_literal "__gnu_cxx::__concurrence_broadcast_error")))))
    (class_decl __concurrence_wait_error
      (cxx_base_specifier std::exception
        (namespace_ref std)
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (cxx_method what
        (compound_stmt
          (return_stmt
            (string_literal "__gnu_cxx::__concurrence_wait_error")))))
    (function_decl __throw_concurrence_lock_error
      (compound_stmt
        (paren_expr
          (cxx_throw_expr
            (call_expr
              (paren_expr
                (call_expr __concurrence_lock_error
                  (type_ref class __gnu_cxx::__concurrence_lock_error))))))))
    (function_decl __throw_concurrence_unlock_error
      (compound_stmt
        (paren_expr
          (cxx_throw_expr
            (call_expr
              (paren_expr
                (call_expr __concurrence_unlock_error
                  (type_ref class __gnu_cxx::__concurrence_unlock_error))))))))
    (function_decl __throw_concurrence_broadcast_error
      (compound_stmt
        (paren_expr
          (cxx_throw_expr
            (call_expr
              (paren_expr
                (call_expr __concurrence_broadcast_error
                  (type_ref class __gnu_cxx::__concurrence_broadcast_error))))))))
    (function_decl __throw_concurrence_wait_error
      (compound_stmt
        (paren_expr
          (cxx_throw_expr
            (call_expr
              (paren_expr
                (call_expr __concurrence_wait_error
                  (type_ref class __gnu_cxx::__concurrence_wait_error))))))))
    (class_decl __mutex
      (cxx_access_spec_decl)
      (field_decl _M_mutex
        (type_ref __gthread_mutex_t)
        (init_list_expr
          (init_list_expr
            (integer_literal)
            (integer_literal)
            (integer_literal)
            (integer_literal)
            (decl_ref_expr PTHREAD_MUTEX_TIMED_NP)
            (integer_literal)
            (integer_literal)
            (init_list_expr
              (integer_literal)
              (integer_literal)))))
      (constructor __mutex
        (parm_decl
          (type_ref class __gnu_cxx::__mutex)))
      (cxx_method operator=
        (type_ref class __gnu_cxx::__mutex)
        (parm_decl
          (type_ref class __gnu_cxx::__mutex)))
      (cxx_access_spec_decl)
      (constructor __mutex
        (compound_stmt))
      (cxx_method lock
        (compound_stmt
          (if_stmt
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __gthread_mutex_lock
                    (decl_ref_expr __gthread_mutex_lock)
                    (unary_operator
                      (member_ref_expr _M_mutex)))
                  (integer_literal 0))
                (call_expr __throw_concurrence_lock_error
                  (decl_ref_expr __throw_concurrence_lock_error)))))))
      (cxx_method unlock
        (compound_stmt
          (if_stmt
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __gthread_mutex_unlock
                    (decl_ref_expr __gthread_mutex_unlock)
                    (unary_operator
                      (member_ref_expr _M_mutex)))
                  (integer_literal 0))
                (call_expr __throw_concurrence_unlock_error
                  (decl_ref_expr __throw_concurrence_unlock_error)))))))
      (cxx_method gthread_mutex
        (type_ref __gthread_mutex_t)
        (compound_stmt
          (return_stmt
            (unary_operator
              (member_ref_expr _M_mutex))))))
    (class_decl __recursive_mutex
      (cxx_access_spec_decl)
      (field_decl _M_mutex
        (type_ref __gthread_recursive_mutex_t)
        (init_list_expr
          (init_list_expr
            (integer_literal)
            (integer_literal)
            (integer_literal)
            (integer_literal)
            (decl_ref_expr PTHREAD_MUTEX_RECURSIVE_NP)
            (integer_literal)
            (integer_literal)
            (init_list_expr
              (integer_literal)
              (integer_literal)))))
      (constructor __recursive_mutex
        (parm_decl
          (type_ref class __gnu_cxx::__recursive_mutex)))
      (cxx_method operator=
        (type_ref class __gnu_cxx::__recursive_mutex)
        (parm_decl
          (type_ref class __gnu_cxx::__recursive_mutex)))
      (cxx_access_spec_decl)
      (constructor __recursive_mutex
        (compound_stmt))
      (cxx_method lock
        (compound_stmt
          (if_stmt
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __gthread_recursive_mutex_lock
                    (decl_ref_expr __gthread_recursive_mutex_lock)
                    (unary_operator
                      (member_ref_expr _M_mutex)))
                  (integer_literal 0))
                (call_expr __throw_concurrence_lock_error
                  (decl_ref_expr __throw_concurrence_lock_error)))))))
      (cxx_method unlock
        (compound_stmt
          (if_stmt
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __gthread_recursive_mutex_unlock
                    (decl_ref_expr __gthread_recursive_mutex_unlock)
                    (unary_operator
                      (member_ref_expr _M_mutex)))
                  (integer_literal 0))
                (call_expr __throw_concurrence_unlock_error
                  (decl_ref_expr __throw_concurrence_unlock_error)))))))
      (cxx_method gthread_recursive_mutex
        (type_ref __gthread_recursive_mutex_t)
        (compound_stmt
          (return_stmt
            (unary_operator
              (member_ref_expr _M_mutex))))))
    (class_decl __scoped_lock
      (cxx_access_spec_decl)
      (typedef_decl __mutex_type
        (type_ref class __gnu_cxx::__mutex))
      (cxx_access_spec_decl)
      (field_decl _M_device
        (type_ref __gnu_cxx::__scoped_lock::__mutex_type))
      (constructor __scoped_lock
        (parm_decl
          (type_ref class __gnu_cxx::__scoped_lock)))
      (cxx_method operator=
        (type_ref class __gnu_cxx::__scoped_lock)
        (parm_decl
          (type_ref class __gnu_cxx::__scoped_lock)))
      (cxx_access_spec_decl)
      (constructor __scoped_lock
        (parm_decl __name
          (type_ref __gnu_cxx::__scoped_lock::__mutex_type))
        (member_ref _M_device)
        (decl_ref_expr __name)
        (compound_stmt
          (call_expr lock
            (member_ref_expr lock
              (member_ref_expr _M_device)))))
      (destructor ~__scoped_lock
        (compound_stmt
          (call_expr unlock
            (member_ref_expr unlock
              (member_ref_expr _M_device))))))
    (class_decl __cond
      (cxx_access_spec_decl)
      (field_decl _M_cond
        (type_ref __gthread_cond_t)
        (init_list_expr
          (init_list_expr
            (init_list_expr
              (integer_literal))
            (init_list_expr
              (integer_literal))
            (init_list_expr
              (integer_literal)
              (integer_literal))
            (init_list_expr
              (integer_literal)
              (integer_literal))
            (integer_literal)
            (integer_literal)
            (init_list_expr
              (integer_literal)
              (integer_literal)))))
      (constructor __cond
        (parm_decl
          (type_ref class __gnu_cxx::__cond)))
      (cxx_method operator=
        (type_ref class __gnu_cxx::__cond)
        (parm_decl
          (type_ref class __gnu_cxx::__cond)))
      (cxx_access_spec_decl)
      (constructor __cond
        (compound_stmt))
      (cxx_method broadcast
        (compound_stmt
          (if_stmt
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __gthread_cond_broadcast
                    (decl_ref_expr __gthread_cond_broadcast)
                    (unary_operator
                      (member_ref_expr _M_cond)))
                  (integer_literal 0))
                (call_expr __throw_concurrence_broadcast_error
                  (decl_ref_expr __throw_concurrence_broadcast_error)))))))
      (cxx_method wait
        (parm_decl mutex
          (type_ref class __gnu_cxx::__mutex))
        (compound_stmt
          (compound_stmt
            (if_stmt
              (binary_operator
                (call_expr __gthread_cond_wait
                  (decl_ref_expr __gthread_cond_wait)
                  (unary_operator
                    (member_ref_expr _M_cond))
                  (call_expr gthread_mutex
                    (member_ref_expr gthread_mutex
                      (decl_ref_expr mutex))))
                (integer_literal 0))
              (call_expr __throw_concurrence_wait_error
                (decl_ref_expr __throw_concurrence_wait_error))))))
      (cxx_method wait_recursive
        (parm_decl mutex
          (type_ref class __gnu_cxx::__recursive_mutex))
        (compound_stmt
          (compound_stmt
            (if_stmt
              (binary_operator
                (call_expr __gthread_cond_wait_recursive
                  (decl_ref_expr __gthread_cond_wait_recursive)
                  (unary_operator
                    (member_ref_expr _M_cond))
                  (call_expr gthread_recursive_mutex
                    (member_ref_expr gthread_recursive_mutex
                      (decl_ref_expr mutex))))
                (integer_literal 0))
              (call_expr __throw_concurrence_wait_error
                (decl_ref_expr __throw_concurrence_wait_error))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/shared_ptr_base.h
  (namespace std
    (visibility_attr default)
    (class_template auto_ptr
      (template_type_parameter))
    (class_decl bad_weak_ptr
      (cxx_base_specifier std::exception
        (namespace_ref std)
        (type_ref class std::exception))
      (cxx_access_spec_decl)
      (cxx_method what)
      (destructor ~bad_weak_ptr))
    (function_decl __throw_bad_weak_ptr
      (compound_stmt
        (paren_expr
          (cxx_throw_expr
            (call_expr
              (paren_expr
                (call_expr bad_weak_ptr
                  (type_ref class std::bad_weak_ptr))))))))
    (using_declaration _Lock_policy
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref _Lock_policy))
    (using_declaration __default_lock_policy
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref __default_lock_policy))
    (using_declaration _S_single
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref _S_single))
    (using_declaration _S_mutex
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref _S_mutex))
    (using_declaration _S_atomic
      (namespace_ref __gnu_cxx)
      (overloaded_decl_ref _S_atomic))
    (class_template _Mutex_base
      (template_non_type_parameter _Lp)
      (cxx_access_spec_decl)
      (enum_decl
        (enum_constant_decl _S_need_barriers
          (integer_literal 0))))
    (class_decl _Mutex_base
      (decl_ref_expr _S_mutex)
      (cxx_base_specifier __gnu_cxx::__mutex
        (namespace_ref __gnu_cxx)
        (type_ref class __gnu_cxx::__mutex))
      (cxx_access_spec_decl)
      (enum_decl
        (enum_constant_decl _S_need_barriers
          (integer_literal 1))))
    (class_template _Sp_counted_base
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy))
      (cxx_base_specifier _Mutex_base<_Lp>
        (template_ref _Mutex_base)
        (decl_ref_expr _Lp))
      (cxx_access_spec_decl)
      (constructor _Sp_counted_base<_Lp>
        (member_ref _M_use_count)
        (integer_literal 1)
        (member_ref _M_weak_count)
        (integer_literal 1)
        (compound_stmt))
      (destructor ~_Sp_counted_base<_Lp>
        (compound_stmt))
      (cxx_method _M_dispose)
      (cxx_method _M_destroy
        (compound_stmt
          (cxx_delete_expr
            (cxx_this_expr))))
      (cxx_method _M_get_deleter
        (parm_decl
          (namespace_ref std)
          (type_ref class std::type_info)))
      (cxx_method _M_add_ref_copy
        (compound_stmt
          (call_expr __atomic_add_dispatch
            (decl_ref_expr __atomic_add_dispatch
              (namespace_ref __gnu_cxx))
            (unary_operator
              (member_ref_expr _M_use_count))
            (integer_literal 1))))
      (cxx_method _M_add_ref_lock
        (compound_stmt
          (if_stmt
            (unary_operator
              (call_expr _M_add_ref_lock_nothrow
                (member_ref_expr _M_add_ref_lock_nothrow)))
            (call_expr __throw_bad_weak_ptr
              (decl_ref_expr __throw_bad_weak_ptr)))))
      (cxx_method _M_add_ref_lock_nothrow)
      (cxx_method _M_release
        (compound_stmt
          (null_stmt)
          (if_stmt
            (binary_operator
              (call_expr __exchange_and_add_dispatch
                (decl_ref_expr __exchange_and_add_dispatch
                  (namespace_ref __gnu_cxx))
                (unary_operator
                  (member_ref_expr _M_use_count))
                (unary_operator
                  (integer_literal 1)))
              (integer_literal 1))
            (compound_stmt
              (null_stmt)
              (call_expr _M_dispose
                (member_ref_expr _M_dispose))
              (if_stmt
                (member_ref_expr
                  (template_ref _Mutex_base)
                  (decl_ref_expr _Lp))
                (compound_stmt
                  (call_expr __atomic_thread_fence
                    (decl_ref_expr __atomic_thread_fence)
                    (integer_literal))))
              (null_stmt)
              (if_stmt
                (binary_operator
                  (call_expr __exchange_and_add_dispatch
                    (decl_ref_expr __exchange_and_add_dispatch
                      (namespace_ref __gnu_cxx))
                    (unary_operator
                      (member_ref_expr _M_weak_count))
                    (unary_operator
                      (integer_literal 1)))
                  (integer_literal 1))
                (compound_stmt
                  (null_stmt)
                  (call_expr _M_destroy
                    (member_ref_expr _M_destroy))))))))
      (cxx_method _M_weak_add_ref
        (compound_stmt
          (call_expr __atomic_add_dispatch
            (decl_ref_expr __atomic_add_dispatch
              (namespace_ref __gnu_cxx))
            (unary_operator
              (member_ref_expr _M_weak_count))
            (integer_literal 1))))
      (cxx_method _M_weak_release
        (compound_stmt
          (null_stmt)
          (if_stmt
            (binary_operator
              (call_expr __exchange_and_add_dispatch
                (decl_ref_expr __exchange_and_add_dispatch
                  (namespace_ref __gnu_cxx))
                (unary_operator
                  (member_ref_expr _M_weak_count))
                (unary_operator
                  (integer_literal 1)))
              (integer_literal 1))
            (compound_stmt
              (null_stmt)
              (if_stmt
                (member_ref_expr
                  (template_ref _Mutex_base)
                  (decl_ref_expr _Lp))
                (compound_stmt
                  (call_expr __atomic_thread_fence
                    (decl_ref_expr __atomic_thread_fence)
                    (integer_literal))))
              (call_expr _M_destroy
                (member_ref_expr _M_destroy))))))
      (cxx_method _M_get_use_count
        (compound_stmt
          (return_stmt
            (unary_operator
              (member_ref_expr _M_use_count))
            (integer_literal))))
      (cxx_access_spec_decl)
      (constructor _Sp_counted_base<_Lp>
        (parm_decl
          (type_ref _Sp_counted_base<_Lp>)))
      (cxx_method operator=
        (type_ref _Sp_counted_base<_Lp>)
        (parm_decl
          (type_ref _Sp_counted_base<_Lp>)))
      (field_decl _M_use_count
        (type_ref _Atomic_word))
      (field_decl _M_weak_count
        (type_ref _Atomic_word)))
    (cxx_method _M_add_ref_lock_nothrow
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (if_stmt
          (binary_operator
            (member_ref_expr _M_use_count)
            (integer_literal 0))
          (return_stmt
            (cxx_bool_literal_expr)))
        (unary_operator
          (member_ref_expr _M_use_count))
        (return_stmt
          (cxx_bool_literal_expr))))
    (cxx_method _M_add_ref_lock_nothrow
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_mutex)
      (compound_stmt
        (decl_stmt
          (var_decl sentry
            (namespace_ref __gnu_cxx)
            (type_ref class __gnu_cxx::__scoped_lock)
            (call_expr __scoped_lock
              (unary_operator
                (cxx_this_expr)))))
        (if_stmt
          (binary_operator
            (call_expr __exchange_and_add_dispatch
              (decl_ref_expr __exchange_and_add_dispatch
                (namespace_ref __gnu_cxx))
              (unary_operator
                (member_ref_expr _M_use_count))
              (integer_literal 1))
            (integer_literal 0))
          (compound_stmt
            (binary_operator
              (member_ref_expr _M_use_count)
              (integer_literal 0))
            (return_stmt
              (cxx_bool_literal_expr))))
        (return_stmt
          (cxx_bool_literal_expr))))
    (cxx_method _M_add_ref_lock_nothrow
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_atomic)
      (compound_stmt
        (decl_stmt
          (var_decl __count
            (type_ref _Atomic_word)
            (call_expr _M_get_use_count
              (member_ref_expr _M_get_use_count))))
        (do_stmt
          (compound_stmt
            (if_stmt
              (binary_operator
                (decl_ref_expr __count)
                (integer_literal 0))
              (return_stmt
                (cxx_bool_literal_expr))))
          (unary_operator
            (unary_operator
              (member_ref_expr _M_use_count))
            (integer_literal)
            (unary_operator
              (decl_ref_expr __count))
            (integer_literal)
            (binary_operator
              (decl_ref_expr __count)
              (integer_literal 1))
            (cxx_bool_literal_expr)))
        (return_stmt
          (cxx_bool_literal_expr))))
    (cxx_method _M_add_ref_copy
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (unary_operator
          (member_ref_expr _M_use_count))))
    (cxx_method _M_release
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (if_stmt
          (binary_operator
            (unary_operator
              (member_ref_expr _M_use_count))
            (integer_literal 0))
          (compound_stmt
            (call_expr _M_dispose
              (member_ref_expr _M_dispose))
            (if_stmt
              (binary_operator
                (unary_operator
                  (member_ref_expr _M_weak_count))
                (integer_literal 0))
              (call_expr _M_destroy
                (member_ref_expr _M_destroy)))))))
    (cxx_method _M_weak_add_ref
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (unary_operator
          (member_ref_expr _M_weak_count))))
    (cxx_method _M_weak_release
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (if_stmt
          (binary_operator
            (unary_operator
              (member_ref_expr _M_weak_count))
            (integer_literal 0))
          (call_expr _M_destroy
            (member_ref_expr _M_destroy)))))
    (cxx_method _M_get_use_count
      (template_ref _Sp_counted_base)
      (decl_ref_expr _S_single)
      (compound_stmt
        (return_stmt
          (member_ref_expr _M_use_count))))
    (class_template __shared_ptr
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy)))
    (class_template __weak_ptr
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy)))
    (class_template __enable_shared_from_this
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy)))
    (class_template shared_ptr
      (template_type_parameter _Tp))
    (class_template weak_ptr
      (template_type_parameter _Tp))
    (class_template owner_less
      (template_type_parameter _Tp))
    (class_template enable_shared_from_this
      (template_type_parameter _Tp))
    (class_template __weak_count
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy)))
    (class_template __shared_count
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy)))
    (class_template _Sp_counted_ptr
      (template_type_parameter _Ptr)
      (template_non_type_parameter _Lp)
      (cxx_final_attr)
      (cxx_base_specifier _Sp_counted_base<_Lp>
        (template_ref _Sp_counted_base)
        (decl_ref_expr _Lp))
      (cxx_access_spec_decl)
      (constructor _Sp_counted_ptr<_Ptr, _Lp>
        (parm_decl __p
          (type_ref _Ptr))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (compound_stmt))
      (cxx_method _M_dispose
        (compound_stmt
          (cxx_delete_expr
            (member_ref_expr _M_ptr))))
      (cxx_method _M_destroy
        (compound_stmt
          (cxx_delete_expr
            (cxx_this_expr))))
      (cxx_method _M_get_deleter
        (parm_decl
          (namespace_ref std)
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (cxx_null_ptr_literal_expr))))
      (constructor _Sp_counted_ptr<_Ptr, _Lp>
        (parm_decl
          (type_ref _Sp_counted_ptr<_Ptr, _Lp>)))
      (cxx_method operator=
        (type_ref _Sp_counted_ptr<_Ptr, _Lp>)
        (parm_decl
          (type_ref _Sp_counted_ptr<_Ptr, _Lp>)))
      (cxx_access_spec_decl)
      (field_decl _M_ptr
        (type_ref _Ptr)))
    (cxx_method _M_dispose
      (template_ref _Sp_counted_ptr)
      (type_ref std::nullptr_t)
      (decl_ref_expr _S_single)
      (compound_stmt))
    (cxx_method _M_dispose
      (template_ref _Sp_counted_ptr)
      (type_ref std::nullptr_t)
      (decl_ref_expr _S_mutex)
      (compound_stmt))
    (cxx_method _M_dispose
      (template_ref _Sp_counted_ptr)
      (type_ref std::nullptr_t)
      (decl_ref_expr _S_atomic)
      (compound_stmt))
    (class_template _Sp_ebo_helper
      (template_non_type_parameter _Nm)
      (template_type_parameter _Tp)
      (template_non_type_parameter __use_ebo
        (binary_operator
          (unary_operator
            (type_ref _Tp))
          (type_ref _Tp))))
    (class_template_partial_specialization _Sp_ebo_helper
      (template_non_type_parameter _Nm)
      (template_type_parameter _Tp)
      (decl_ref_expr _Nm)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (cxx_base_specifier _Tp
        (type_ref _Tp))
      (constructor _Sp_ebo_helper<_Nm, type-parameter-0-1, true>
        (parm_decl __tp
          (type_ref _Tp))
        (type_ref _Tp)
        (decl_ref_expr __tp)
        (compound_stmt))
      (constructor _Sp_ebo_helper<_Nm, type-parameter-0-1, true>
        (parm_decl __tp
          (type_ref _Tp))
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __tp))
        (compound_stmt))
      (cxx_method _S_get
        (type_ref _Tp)
        (parm_decl __eboh
          (type_ref _Sp_ebo_helper<_Nm, type-parameter-0-1, true>))
        (compound_stmt
          (return_stmt
            (cxx_static_cast_expr
              (type_ref _Tp)
              (decl_ref_expr __eboh))))))
    (class_template_partial_specialization _Sp_ebo_helper
      (template_non_type_parameter _Nm)
      (template_type_parameter _Tp)
      (decl_ref_expr _Nm)
      (type_ref _Tp)
      (cxx_bool_literal_expr)
      (constructor _Sp_ebo_helper<_Nm, type-parameter-0-1, false>
        (parm_decl __tp
          (type_ref _Tp))
        (member_ref _M_tp)
        (decl_ref_expr __tp)
        (compound_stmt))
      (constructor _Sp_ebo_helper<_Nm, type-parameter-0-1, false>
        (parm_decl __tp
          (type_ref _Tp))
        (member_ref _M_tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __tp))
        (compound_stmt))
      (cxx_method _S_get
        (type_ref _Tp)
        (parm_decl __eboh
          (type_ref _Sp_ebo_helper<_Nm, type-parameter-0-1, false>))
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (decl_ref_expr __eboh)))))
      (cxx_access_spec_decl)
      (field_decl _M_tp
        (type_ref _Tp)))
    (class_template _Sp_counted_deleter
      (template_type_parameter _Ptr)
      (template_type_parameter _Deleter)
      (template_type_parameter _Alloc)
      (template_non_type_parameter _Lp)
      (cxx_final_attr)
      (cxx_base_specifier _Sp_counted_base<_Lp>
        (template_ref _Sp_counted_base)
        (decl_ref_expr _Lp))
      (class_decl _Impl
        (cxx_base_specifier _Sp_ebo_helper<0, _Deleter>
          (template_ref _Sp_ebo_helper)
          (integer_literal 0)
          (type_ref _Deleter))
        (cxx_base_specifier _Sp_ebo_helper<1, _Alloc>
          (template_ref _Sp_ebo_helper)
          (integer_literal 1)
          (type_ref _Alloc))
        (typedef_decl _Del_base
          (template_ref _Sp_ebo_helper)
          (integer_literal 0)
          (type_ref _Deleter))
        (typedef_decl _Alloc_base
          (template_ref _Sp_ebo_helper)
          (integer_literal 1)
          (type_ref _Alloc))
        (cxx_access_spec_decl)
        (constructor _Impl
          (parm_decl __p
            (type_ref _Ptr))
          (parm_decl __d
            (type_ref _Deleter))
          (parm_decl __a
            (type_ref _Alloc))
          (type_ref std::_Sp_counted_deleter::_Impl::_Del_base)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __d))
          (type_ref std::_Sp_counted_deleter::_Impl::_Alloc_base)
          (decl_ref_expr __a)
          (member_ref _M_ptr)
          (decl_ref_expr __p)
          (compound_stmt))
        (cxx_method _M_del
          (type_ref _Deleter)
          (compound_stmt
            (return_stmt
              (call_expr
                (member_ref_expr
                  (type_ref std::_Sp_counted_deleter::_Impl::_Del_base))
                (unary_operator
                  (cxx_this_expr))))))
        (cxx_method _M_alloc
          (type_ref _Alloc)
          (compound_stmt
            (return_stmt
              (call_expr
                (member_ref_expr
                  (type_ref std::_Sp_counted_deleter::_Impl::_Alloc_base))
                (unary_operator
                  (cxx_this_expr))))))
        (field_decl _M_ptr
          (type_ref _Ptr)))
      (cxx_access_spec_decl)
      (type_alias_decl __allocator_type
        (template_ref __alloc_rebind)
        (type_ref _Alloc)
        (type_ref _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>))
      (constructor _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl __d
          (type_ref _Deleter))
        (member_ref _M_impl)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr
          (type_ref _Alloc))
        (compound_stmt))
      (constructor _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (member_ref _M_impl)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (decl_ref_expr __a)
        (compound_stmt))
      (destructor ~_Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>
        (compound_stmt))
      (cxx_method _M_dispose
        (compound_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_impl)))
            (member_ref_expr
              (member_ref_expr _M_impl)))))
      (cxx_method _M_destroy
        (compound_stmt
          (decl_stmt
            (var_decl __a
              (type_ref std::_Sp_counted_deleter::__allocator_type)
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_impl)))))
          (decl_stmt
            (var_decl __guard_ptr
              (template_ref __allocated_ptr)
              (type_ref std::_Sp_counted_deleter::__allocator_type)
              (init_list_expr
                (decl_ref_expr __a)
                (cxx_this_expr))))
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (type_ref _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp>)))))
      (cxx_method _M_get_deleter
        (parm_decl __ti
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (conditional_operator
              (call_expr operator==
                (decl_ref_expr __ti)
                (decl_ref_expr operator==)
                (cxx_typeid_expr
                  (type_ref _Deleter)))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __addressof))
                (call_expr
                  (member_ref_expr
                    (member_ref_expr _M_impl))))
              (cxx_null_ptr_literal_expr)))))
      (cxx_access_spec_decl)
      (field_decl _M_impl
        (type_ref class std::_Sp_counted_deleter::_Impl)))
    (struct_decl _Sp_make_shared_tag
      (cxx_access_spec_decl)
      (friend_decl
        (class_template _Sp_counted_ptr_inplace
          (template_type_parameter _Tp)
          (template_type_parameter _Alloc)
          (template_non_type_parameter _Lp)))
      (cxx_method _S_ti
        (visibility_attr default)
        (type_ref class std::type_info)
        (compound_stmt
          (decl_stmt
            (var_decl __tag
              (aligned_attr)
              (cxx_unary_expr
                (type_ref class std::type_info))
              (init_list_expr)))
          (return_stmt
            (cxx_reinterpret_cast_expr
              (type_ref class std::type_info)
              (decl_ref_expr __tag)))))
      (cxx_method _S_eq
        (parm_decl
          (type_ref class std::type_info))))
    (class_template _Sp_alloc_shared_tag
      (template_type_parameter _Alloc)
      (field_decl _M_a
        (type_ref _Alloc)))
    (class_template _Sp_counted_ptr_inplace
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_non_type_parameter _Lp)
      (cxx_final_attr)
      (cxx_base_specifier _Sp_counted_base<_Lp>
        (template_ref _Sp_counted_base)
        (decl_ref_expr _Lp))
      (class_decl _Impl
        (cxx_base_specifier _Sp_ebo_helper<0, _Alloc>
          (template_ref _Sp_ebo_helper)
          (integer_literal 0)
          (type_ref _Alloc))
        (typedef_decl _A_base
          (template_ref _Sp_ebo_helper)
          (integer_literal 0)
          (type_ref _Alloc))
        (cxx_access_spec_decl)
        (constructor _Impl
          (parm_decl __a
            (type_ref _Alloc))
          (type_ref std::_Sp_counted_ptr_inplace::_Impl::_A_base)
          (decl_ref_expr __a)
          (compound_stmt))
        (cxx_method _M_alloc
          (type_ref _Alloc)
          (compound_stmt
            (return_stmt
              (call_expr
                (member_ref_expr
                  (type_ref std::_Sp_counted_ptr_inplace::_Impl::_A_base))
                (unary_operator
                  (cxx_this_expr))))))
        (field_decl _M_storage
          (namespace_ref __gnu_cxx)
          (template_ref __aligned_buffer)
          (type_ref _Tp)))
      (cxx_access_spec_decl)
      (type_alias_decl __allocator_type
        (template_ref __alloc_rebind)
        (type_ref _Alloc)
        (type_ref _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>))
      (function_template _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>
        (template_type_parameter _Args)
        (parm_decl __a
          (type_ref _Alloc))
        (parm_decl __args
          (type_ref _Args))
        (member_ref _M_impl)
        (decl_ref_expr __a)
        (compound_stmt
          (call_expr
            (member_ref_expr
              (template_ref allocator_traits)
              (type_ref _Alloc))
            (decl_ref_expr __a)
            (call_expr _M_ptr
              (member_ref_expr _M_ptr))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args))))))
      (destructor ~_Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>
        (compound_stmt))
      (cxx_method _M_dispose
        (compound_stmt
          (call_expr
            (member_ref_expr
              (template_ref allocator_traits)
              (type_ref _Alloc))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_impl)))
            (call_expr _M_ptr
              (member_ref_expr _M_ptr)))))
      (cxx_method _M_destroy
        (compound_stmt
          (decl_stmt
            (var_decl __a
              (type_ref std::_Sp_counted_ptr_inplace::__allocator_type)
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_impl)))))
          (decl_stmt
            (var_decl __guard_ptr
              (template_ref __allocated_ptr)
              (type_ref std::_Sp_counted_ptr_inplace::__allocator_type)
              (init_list_expr
                (decl_ref_expr __a)
                (cxx_this_expr))))
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (type_ref _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp>)))))
      (cxx_access_spec_decl)
      (friend_decl
        (template_ref __shared_count)
        (decl_ref_expr _Lp))
      (cxx_method _M_get_deleter
        (cxx_override_attr)
        (parm_decl __ti
          (namespace_ref std)
          (type_ref class std::type_info))
        (compound_stmt
          (decl_stmt
            (var_decl __ptr
              (cxx_const_cast_expr
                (template_ref remove_cv)
                (type_ref _Tp)
                (call_expr _M_ptr
                  (member_ref_expr _M_ptr)))))
          (if_stmt
            (binary_operator
              (binary_operator
                (unary_operator
                  (decl_ref_expr __ti))
                (unary_operator
                  (call_expr _S_ti
                    (decl_ref_expr _S_ti
                      (type_ref struct std::_Sp_make_shared_tag)))))
              (call_expr operator==
                (decl_ref_expr __ti)
                (decl_ref_expr operator==)
                (cxx_typeid_expr
                  (type_ref struct std::_Sp_make_shared_tag))))
            (return_stmt
              (decl_ref_expr __ptr)))
          (return_stmt
            (cxx_null_ptr_literal_expr))))
      (cxx_method _M_ptr
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr
                  (member_ref_expr _M_impl)))))))
      (field_decl _M_impl
        (type_ref class std::_Sp_counted_ptr_inplace::_Impl)))
    (struct_decl __sp_array_delete
      (function_template operator()
        (template_type_parameter _Yp)
        (parm_decl __p
          (type_ref _Yp))
        (compound_stmt
          (cxx_delete_expr
            (decl_ref_expr __p)))))
    (class_template __shared_count
      (template_non_type_parameter _Lp)
      (class_template __not_alloc_shared_tag
        (template_type_parameter _Tp)
        (type_alias_decl type))
      (class_template_partial_specialization __not_alloc_shared_tag
        (template_type_parameter _Tp)
        (template_ref _Sp_alloc_shared_tag)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (constructor __shared_count<_Lp>
        (member_ref _M_pi)
        (integer_literal 0)
        (compound_stmt))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Ptr)
        (parm_decl __p
          (type_ref _Ptr))
        (member_ref _M_pi)
        (integer_literal 0)
        (compound_stmt
          (cxx_try_stmt
            (compound_stmt
              (binary_operator
                (member_ref_expr _M_pi)
                (cxx_new_expr
                  (template_ref _Sp_counted_ptr)
                  (type_ref _Ptr)
                  (decl_ref_expr _Lp)
                  (decl_ref_expr __p))))
            (cxx_catch_stmt
              (compound_stmt
                (cxx_delete_expr
                  (decl_ref_expr __p))
                (cxx_throw_expr))))))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Ptr)
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl
          (type_ref std::false_type))
        (type_ref __shared_count<_Lp>)
        (decl_ref_expr __p)
        (compound_stmt))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Ptr)
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl
          (type_ref std::true_type))
        (type_ref __shared_count<_Lp>)
        (decl_ref_expr __p)
        (cxx_functional_cast_expr
          (type_ref struct std::__sp_array_delete)
          (init_list_expr))
        (call_expr allocator
          (template_ref allocator))
        (compound_stmt))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Ptr)
        (template_type_parameter _Deleter)
        (template_type_parameter
          (template_ref __not_alloc_shared_tag)
          (type_ref _Deleter))
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl __d
          (type_ref _Deleter))
        (type_ref __shared_count<_Lp>)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr allocator
          (template_ref allocator))
        (compound_stmt))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Ptr)
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (template_type_parameter
          (template_ref __not_alloc_shared_tag)
          (type_ref _Deleter))
        (parm_decl __p
          (type_ref _Ptr))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (member_ref _M_pi)
        (integer_literal 0)
        (compound_stmt
          (decl_stmt
            (typedef_decl _Sp_cd_type
              (template_ref _Sp_counted_deleter)
              (type_ref _Ptr)
              (type_ref _Deleter)
              (type_ref _Alloc)
              (decl_ref_expr _Lp)))
          (cxx_try_stmt
            (compound_stmt
              (decl_stmt
                (var_decl __a2
                  (type_ref _Sp_cd_type)
                  (decl_ref_expr __a)))
              (decl_stmt
                (var_decl __guard
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref __allocate_guarded))
                    (decl_ref_expr __a2))))
              (decl_stmt
                (var_decl __mem
                  (type_ref _Sp_cd_type)
                  (call_expr
                    (member_ref_expr
                      (decl_ref_expr __guard)))))
              (cxx_new_expr
                (decl_ref_expr __mem)
                (type_ref _Sp_cd_type)
                (decl_ref_expr __p)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __d))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __a)))
              (binary_operator
                (member_ref_expr _M_pi)
                (decl_ref_expr __mem))
              (binary_operator
                (decl_ref_expr __guard)
                (cxx_null_ptr_literal_expr)))
            (cxx_catch_stmt
              (compound_stmt
                (call_expr __d
                  (decl_ref_expr __d)
                  (decl_ref_expr __p))
                (cxx_throw_expr))))))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Tp)
        (template_type_parameter _Alloc)
        (template_type_parameter _Args)
        (parm_decl __p
          (type_ref _Tp))
        (parm_decl __a
          (template_ref _Sp_alloc_shared_tag)
          (type_ref _Alloc))
        (parm_decl __args
          (type_ref _Args))
        (compound_stmt
          (decl_stmt
            (typedef_decl _Sp_cp_type
              (template_ref _Sp_counted_ptr_inplace)
              (type_ref _Tp)
              (type_ref _Alloc)
              (decl_ref_expr _Lp)))
          (decl_stmt
            (var_decl __a2
              (type_ref _Sp_cp_type)
              (member_ref_expr
                (decl_ref_expr __a))))
          (decl_stmt
            (var_decl __guard
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref __allocate_guarded))
                (decl_ref_expr __a2))))
          (decl_stmt
            (var_decl __mem
              (type_ref _Sp_cp_type)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __guard)))))
          (decl_stmt
            (var_decl __pi
              (cxx_new_expr
                (decl_ref_expr __mem)
                (type_ref _Sp_cp_type)
                (member_ref_expr
                  (decl_ref_expr __a))
                (pack_expansion_expr
                  (call_expr
                    (decl_ref_expr
                      (namespace_ref std)
                      (overloaded_decl_ref forward)
                      (type_ref _Args))
                    (decl_ref_expr __args))))))
          (binary_operator
            (decl_ref_expr __guard)
            (cxx_null_ptr_literal_expr))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __pi))
          (binary_operator
            (decl_ref_expr __p)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __pi))))))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Tp)
        (parm_decl __r
          (namespace_ref std)
          (template_ref auto_ptr)
          (type_ref _Tp)))
      (function_template __shared_count<_Lp>
        (template_type_parameter _Tp)
        (template_type_parameter _Del)
        (parm_decl __r
          (namespace_ref std)
          (template_ref unique_ptr)
          (type_ref _Tp)
          (type_ref _Del))
        (member_ref _M_pi)
        (integer_literal 0)
        (compound_stmt
          (if_stmt
            (call_expr
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r)))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (cxx_null_ptr_literal_expr))
            (return_stmt))
          (decl_stmt
            (type_alias_decl _Ptr
              (template_ref unique_ptr)
              (type_ref _Tp)
              (type_ref _Del)))
          (decl_stmt
            (type_alias_decl _Del2
              (template_ref conditional)
              (member_ref_expr
                (template_ref is_reference)
                (type_ref _Del))
              (template_ref reference_wrapper)
              (template_ref remove_reference)
              (type_ref _Del)
              (type_ref _Del)))
          (decl_stmt
            (type_alias_decl _Sp_cd_type
              (template_ref _Sp_counted_deleter)
              (type_ref _Ptr)
              (type_ref _Del2)
              (template_ref allocator)
              (decl_ref_expr _Lp)))
          (decl_stmt
            (type_alias_decl _Alloc
              (template_ref allocator)
              (type_ref _Sp_cd_type)))
          (decl_stmt
            (type_alias_decl _Alloc_traits
              (template_ref allocator_traits)
              (type_ref _Alloc)))
          (decl_stmt
            (var_decl __a
              (type_ref _Alloc)))
          (decl_stmt
            (var_decl __mem
              (type_ref _Sp_cd_type)
              (call_expr
                (member_ref_expr
                  (type_ref _Alloc_traits))
                (decl_ref_expr __a)
                (integer_literal 1))))
          (call_expr
            (member_ref_expr
              (type_ref _Alloc_traits))
            (decl_ref_expr __a)
            (decl_ref_expr __mem)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __r)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref forward)
                (type_ref _Del))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r)))))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __mem))))
      (constructor __shared_count<_Lp>
        (parm_decl __r
          (template_ref __weak_count)
          (decl_ref_expr _Lp)))
      (constructor __shared_count<_Lp>
        (parm_decl __r
          (template_ref __weak_count)
          (decl_ref_expr _Lp))
        (parm_decl
          (namespace_ref std)
          (type_ref struct std::nothrow_t)))
      (destructor ~__shared_count<_Lp>
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))))
      (constructor __shared_count<_Lp>
        (parm_decl __r
          (type_ref __shared_count<_Lp>))
        (member_ref _M_pi)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))))
      (cxx_method operator=
        (type_ref __shared_count<_Lp>)
        (parm_decl __r
          (type_ref __shared_count<_Lp>))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (template_ref _Sp_counted_base)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (decl_ref_expr __r))))
          (if_stmt
            (call_expr
              (decl_ref_expr __tmp)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (member_ref_expr _M_pi))
            (compound_stmt
              (if_stmt
                (call_expr
                  (decl_ref_expr __tmp)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (cxx_null_ptr_literal_expr))
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __tmp))))
              (if_stmt
                (call_expr
                  (member_ref_expr _M_pi)
                  (decl_ref_expr
                    (overloaded_decl_ref operator!=))
                  (cxx_null_ptr_literal_expr))
                (call_expr
                  (member_ref_expr
                    (member_ref_expr _M_pi))))
              (binary_operator
                (member_ref_expr _M_pi)
                (decl_ref_expr __tmp))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method _M_swap
        (parm_decl __r
          (type_ref __shared_count<_Lp>))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (template_ref _Sp_counted_base)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (decl_ref_expr __r))))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (member_ref_expr _M_pi))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __tmp))))
      (cxx_method _M_get_use_count
        (compound_stmt
          (return_stmt
            (conditional_operator
              (member_ref_expr _M_pi)
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_pi)))
              (integer_literal 0)))))
      (cxx_method _M_unique
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (member_ref_expr
                  (cxx_this_expr)))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 1)))))
      (cxx_method _M_get_deleter
        (parm_decl __ti
          (namespace_ref std)
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (conditional_operator
              (member_ref_expr _M_pi)
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_pi))
                (decl_ref_expr __ti))
              (cxx_null_ptr_literal_expr)))))
      (cxx_method _M_less
        (parm_decl __rhs
          (type_ref __shared_count<_Lp>))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (namespace_ref std)
                (template_ref less)
                (template_ref _Sp_counted_base)
                (decl_ref_expr _Lp))
              (member_ref_expr
                (cxx_this_expr))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (cxx_method _M_less
        (parm_decl __rhs
          (template_ref __weak_count)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (namespace_ref std)
                (template_ref less)
                (template_ref _Sp_counted_base)
                (decl_ref_expr _Lp))
              (member_ref_expr
                (cxx_this_expr))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (friend_decl
        (function_decl operator==
          (parm_decl __a
            (type_ref __shared_count<_Lp>))
          (parm_decl __b
            (type_ref __shared_count<_Lp>))
          (compound_stmt
            (return_stmt
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __a))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (member_ref_expr
                  (decl_ref_expr __b)))))))
      (cxx_access_spec_decl)
      (friend_decl
        (template_ref __weak_count)
        (decl_ref_expr _Lp))
      (field_decl _M_pi
        (template_ref _Sp_counted_base)
        (decl_ref_expr _Lp)))
    (class_template __weak_count
      (template_non_type_parameter _Lp)
      (cxx_access_spec_decl)
      (constructor __weak_count<_Lp>
        (member_ref _M_pi)
        (cxx_null_ptr_literal_expr)
        (compound_stmt))
      (constructor __weak_count<_Lp>
        (parm_decl __r
          (template_ref __shared_count)
          (decl_ref_expr _Lp))
        (member_ref _M_pi)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))))
      (constructor __weak_count<_Lp>
        (parm_decl __r
          (type_ref __weak_count<_Lp>))
        (member_ref _M_pi)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))))
      (constructor __weak_count<_Lp>
        (parm_decl __r
          (type_ref __weak_count<_Lp>))
        (member_ref _M_pi)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (destructor ~__weak_count<_Lp>
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))))
      (cxx_method operator=
        (type_ref __weak_count<_Lp>)
        (parm_decl __r
          (template_ref __shared_count)
          (decl_ref_expr _Lp))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (template_ref _Sp_counted_base)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (decl_ref_expr __r))))
          (if_stmt
            (call_expr
              (decl_ref_expr __tmp)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __tmp))))
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __tmp))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref __weak_count<_Lp>)
        (parm_decl __r
          (type_ref __weak_count<_Lp>))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (template_ref _Sp_counted_base)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (decl_ref_expr __r))))
          (if_stmt
            (call_expr
              (decl_ref_expr __tmp)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __tmp))))
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __tmp))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref __weak_count<_Lp>)
        (parm_decl __r
          (type_ref __weak_count<_Lp>))
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr))
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_pi))))
          (binary_operator
            (member_ref_expr _M_pi)
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method _M_swap
        (parm_decl __r
          (type_ref __weak_count<_Lp>))
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (template_ref _Sp_counted_base)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (decl_ref_expr __r))))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (member_ref_expr _M_pi))
          (binary_operator
            (member_ref_expr _M_pi)
            (decl_ref_expr __tmp))))
      (cxx_method _M_get_use_count
        (compound_stmt
          (return_stmt
            (conditional_operator
              (call_expr
                (member_ref_expr _M_pi)
                (decl_ref_expr
                  (overloaded_decl_ref operator!=))
                (cxx_null_ptr_literal_expr))
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_pi)))
              (integer_literal 0)))))
      (cxx_method _M_less
        (parm_decl __rhs
          (type_ref __weak_count<_Lp>))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (namespace_ref std)
                (template_ref less)
                (template_ref _Sp_counted_base)
                (decl_ref_expr _Lp))
              (member_ref_expr
                (cxx_this_expr))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (cxx_method _M_less
        (parm_decl __rhs
          (template_ref __shared_count)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (namespace_ref std)
                (template_ref less)
                (template_ref _Sp_counted_base)
                (decl_ref_expr _Lp))
              (member_ref_expr
                (cxx_this_expr))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (friend_decl
        (function_decl operator==
          (parm_decl __a
            (type_ref __weak_count<_Lp>))
          (parm_decl __b
            (type_ref __weak_count<_Lp>))
          (compound_stmt
            (return_stmt
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __a))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (member_ref_expr
                  (decl_ref_expr __b)))))))
      (cxx_access_spec_decl)
      (friend_decl
        (template_ref __shared_count)
        (decl_ref_expr _Lp))
      (field_decl _M_pi
        (template_ref _Sp_counted_base)
        (decl_ref_expr _Lp)))
    (constructor __shared_count<_Lp>
      (template_non_type_parameter _Lp)
      (template_ref __shared_count)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (template_ref __weak_count)
        (decl_ref_expr _Lp))
      (member_ref _M_pi)
      (member_ref_expr
        (decl_ref_expr __r))
      (compound_stmt
        (if_stmt
          (binary_operator
            (call_expr
              (member_ref_expr _M_pi)
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (cxx_null_ptr_literal_expr))
            (unary_operator
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_pi)))))
          (call_expr __throw_bad_weak_ptr
            (decl_ref_expr __throw_bad_weak_ptr)))))
    (constructor __shared_count<_Lp>
      (template_non_type_parameter _Lp)
      (template_ref __shared_count)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (template_ref __weak_count)
        (decl_ref_expr _Lp))
      (parm_decl
        (namespace_ref std)
        (type_ref struct std::nothrow_t))
      (member_ref _M_pi)
      (member_ref_expr
        (decl_ref_expr __r))
      (compound_stmt
        (if_stmt
          (binary_operator
            (member_ref_expr _M_pi)
            (unary_operator
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_pi)))))
          (binary_operator
            (member_ref_expr _M_pi)
            (cxx_null_ptr_literal_expr)))))
    (class_template __sp_compatible_with
      (template_type_parameter _Yp_ptr)
      (template_type_parameter _Tp_ptr)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __sp_compatible_with
      (template_type_parameter _Yp)
      (template_type_parameter _Tp)
      (type_ref _Yp)
      (type_ref _Tp)
      (cxx_base_specifier is_convertible<_Yp *, _Tp *>::type
        (template_ref is_convertible)
        (type_ref _Yp)
        (type_ref _Tp)))
    (class_template_partial_specialization __sp_compatible_with
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Up)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization __sp_compatible_with
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Up)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization __sp_compatible_with
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Up)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template_partial_specialization __sp_compatible_with
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Up)
      (cxx_base_specifier std::true_type
        (type_ref std::true_type)))
    (class_template __sp_is_constructible_arrN
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_type_parameter _Yp)
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __sp_is_constructible_arrN
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_type_parameter _Yp)
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Yp)
      (template_ref __void_t)
      (type_ref _Yp)
      (decl_ref_expr _Nm)
      (cxx_base_specifier is_convertible<_Yp (*)[_Nm], _Up (*)[_Nm]>::type
        (template_ref is_convertible)
        (type_ref _Yp)
        (decl_ref_expr _Nm)
        (type_ref _Up)
        (decl_ref_expr _Nm)))
    (class_template __sp_is_constructible_arr
      (template_type_parameter _Up)
      (template_type_parameter _Yp)
      (template_type_parameter)
      (cxx_base_specifier std::false_type
        (type_ref std::false_type)))
    (class_template_partial_specialization __sp_is_constructible_arr
      (template_type_parameter _Up)
      (template_type_parameter _Yp)
      (type_ref _Up)
      (type_ref _Yp)
      (template_ref __void_t)
      (type_ref _Yp)
      (cxx_base_specifier is_convertible<_Yp (*)[], _Up (*)[]>::type
        (template_ref is_convertible)
        (type_ref _Yp)
        (type_ref _Up)))
    (class_template __sp_is_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Yp))
    (class_template_partial_specialization __sp_is_constructible
      (template_type_parameter _Up)
      (template_non_type_parameter _Nm
        (type_ref std::size_t))
      (template_type_parameter _Yp)
      (type_ref _Up)
      (decl_ref_expr _Nm)
      (type_ref _Yp)
      (cxx_base_specifier __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
        (template_ref __sp_is_constructible_arrN)
        (type_ref _Up)
        (decl_ref_expr _Nm)
        (type_ref _Yp)))
    (class_template_partial_specialization __sp_is_constructible
      (template_type_parameter _Up)
      (template_type_parameter _Yp)
      (type_ref _Up)
      (type_ref _Yp)
      (cxx_base_specifier __sp_is_constructible_arr<_Up, _Yp>::type
        (template_ref __sp_is_constructible_arr)
        (type_ref _Up)
        (type_ref _Yp)))
    (class_template __sp_is_constructible
      (template_type_parameter _Tp)
      (template_type_parameter _Yp)
      (cxx_base_specifier is_convertible<_Yp *, _Tp *>::type
        (template_ref is_convertible)
        (type_ref _Yp)
        (type_ref _Tp)))
    (class_template __shared_ptr_access
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_array)
          (type_ref _Tp)))
      (template_non_type_parameter
        (decl_ref_expr
          (template_ref is_void)
          (type_ref _Tp)))
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (type_ref _Tp))
      (cxx_method operator*
        (type_ref std::__shared_ptr_access::element_type)
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr _M_get
                          (member_ref_expr _M_get))
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (cxx_null_ptr_literal_expr)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (unary_operator
              (call_expr _M_get
                (member_ref_expr _M_get))))))
      (cxx_method operator->
        (type_ref std::__shared_ptr_access::element_type)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr _M_get
              (member_ref_expr _M_get)))))
      (cxx_access_spec_decl)
      (cxx_method _M_get
        (type_ref std::__shared_ptr_access::element_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (cxx_static_cast_expr
                  (template_ref __shared_ptr)
                  (type_ref _Tp)
                  (decl_ref_expr _Lp)
                  (cxx_this_expr))))))))
    (class_template_partial_specialization __shared_ptr_access
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (type_ref _Tp))
      (cxx_method operator->
        (type_ref std::__shared_ptr_access<type-parameter-0-0, _Lp, false, true>::element_type)
        (compound_stmt
          (decl_stmt
            (var_decl __ptr
              (call_expr
                (member_ref_expr
                  (cxx_static_cast_expr
                    (template_ref __shared_ptr)
                    (type_ref _Tp)
                    (decl_ref_expr _Lp)
                    (cxx_this_expr))))))
          (null_stmt)
          (return_stmt
            (decl_ref_expr __ptr)))))
    (class_template_partial_specialization __shared_ptr_access
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (cxx_bool_literal_expr)
      (cxx_bool_literal_expr)
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (template_ref remove_extent)
        (type_ref _Tp))
      (cxx_method operator*
        (type_ref std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type)
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr _M_get
                          (member_ref_expr _M_get))
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (cxx_null_ptr_literal_expr)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (unary_operator
              (call_expr _M_get
                (member_ref_expr _M_get))))))
      (cxx_method operator->
        (type_ref std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type)
        (compound_stmt
          (null_stmt)
          (return_stmt
            (call_expr _M_get
              (member_ref_expr _M_get)))))
      (cxx_method operator[]
        (type_ref std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type)
        (parm_decl __i
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (call_expr _M_get
                          (member_ref_expr _M_get))
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (cxx_null_ptr_literal_expr)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (binary_operator
                        (unary_operator
                          (member_ref_expr
                            (template_ref extent)
                            (type_ref _Tp)))
                        (call_expr
                          (decl_ref_expr __i)
                          (decl_ref_expr
                            (overloaded_decl_ref operator<))
                          (member_ref_expr
                            (template_ref extent)
                            (type_ref _Tp)))))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (array_subscript_expr
              (call_expr _M_get
                (member_ref_expr _M_get))
              (decl_ref_expr __i)))))
      (cxx_access_spec_decl)
      (cxx_method _M_get
        (type_ref std::__shared_ptr_access<type-parameter-0-0, _Lp, true, false>::element_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (cxx_static_cast_expr
                  (template_ref __shared_ptr)
                  (type_ref _Tp)
                  (decl_ref_expr _Lp)
                  (cxx_this_expr))))))))
    (class_template __shared_ptr
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (cxx_base_specifier __shared_ptr_access<_Tp, _Lp>
        (template_ref __shared_ptr_access)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (template_ref remove_extent)
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (type_alias_template_decl _SafeConv
        (template_type_parameter _Yp)
        (type_alias_decl _SafeConv
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __sp_is_constructible)
            (type_ref _Tp)
            (type_ref _Yp))))
      (type_alias_template_decl _Compatible
        (template_type_parameter _Yp)
        (template_type_parameter _Res)
        (type_alias_decl _Compatible
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __sp_compatible_with)
            (type_ref _Yp)
            (type_ref _Tp))
          (type_ref _Res)))
      (type_alias_template_decl _Assignable
        (template_type_parameter _Yp)
        (type_alias_decl _Assignable
          (template_ref _Compatible)
          (type_ref _Yp)
          (type_ref __shared_ptr<_Tp, _Lp>)))
      (type_alias_template_decl _UniqCompatible
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_type_parameter _Res)
        (template_type_parameter _Ptr
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (type_alias_decl _UniqCompatible
          (template_ref __enable_if_t)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref __sp_compatible_with)
            (type_ref _Yp)
            (type_ref _Tp)
            (template_ref is_convertible)
            (type_ref _Ptr)
            (type_ref std::__shared_ptr::element_type)
            (template_ref is_move_constructible)
            (type_ref _Del))
          (type_ref _Res)))
      (type_alias_template_decl _UniqAssignable
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (type_alias_decl _UniqAssignable
          (template_ref _UniqCompatible)
          (type_ref _Yp)
          (type_ref _Del)
          (type_ref __shared_ptr<_Tp, _Lp>)))
      (cxx_access_spec_decl)
      (constructor __shared_ptr<_Tp, _Lp>
        (member_ref _M_ptr)
        (integer_literal 0)
        (member_ref _M_refcount)
        (compound_stmt))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _SafeConv)
          (type_ref _Yp))
        (parm_decl __p
          (type_ref _Yp))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (member_ref _M_refcount)
        (decl_ref_expr __p)
        (call_expr
          (template_ref is_array)
          (type_ref _Tp))
        (compound_stmt
          (decl_stmt
            (static_assert
              (unary_operator
                (member_ref_expr
                  (template_ref is_void)
                  (type_ref _Yp)))
              (string_literal "incomplete type")))
          (decl_stmt
            (static_assert
              (binary_operator
                (cxx_unary_expr
                  (type_ref _Yp))
                (integer_literal 0))
              (string_literal "incomplete type")))
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (decl_ref_expr __p))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_type_parameter
          (template_ref _SafeConv)
          (type_ref _Yp))
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (member_ref _M_refcount)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_invocable)
                (type_ref _Deleter)
                (type_ref _Yp))
              (string_literal "deleter expression d(p) is well-formed")))
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (decl_ref_expr __p))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (template_type_parameter
          (template_ref _SafeConv)
          (type_ref _Yp))
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (member_ref _M_refcount)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __a))
        (compound_stmt
          (decl_stmt
            (static_assert
              (member_ref_expr
                (template_ref __is_invocable)
                (type_ref _Deleter)
                (type_ref _Yp))
              (string_literal "deleter expression d(p) is well-formed")))
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (decl_ref_expr __p))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Deleter)
        (parm_decl __p
          (type_ref std::nullptr_t))
        (parm_decl __d
          (type_ref _Deleter))
        (member_ref _M_ptr)
        (integer_literal 0)
        (member_ref _M_refcount)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (parm_decl __p
          (type_ref std::nullptr_t))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (member_ref _M_ptr)
        (integer_literal 0)
        (member_ref _M_refcount)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __a))
        (compound_stmt))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (parm_decl __p
          (type_ref std::__shared_ptr::element_type))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (parm_decl __p
          (type_ref std::__shared_ptr::element_type))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (member_ref _M_refcount)
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_refcount))
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (constructor __shared_ptr<_Tp, _Lp>
        (parm_decl
          (type_ref __shared_ptr<_Tp, _Lp>)))
      (cxx_method operator=
        (type_ref __shared_ptr<_Tp, _Lp>)
        (parm_decl
          (type_ref __shared_ptr<_Tp, _Lp>)))
      (destructor ~__shared_ptr<_Tp, _Lp>)
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __r))
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt))
      (constructor __shared_ptr<_Tp, _Lp>
        (parm_decl __r
          (type_ref __shared_ptr<_Tp, _Lp>))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __r))
        (member_ref _M_refcount)
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_refcount))
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __r))
        (member_ref _M_refcount)
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_refcount))
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __r)))))
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_type_parameter
          (template_ref _UniqCompatible)
          (type_ref _Yp)
          (type_ref _Del))
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __r)))
        (member_ref _M_refcount)
        (compound_stmt
          (decl_stmt
            (var_decl __raw
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __to_address))
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __r))))))
          (binary_operator
            (member_ref_expr _M_refcount)
            (call_expr
              (template_ref __shared_count)
              (decl_ref_expr _Lp)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __r))))
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (decl_ref_expr __raw))))
      (cxx_access_spec_decl)
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Tp1)
        (template_type_parameter _Del)
        (template_non_type_parameter
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __and_)
            (template_ref __not_)
            (template_ref is_array)
            (type_ref _Tp)
            (template_ref is_array)
            (type_ref _Tp1)
            (template_ref is_convertible)
            (template_ref unique_ptr)
            (type_ref _Tp1)
            (type_ref _Del)
            (type_ref _Tp))
          (cxx_bool_literal_expr))
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Tp1)
          (type_ref _Del))
        (parm_decl
          (type_ref struct std::__sp_array_delete))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __r)))
        (member_ref _M_refcount)
        (compound_stmt
          (decl_stmt
            (var_decl __raw
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __to_address))
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __r))))))
          (binary_operator
            (member_ref_expr _M_refcount)
            (call_expr
              (template_ref __shared_count)
              (decl_ref_expr _Lp)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __r))))
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (decl_ref_expr __raw))))
      (cxx_access_spec_decl)
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref auto_ptr)
          (type_ref _Yp)))
      (constructor __shared_ptr<_Tp, _Lp>
        (parm_decl
          (type_ref std::nullptr_t))
        (type_ref __shared_ptr<_Tp, _Lp>)
        (compound_stmt))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr _M_refcount)
            (member_ref_expr
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref auto_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __r))))
            (unary_operator
              (cxx_this_expr)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref __shared_ptr<_Tp, _Lp>)
        (parm_decl __r
          (type_ref __shared_ptr<_Tp, _Lp>))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __r))))
            (unary_operator
              (cxx_this_expr)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __r))))
            (unary_operator
              (cxx_this_expr)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_ref _UniqAssignable)
        (type_ref _Yp)
        (type_ref _Del)
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __r))))
            (unary_operator
              (cxx_this_expr)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method reset
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)))
            (unary_operator
              (cxx_this_expr)))))
      (function_template reset
        (template_type_parameter _Yp)
        (template_ref _SafeConv)
        (type_ref _Yp)
        (parm_decl __p
          (type_ref _Yp))
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (binary_operator
                        (call_expr
                          (decl_ref_expr __p)
                          (decl_ref_expr
                            (overloaded_decl_ref operator==))
                          (cxx_null_ptr_literal_expr))
                        (call_expr
                          (decl_ref_expr __p)
                          (decl_ref_expr
                            (overloaded_decl_ref operator!=))
                          (member_ref_expr _M_ptr))))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (decl_ref_expr __p)))
            (unary_operator
              (cxx_this_expr)))))
      (function_template reset
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_ref _SafeConv)
        (type_ref _Yp)
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (decl_ref_expr __p)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __d))))
            (unary_operator
              (cxx_this_expr)))))
      (function_template reset
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (template_ref _SafeConv)
        (type_ref _Yp)
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __shared_ptr<_Tp, _Lp>)
                (decl_ref_expr __p)
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __d))
                (call_expr
                  (decl_ref_expr
                    (namespace_ref std)
                    (overloaded_decl_ref move))
                  (decl_ref_expr __a))))
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method get
        (type_ref std::__shared_ptr::element_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_ptr))))
      (conversion_function operator bool
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr _M_ptr)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (cxx_null_ptr_literal_expr)))))
      (cxx_method unique
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))))))
      (cxx_method use_count
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))))))
      (cxx_method swap
        (parm_decl __other
          (template_ref __shared_ptr)
          (type_ref _Tp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref swap))
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __other)))
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_refcount))
            (member_ref_expr
              (decl_ref_expr __other)))))
      (function_template owner_before
        (template_type_parameter _Tp1)
        (parm_decl __rhs
          (template_ref __shared_ptr)
          (type_ref _Tp1)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (function_template owner_before
        (template_type_parameter _Tp1)
        (parm_decl __rhs
          (template_ref __weak_ptr)
          (type_ref _Tp1)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (cxx_access_spec_decl)
      (function_template __shared_ptr<_Tp, _Lp>
        (template_type_parameter _Alloc)
        (template_type_parameter _Args)
        (parm_decl __tag
          (template_ref _Sp_alloc_shared_tag)
          (type_ref _Alloc))
        (parm_decl __args
          (type_ref _Args))
        (member_ref _M_ptr)
        (member_ref _M_refcount)
        (member_ref_expr _M_ptr)
        (decl_ref_expr __tag)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Args))
            (decl_ref_expr __args)))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref _M_enable_shared_from_this_with))
            (member_ref_expr _M_ptr))))
      (friend_decl
        (function_template __allocate_shared
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)
          (template_type_parameter _Alloc)
          (template_type_parameter _Args)
          (template_ref __shared_ptr)
          (type_ref _Tp1)
          (decl_ref_expr _Lp1)
          (parm_decl __a
            (type_ref _Alloc))
          (parm_decl __args
            (type_ref _Args))))
      (constructor __shared_ptr<_Tp, _Lp>
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Tp)
          (decl_ref_expr _Lp))
        (parm_decl
          (namespace_ref std)
          (type_ref struct std::nothrow_t))
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (decl_ref_expr nothrow
          (namespace_ref std))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (conditional_operator
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_refcount)))
              (member_ref_expr
                (decl_ref_expr __r))
              (cxx_null_ptr_literal_expr)))))
      (friend_decl
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (cxx_access_spec_decl)
      (type_alias_template_decl __esft_base_t
        (template_type_parameter _Yp)
        (type_alias_decl __esft_base_t
          (call_expr
            (decl_ref_expr
              (overloaded_decl_ref __enable_shared_from_this_base))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (template_ref __shared_count)
                (decl_ref_expr _Lp)))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref declval)
                (type_ref _Yp))))))
      (class_template __has_esft_base
        (template_type_parameter _Yp)
        (template_type_parameter)
        (cxx_base_specifier std::false_type
          (type_ref std::false_type)))
      (class_template_partial_specialization __has_esft_base
        (template_type_parameter _Yp)
        (type_ref _Yp)
        (template_ref __void_t)
        (template_ref __esft_base_t)
        (type_ref _Yp)
        (cxx_base_specifier __not_<is_array<_Tp> >
          (template_ref __not_)
          (template_ref is_array)
          (type_ref _Tp)))
      (function_template _M_enable_shared_from_this_with
        (template_type_parameter _Yp)
        (template_type_parameter _Yp2
          (template_ref remove_cv)
          (type_ref _Yp))
        (template_ref enable_if)
        (decl_ref_expr
          (template_ref __has_esft_base)
          (type_ref _Yp2))
        (parm_decl __p
          (type_ref _Yp))
        (compound_stmt
          (if_stmt
            (var_decl __base
              (call_expr
                (decl_ref_expr
                  (overloaded_decl_ref __enable_shared_from_this_base))
                (member_ref_expr _M_refcount)
                (decl_ref_expr __p)))
            (decl_ref_expr __base)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __base))
              (cxx_const_cast_expr
                (type_ref _Yp2)
                (decl_ref_expr __p))
              (member_ref_expr _M_refcount)))))
      (function_template _M_enable_shared_from_this_with
        (template_type_parameter _Yp)
        (template_type_parameter _Yp2
          (template_ref remove_cv)
          (type_ref _Yp))
        (template_ref enable_if)
        (unary_operator
          (decl_ref_expr
            (template_ref __has_esft_base)
            (type_ref _Yp2)))
        (parm_decl
          (type_ref _Yp))
        (compound_stmt))
      (cxx_method _M_get_deleter
        (parm_decl __ti
          (namespace_ref std)
          (type_ref class std::type_info))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))
              (decl_ref_expr __ti)))))
      (friend_decl
        (class_template __shared_ptr
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)))
      (friend_decl
        (class_template __weak_ptr
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)))
      (friend_decl
        (function_template get_deleter
          (template_type_parameter _Del)
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)
          (type_ref _Del)
          (parm_decl
            (template_ref __shared_ptr)
            (type_ref _Tp1)
            (decl_ref_expr _Lp1))))
      (friend_decl
        (function_template get_deleter
          (template_type_parameter _Del)
          (template_type_parameter _Tp1)
          (type_ref _Del)
          (parm_decl
            (template_ref shared_ptr)
            (type_ref _Tp1))))
      (field_decl _M_ptr
        (type_ref std::__shared_ptr::element_type))
      (field_decl _M_refcount
        (template_ref __shared_count)
        (decl_ref_expr _Lp)))
    (function_template operator==
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp2)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __a)))))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __a)))))
    (function_template operator!=
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp2)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __a)))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __a)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Up)
        (decl_ref_expr _Lp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (decl_stmt
          (type_alias_decl _Up_elt
            (template_ref __shared_ptr)
            (type_ref _Up)
            (decl_ref_expr _Lp)))
        (decl_stmt
          (type_alias_decl _Vp
            (template_ref common_type)
            (type_ref _Tp_elt)
            (type_ref _Up_elt)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Vp))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Tp_elt))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Tp_elt))
            (cxx_null_ptr_literal_expr)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp2)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __b)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp2)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (paren_expr
            (call_expr
              (decl_ref_expr __b)
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (decl_ref_expr __a))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (call_expr
            (cxx_null_ptr_literal_expr)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __a)))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __a)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator>=
      (template_type_parameter _Tp1)
      (template_type_parameter _Tp2)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp2)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __b)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __b))))
    (function_template static_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Tp1)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (return_stmt
          (call_expr
            (type_ref _Sp)
            (decl_ref_expr __r)
            (cxx_static_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r))))))))
    (function_template const_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Tp1)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (return_stmt
          (call_expr
            (type_ref _Sp)
            (decl_ref_expr __r)
            (cxx_const_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r))))))))
    (function_template dynamic_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Tp1)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp1)
        (decl_ref_expr _Lp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (if_stmt
          (var_decl __p
            (cxx_dynamic_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r)))))
          (decl_ref_expr __p)
          (return_stmt
            (call_expr
              (type_ref _Sp)
              (decl_ref_expr __r)
              (decl_ref_expr __p))))
        (return_stmt
          (call_expr
            (type_ref _Sp)))))
    (class_template __weak_ptr
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (type_alias_template_decl _Compatible
        (template_type_parameter _Yp)
        (template_type_parameter _Res)
        (type_alias_decl _Compatible
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref __sp_compatible_with)
            (type_ref _Yp)
            (type_ref _Tp))
          (type_ref _Res)))
      (type_alias_template_decl _Assignable
        (template_type_parameter _Yp)
        (type_alias_decl _Assignable
          (template_ref _Compatible)
          (type_ref _Yp)
          (type_ref __weak_ptr<_Tp, _Lp>)))
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (template_ref remove_extent)
        (type_ref _Tp))
      (constructor __weak_ptr<_Tp, _Lp>
        (member_ref _M_ptr)
        (cxx_null_ptr_literal_expr)
        (member_ref _M_refcount)
        (compound_stmt))
      (constructor __weak_ptr<_Tp, _Lp>
        (parm_decl
          (type_ref __weak_ptr<_Tp, _Lp>)))
      (destructor ~__weak_ptr<_Tp, _Lp>)
      (function_template __weak_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (call_expr
              (member_ref_expr
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __r))))))))
      (function_template __weak_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __r))
        (member_ref _M_refcount)
        (member_ref_expr
          (decl_ref_expr __r))
        (compound_stmt))
      (constructor __weak_ptr<_Tp, _Lp>
        (parm_decl __r
          (type_ref __weak_ptr<_Tp, _Lp>))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __r))
        (member_ref _M_refcount)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (member_ref_expr
            (decl_ref_expr __r)))
        (compound_stmt
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (function_template __weak_ptr<_Tp, _Lp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Compatible)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __r)))))
        (member_ref _M_refcount)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (member_ref_expr
            (decl_ref_expr __r)))
        (compound_stmt
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))))
      (cxx_method operator=
        (type_ref __weak_ptr<_Tp, _Lp>)
        (parm_decl __r
          (type_ref __weak_ptr<_Tp, _Lp>)))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (call_expr
              (member_ref_expr
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __r))))))
          (binary_operator
            (member_ref_expr _M_refcount)
            (member_ref_expr
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref __shared_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr _M_refcount)
            (member_ref_expr
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref __weak_ptr<_Tp, _Lp>)
        (parm_decl __r
          (type_ref __weak_ptr<_Tp, _Lp>))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __r)))
          (binary_operator
            (member_ref_expr _M_refcount)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (member_ref_expr
                (decl_ref_expr __r))))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref __weak_ptr)
          (type_ref _Yp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (binary_operator
            (member_ref_expr _M_ptr)
            (call_expr
              (member_ref_expr
                (call_expr
                  (member_ref_expr
                    (decl_ref_expr __r))))))
          (binary_operator
            (member_ref_expr _M_refcount)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (member_ref_expr
                (decl_ref_expr __r))))
          (binary_operator
            (member_ref_expr
              (decl_ref_expr __r))
            (cxx_null_ptr_literal_expr))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method lock
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref __shared_ptr)
              (type_ref std::__weak_ptr::element_type)
              (decl_ref_expr _Lp)
              (unary_operator
                (cxx_this_expr))
              (decl_ref_expr nothrow
                (namespace_ref std))))))
      (cxx_method use_count
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))))))
      (cxx_method expired
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (member_ref_expr
                  (member_ref_expr _M_refcount)))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 0)))))
      (function_template owner_before
        (template_type_parameter _Tp1)
        (parm_decl __rhs
          (template_ref __shared_ptr)
          (type_ref _Tp1)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (function_template owner_before
        (template_type_parameter _Tp1)
        (parm_decl __rhs
          (template_ref __weak_ptr)
          (type_ref _Tp1)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (member_ref_expr _M_refcount))
              (member_ref_expr
                (decl_ref_expr __rhs))))))
      (cxx_method reset
        (compound_stmt
          (call_expr
            (member_ref_expr
              (call_expr
                (type_ref __weak_ptr<_Tp, _Lp>)))
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method swap
        (parm_decl __s
          (type_ref __weak_ptr<_Tp, _Lp>))
        (compound_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref swap))
            (member_ref_expr _M_ptr)
            (member_ref_expr
              (decl_ref_expr __s)))
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_refcount))
            (member_ref_expr
              (decl_ref_expr __s)))))
      (cxx_access_spec_decl)
      (cxx_method _M_assign
        (parm_decl __ptr
          (type_ref _Tp))
        (parm_decl __refcount
          (template_ref __shared_count)
          (decl_ref_expr _Lp))
        (compound_stmt
          (if_stmt
            (call_expr
              (call_expr use_count
                (member_ref_expr use_count))
              (decl_ref_expr
                (overloaded_decl_ref operator==))
              (integer_literal 0))
            (compound_stmt
              (binary_operator
                (member_ref_expr _M_ptr)
                (decl_ref_expr __ptr))
              (binary_operator
                (member_ref_expr _M_refcount)
                (decl_ref_expr __refcount))))))
      (friend_decl
        (class_template __shared_ptr
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)))
      (friend_decl
        (class_template __weak_ptr
          (template_type_parameter _Tp1)
          (template_non_type_parameter _Lp1)))
      (friend_decl
        (template_ref __enable_shared_from_this)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (friend_decl
        (template_ref enable_shared_from_this)
        (type_ref _Tp))
      (field_decl _M_ptr
        (type_ref std::__weak_ptr::element_type))
      (field_decl _M_refcount
        (template_ref __weak_count)
        (decl_ref_expr _Lp)))
    (function_template swap
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __a
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __b
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __b))))
    (class_template _Sp_owner_less
      (template_type_parameter _Tp)
      (template_type_parameter _Tp1)
      (cxx_base_specifier binary_function<_Tp, _Tp, _Bool>
        (template_ref binary_function)
        (type_ref _Tp)
        (type_ref _Tp))
      (cxx_method operator()
        (parm_decl __lhs
          (type_ref _Tp))
        (parm_decl __rhs
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs))
              (decl_ref_expr __rhs)))))
      (cxx_method operator()
        (parm_decl __lhs
          (type_ref _Tp))
        (parm_decl __rhs
          (type_ref _Tp1))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs))
              (decl_ref_expr __rhs)))))
      (cxx_method operator()
        (parm_decl __lhs
          (type_ref _Tp1))
        (parm_decl __rhs
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs))
              (decl_ref_expr __rhs))))))
    (struct_decl _Sp_owner_less
      (function_template operator()
        (template_type_parameter _Tp)
        (template_type_parameter _Up)
        (parm_decl __lhs
          (type_ref _Tp))
        (parm_decl __rhs
          (type_ref _Up))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __lhs))
          (decl_ref_expr __rhs))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __lhs))
              (decl_ref_expr __rhs)))))
      (type_alias_decl is_transparent))
    (class_template_partial_specialization owner_less
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (cxx_base_specifier _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp> >
        (template_ref _Sp_owner_less)
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)))
    (class_template_partial_specialization owner_less
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __weak_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (cxx_base_specifier _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp> >
        (template_ref _Sp_owner_less)
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)))
    (class_template __enable_shared_from_this
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (cxx_access_spec_decl)
      (constructor __enable_shared_from_this<_Tp, _Lp>
        (compound_stmt))
      (constructor __enable_shared_from_this<_Tp, _Lp>
        (parm_decl
          (type_ref __enable_shared_from_this<_Tp, _Lp>))
        (compound_stmt))
      (cxx_method operator=
        (type_ref __enable_shared_from_this<_Tp, _Lp>)
        (parm_decl
          (type_ref __enable_shared_from_this<_Tp, _Lp>))
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (destructor ~__enable_shared_from_this<_Tp, _Lp>
        (compound_stmt))
      (cxx_access_spec_decl)
      (cxx_method shared_from_this
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref __shared_ptr)
              (type_ref _Tp)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (cxx_this_expr))))))
      (cxx_method shared_from_this
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref __shared_ptr)
              (type_ref _Tp)
              (decl_ref_expr _Lp)
              (member_ref_expr
                (cxx_this_expr))))))
      (cxx_method weak_from_this
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (cxx_this_expr)))))
      (cxx_method weak_from_this
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (cxx_this_expr)))))
      (cxx_access_spec_decl)
      (function_template _M_weak_assign
        (template_type_parameter _Tp1)
        (parm_decl __p
          (type_ref _Tp1))
        (parm_decl __n
          (template_ref __shared_count)
          (decl_ref_expr _Lp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_weak_this))
            (decl_ref_expr __p)
            (decl_ref_expr __n))))
      (friend_decl
        (function_decl __enable_shared_from_this_base
          (type_ref __enable_shared_from_this<_Tp, _Lp>)
          (parm_decl
            (template_ref __shared_count)
            (decl_ref_expr _Lp))
          (parm_decl __p
            (type_ref __enable_shared_from_this<_Tp, _Lp>))
          (compound_stmt
            (return_stmt
              (decl_ref_expr __p)))))
      (friend_decl
        (class_template __shared_ptr
          (template_type_parameter)
          (template_non_type_parameter)))
      (field_decl _M_weak_this
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)))
    (function_template __allocate_shared
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy))
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __a
        (type_ref _Alloc))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (static_assert
            (unary_operator
              (decl_ref_expr
                (template_ref is_array)
                (type_ref _Tp)))
            (string_literal "make_shared<T[]> not supported")))
        (return_stmt
          (call_expr
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)
            (call_expr
              (template_ref _Sp_alloc_shared_tag)
              (type_ref _Alloc)
              (init_list_expr
                (decl_ref_expr __a)))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template __make_shared
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp
        (decl_ref_expr __default_lock_policy))
      (template_type_parameter _Args)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Tp_nc
            (namespace_ref std)
            (template_ref remove_const)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref __allocate_shared)
              (type_ref _Tp)
              (decl_ref_expr _Lp))
            (call_expr
              (namespace_ref std)
              (template_ref allocator)
              (type_ref _Tp_nc))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (class_template_partial_specialization hash
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (cxx_base_specifier __hash_base<std::size_t, __shared_ptr<_Tp, _Lp> >
        (template_ref __hash_base)
        (type_ref std::size_t)
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __s
          (template_ref __shared_ptr)
          (type_ref _Tp)
          (decl_ref_expr _Lp))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (template_ref hash)
                (template_ref __shared_ptr)
                (type_ref _Tp)
                (decl_ref_expr _Lp))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __s)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/shared_ptr.h
  (namespace std
    (visibility_attr default)
    (function_template operator<<
      (template_type_parameter _Ch)
      (template_type_parameter _Tr)
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (namespace_ref std)
      (template_ref basic_ostream)
      (type_ref _Ch)
      (type_ref _Tr)
      (parm_decl __os
        (namespace_ref std)
        (template_ref basic_ostream)
        (type_ref _Ch)
        (type_ref _Tr))
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (call_expr
          (decl_ref_expr __os)
          (decl_ref_expr
            (overloaded_decl_ref operator<<))
          (call_expr
            (member_ref_expr
              (decl_ref_expr __p))))
        (return_stmt
          (decl_ref_expr __os))))
    (function_template get_deleter
      (template_type_parameter _Del)
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (type_ref _Del)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (cxx_static_cast_expr
            (type_ref _Del)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __p))
              (cxx_typeid_expr
                (type_ref _Del)))))))
    (function_template get_deleter
      (template_type_parameter _Del)
      (template_type_parameter _Tp)
      (type_ref _Del)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (cxx_static_cast_expr
            (type_ref _Del)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __p))
              (cxx_typeid_expr
                (type_ref _Del)))))))
    (class_template shared_ptr
      (template_type_parameter _Tp)
      (cxx_base_specifier __shared_ptr<_Tp>
        (template_ref __shared_ptr)
        (type_ref _Tp))
      (type_alias_template_decl _Constructible
        (template_type_parameter _Args)
        (type_alias_decl _Constructible
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref is_constructible)
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (type_ref _Args))))
      (type_alias_template_decl _Assignable
        (template_type_parameter _Arg)
        (type_alias_decl _Assignable
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref is_assignable)
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (type_ref _Arg))
          (type_ref shared_ptr<_Tp>)))
      (cxx_access_spec_decl)
      (type_alias_decl element_type
        (template_ref __shared_ptr)
        (type_ref _Tp))
      (constructor shared_ptr<_Tp>
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (compound_stmt))
      (constructor shared_ptr<_Tp>
        (parm_decl
          (type_ref shared_ptr<_Tp>)))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (type_ref _Yp))
        (parm_decl __p
          (type_ref _Yp))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __p)
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_type_parameter
          (template_ref _Constructible)
          (type_ref _Yp)
          (type_ref _Deleter))
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Deleter)
        (parm_decl __p
          (type_ref std::nullptr_t))
        (parm_decl __d
          (type_ref _Deleter))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (template_type_parameter
          (template_ref _Constructible)
          (type_ref _Yp)
          (type_ref _Deleter)
          (type_ref _Alloc))
        (parm_decl __p
          (type_ref _Yp))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __a))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Deleter)
        (template_type_parameter _Alloc)
        (parm_decl __p
          (type_ref std::nullptr_t))
        (parm_decl __d
          (type_ref _Deleter))
        (parm_decl __a
          (type_ref _Alloc))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __p)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __d))
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __a))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (parm_decl __p
          (type_ref std::shared_ptr::element_type))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (decl_ref_expr __p)
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref shared_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (compound_stmt))
      (constructor shared_ptr<_Tp>
        (parm_decl __r
          (type_ref shared_ptr<_Tp>))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __r))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref shared_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __r))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref weak_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Yp))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref auto_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref auto_ptr)
          (type_ref _Yp)))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __r))
        (compound_stmt))
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_non_type_parameter
          (template_ref _Constructible)
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del)
          (type_ref struct std::__sp_array_delete)
          (integer_literal 0))
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __r))
        (call_expr __sp_array_delete
          (type_ref struct std::__sp_array_delete))
        (compound_stmt))
      (constructor shared_ptr<_Tp>
        (parm_decl
          (type_ref std::nullptr_t))
        (type_ref shared_ptr<_Tp>)
        (compound_stmt))
      (cxx_method operator=
        (type_ref shared_ptr<_Tp>)
        (parm_decl
          (type_ref shared_ptr<_Tp>)))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref shared_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __shared_ptr)
              (type_ref _Tp))
            (decl_ref_expr __r))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref auto_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref auto_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __shared_ptr)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref shared_ptr<_Tp>)
        (parm_decl __r
          (type_ref shared_ptr<_Tp>))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __shared_ptr)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref shared_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __shared_ptr)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_type_parameter _Del)
        (template_ref _Assignable)
        (template_ref unique_ptr)
        (type_ref _Yp)
        (type_ref _Del)
        (parm_decl __r
          (template_ref unique_ptr)
          (type_ref _Yp)
          (type_ref _Del))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __shared_ptr)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_access_spec_decl)
      (function_template shared_ptr<_Tp>
        (template_type_parameter _Alloc)
        (template_type_parameter _Args)
        (parm_decl __tag
          (template_ref _Sp_alloc_shared_tag)
          (type_ref _Alloc))
        (parm_decl __args
          (type_ref _Args))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __tag)
        (pack_expansion_expr
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref forward)
              (type_ref _Args))
            (decl_ref_expr __args)))
        (compound_stmt))
      (friend_decl
        (function_template allocate_shared
          (template_type_parameter _Yp)
          (template_type_parameter _Alloc)
          (template_type_parameter _Args)
          (template_ref shared_ptr)
          (type_ref _Yp)
          (parm_decl __a
            (type_ref _Alloc))
          (parm_decl __args
            (type_ref _Args))))
      (constructor shared_ptr<_Tp>
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Tp))
        (parm_decl
          (namespace_ref std)
          (type_ref struct std::nothrow_t))
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (decl_ref_expr nothrow
          (namespace_ref std))
        (compound_stmt))
      (friend_decl
        (template_ref weak_ptr)
        (type_ref _Tp)))
    (function_template operator==
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (decl_ref_expr
              (overloaded_decl_ref operator==))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator==
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __a)))))
    (function_template operator==
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (decl_ref_expr __a)))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (call_expr
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (decl_ref_expr
              (overloaded_decl_ref operator!=))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __a)))))
    (function_template operator!=
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (cstyle_cast_expr
            (decl_ref_expr __a)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (decl_stmt
          (type_alias_decl _Up_elt
            (template_ref shared_ptr)
            (type_ref _Up)))
        (decl_stmt
          (type_alias_decl _Vp
            (template_ref common_type)
            (type_ref _Tp_elt)
            (type_ref _Up_elt)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Vp))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __b)))))))
    (function_template operator<
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Tp_elt))
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator<
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Tp_elt
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (call_expr
              (template_ref less)
              (type_ref _Tp_elt))
            (cxx_null_ptr_literal_expr)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __b)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template operator<=
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (paren_expr
            (call_expr
              (decl_ref_expr __b)
              (decl_ref_expr
                (overloaded_decl_ref operator<))
              (decl_ref_expr __a))))))
    (function_template operator>
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (call_expr
            (cxx_null_ptr_literal_expr)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (decl_ref_expr __a)))))
    (function_template operator>
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr __a)
            (decl_ref_expr
              (overloaded_decl_ref operator<))
            (cxx_null_ptr_literal_expr)))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __b)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::nullptr_t))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (decl_ref_expr __a)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (cxx_null_ptr_literal_expr)))))))
    (function_template operator>=
      (template_type_parameter _Tp)
      (parm_decl
        (type_ref std::nullptr_t))
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (unary_operator
            (paren_expr
              (call_expr
                (cxx_null_ptr_literal_expr)
                (decl_ref_expr
                  (overloaded_decl_ref operator<))
                (decl_ref_expr __a)))))))
    (function_template swap
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __b))))
    (function_template static_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (type_ref _Sp)
            (decl_ref_expr __r)
            (cxx_static_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r))))))))
    (function_template const_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (type_ref _Sp)
            (decl_ref_expr __r)
            (cxx_const_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r))))))))
    (function_template dynamic_pointer_cast
      (template_type_parameter _Tp)
      (template_type_parameter _Up)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Up))
      (compound_stmt
        (decl_stmt
          (type_alias_decl _Sp
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (if_stmt
          (var_decl __p
            (cxx_dynamic_cast_expr
              (type_ref _Sp)
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __r)))))
          (decl_ref_expr __p)
          (return_stmt
            (call_expr
              (type_ref _Sp)
              (decl_ref_expr __r)
              (decl_ref_expr __p))))
        (return_stmt
          (call_expr
            (type_ref _Sp)))))
    (class_template weak_ptr
      (template_type_parameter _Tp)
      (cxx_base_specifier __weak_ptr<_Tp>
        (template_ref __weak_ptr)
        (type_ref _Tp))
      (type_alias_template_decl _Constructible
        (template_type_parameter _Arg)
        (type_alias_decl _Constructible
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref is_constructible)
            (template_ref __weak_ptr)
            (type_ref _Tp)
            (type_ref _Arg))))
      (type_alias_template_decl _Assignable
        (template_type_parameter _Arg)
        (type_alias_decl _Assignable
          (template_ref enable_if)
          (decl_ref_expr
            (template_ref is_assignable)
            (template_ref __weak_ptr)
            (type_ref _Tp)
            (type_ref _Arg))
          (type_ref weak_ptr<_Tp>)))
      (cxx_access_spec_decl)
      (constructor weak_ptr<_Tp>)
      (function_template weak_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref shared_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (compound_stmt))
      (constructor weak_ptr<_Tp>
        (parm_decl
          (type_ref weak_ptr<_Tp>)))
      (function_template weak_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref weak_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Yp))
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (decl_ref_expr __r)
        (compound_stmt))
      (constructor weak_ptr<_Tp>
        (parm_decl
          (type_ref weak_ptr<_Tp>)))
      (function_template weak_ptr<_Tp>
        (template_type_parameter _Yp)
        (template_type_parameter
          (template_ref _Constructible)
          (template_ref weak_ptr)
          (type_ref _Yp))
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Yp))
        (template_ref __weak_ptr)
        (type_ref _Tp)
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref move))
          (decl_ref_expr __r))
        (compound_stmt))
      (cxx_method operator=
        (type_ref weak_ptr<_Tp>)
        (parm_decl __r
          (type_ref weak_ptr<_Tp>)))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref weak_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __weak_ptr)
              (type_ref _Tp))
            (decl_ref_expr __r))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref shared_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref shared_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __weak_ptr)
              (type_ref _Tp))
            (decl_ref_expr __r))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method operator=
        (type_ref weak_ptr<_Tp>)
        (parm_decl __r
          (type_ref weak_ptr<_Tp>)))
      (function_template operator=
        (template_type_parameter _Yp)
        (template_ref _Assignable)
        (template_ref weak_ptr)
        (type_ref _Yp)
        (parm_decl __r
          (template_ref weak_ptr)
          (type_ref _Yp))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (cxx_this_expr)
              (template_ref __weak_ptr)
              (type_ref _Tp))
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r)))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (cxx_method lock
        (template_ref shared_ptr)
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref shared_ptr)
              (type_ref _Tp)
              (unary_operator
                (cxx_this_expr))
              (decl_ref_expr nothrow
                (namespace_ref std)))))))
    (function_template swap
      (template_type_parameter _Tp)
      (parm_decl __a
        (template_ref weak_ptr)
        (type_ref _Tp))
      (parm_decl __b
        (template_ref weak_ptr)
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a))
          (decl_ref_expr __b))))
    (class_template owner_less
      (template_type_parameter _Tp))
    (struct_decl owner_less
      (cxx_base_specifier _Sp_owner_less<void, void>
        (template_ref _Sp_owner_less)))
    (class_template_partial_specialization owner_less
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (cxx_base_specifier _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp> >
        (template_ref _Sp_owner_less)
        (template_ref shared_ptr)
        (type_ref _Tp)
        (template_ref weak_ptr)
        (type_ref _Tp)))
    (class_template_partial_specialization owner_less
      (template_type_parameter _Tp)
      (template_ref weak_ptr)
      (type_ref _Tp)
      (cxx_base_specifier _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp> >
        (template_ref _Sp_owner_less)
        (template_ref weak_ptr)
        (type_ref _Tp)
        (template_ref shared_ptr)
        (type_ref _Tp)))
    (class_template enable_shared_from_this
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (constructor enable_shared_from_this<_Tp>
        (compound_stmt))
      (constructor enable_shared_from_this<_Tp>
        (parm_decl
          (type_ref enable_shared_from_this<_Tp>))
        (compound_stmt))
      (cxx_method operator=
        (type_ref enable_shared_from_this<_Tp>)
        (parm_decl
          (type_ref enable_shared_from_this<_Tp>))
        (compound_stmt
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (destructor ~enable_shared_from_this<_Tp>
        (compound_stmt))
      (cxx_access_spec_decl)
      (cxx_method shared_from_this
        (template_ref shared_ptr)
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref shared_ptr)
              (type_ref _Tp)
              (member_ref_expr
                (cxx_this_expr))))))
      (cxx_method shared_from_this
        (template_ref shared_ptr)
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref shared_ptr)
              (type_ref _Tp)
              (member_ref_expr
                (cxx_this_expr))))))
      (cxx_method weak_from_this
        (template_ref weak_ptr)
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (cxx_this_expr)))))
      (cxx_method weak_from_this
        (template_ref weak_ptr)
        (type_ref _Tp)
        (compound_stmt
          (return_stmt
            (member_ref_expr
              (cxx_this_expr)))))
      (cxx_access_spec_decl)
      (function_template _M_weak_assign
        (template_type_parameter _Tp1)
        (parm_decl __p
          (type_ref _Tp1))
        (parm_decl __n
          (template_ref __shared_count))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (member_ref_expr _M_weak_this))
            (decl_ref_expr __p)
            (decl_ref_expr __n))))
      (friend_decl
        (function_decl __enable_shared_from_this_base
          (type_ref enable_shared_from_this<_Tp>)
          (parm_decl
            (template_ref __shared_count))
          (parm_decl __p
            (type_ref enable_shared_from_this<_Tp>))
          (compound_stmt
            (return_stmt
              (decl_ref_expr __p)))))
      (friend_decl
        (class_template __shared_ptr
          (template_type_parameter)
          (template_non_type_parameter)))
      (field_decl _M_weak_this
        (template_ref weak_ptr)
        (type_ref _Tp)))
    (function_template allocate_shared
      (template_type_parameter _Tp)
      (template_type_parameter _Alloc)
      (template_type_parameter _Args)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __a
        (type_ref _Alloc))
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (static_assert
            (unary_operator
              (decl_ref_expr
                (template_ref is_array)
                (type_ref _Tp)))
            (string_literal "make_shared<T[]> not supported")))
        (return_stmt
          (call_expr
            (template_ref shared_ptr)
            (type_ref _Tp)
            (call_expr
              (template_ref _Sp_alloc_shared_tag)
              (type_ref _Alloc)
              (init_list_expr
                (decl_ref_expr __a)))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (function_template make_shared
      (template_type_parameter _Tp)
      (template_type_parameter _Args)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __args
        (type_ref _Args))
      (compound_stmt
        (decl_stmt
          (typedef_decl _Tp_nc
            (namespace_ref std)
            (template_ref remove_cv)
            (type_ref _Tp)))
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref allocate_shared)
              (type_ref _Tp))
            (call_expr
              (namespace_ref std)
              (template_ref allocator)
              (type_ref _Tp_nc))
            (pack_expansion_expr
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref forward)
                  (type_ref _Args))
                (decl_ref_expr __args)))))))
    (class_template_partial_specialization hash
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (cxx_base_specifier __hash_base<std::size_t, shared_ptr<_Tp> >
        (template_ref __hash_base)
        (type_ref std::size_t)
        (template_ref shared_ptr)
        (type_ref _Tp))
      (cxx_method operator()
        (type_ref std::size_t)
        (parm_decl __s
          (template_ref shared_ptr)
          (type_ref _Tp))
        (compound_stmt
          (return_stmt
            (call_expr
              (call_expr
                (namespace_ref std)
                (template_ref hash)
                (template_ref shared_ptr)
                (type_ref _Tp))
              (call_expr
                (member_ref_expr
                  (decl_ref_expr __s)))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/atomic_base.h
  (namespace std
    (visibility_attr default)
    (enum_decl memory_order
      (enum_constant_decl memory_order_relaxed)
      (enum_constant_decl memory_order_consume)
      (enum_constant_decl memory_order_acquire)
      (enum_constant_decl memory_order_release)
      (enum_constant_decl memory_order_acq_rel)
      (enum_constant_decl memory_order_seq_cst))
    (typedef_decl memory_order
      (enum_decl memory_order
        (enum_constant_decl memory_order_relaxed)
        (enum_constant_decl memory_order_consume)
        (enum_constant_decl memory_order_acquire)
        (enum_constant_decl memory_order_release)
        (enum_constant_decl memory_order_acq_rel)
        (enum_constant_decl memory_order_seq_cst)))
    (enum_decl __memory_order_modifier
      (enum_constant_decl __memory_order_mask
        (integer_literal 0x0ffff))
      (enum_constant_decl __memory_order_modifier_mask
        (integer_literal 0xffff0000))
      (enum_constant_decl __memory_order_hle_acquire
        (integer_literal 0x10000))
      (enum_constant_decl __memory_order_hle_release
        (integer_literal 0x20000)))
    (function_decl operator|
      (type_ref std::memory_order)
      (parm_decl __m
        (type_ref std::memory_order))
      (parm_decl __mod
        (type_ref enum std::__memory_order_modifier))
      (compound_stmt
        (return_stmt
          (cxx_functional_cast_expr
            (type_ref std::memory_order)
            (binary_operator
              (cxx_functional_cast_expr
                (decl_ref_expr __m))
              (cxx_functional_cast_expr
                (decl_ref_expr __mod)))))))
    (function_decl operator&
      (type_ref std::memory_order)
      (parm_decl __m
        (type_ref std::memory_order))
      (parm_decl __mod
        (type_ref enum std::__memory_order_modifier))
      (compound_stmt
        (return_stmt
          (cxx_functional_cast_expr
            (type_ref std::memory_order)
            (binary_operator
              (cxx_functional_cast_expr
                (decl_ref_expr __m))
              (cxx_functional_cast_expr
                (decl_ref_expr __mod)))))))
    (function_decl __cmpexch_failure_order2
      (type_ref std::memory_order)
      (parm_decl __m
        (type_ref std::memory_order))
      (compound_stmt
        (return_stmt
          (conditional_operator
            (binary_operator
              (decl_ref_expr __m)
              (decl_ref_expr memory_order_acq_rel))
            (decl_ref_expr memory_order_acquire)
            (conditional_operator
              (binary_operator
                (decl_ref_expr __m)
                (decl_ref_expr memory_order_release))
              (decl_ref_expr memory_order_relaxed)
              (decl_ref_expr __m))))))
    (function_decl __cmpexch_failure_order
      (type_ref std::memory_order)
      (parm_decl __m
        (type_ref std::memory_order))
      (compound_stmt
        (return_stmt
          (cxx_functional_cast_expr
            (type_ref std::memory_order)
            (call_expr operator|
              (call_expr __cmpexch_failure_order2
                (decl_ref_expr __cmpexch_failure_order2)
                (call_expr operator&
                  (decl_ref_expr __m)
                  (decl_ref_expr operator&)
                  (decl_ref_expr __memory_order_mask)))
              (decl_ref_expr operator|)
              (cxx_functional_cast_expr
                (type_ref enum std::__memory_order_modifier)
                (call_expr operator&
                  (decl_ref_expr __m)
                  (decl_ref_expr operator&)
                  (decl_ref_expr __memory_order_modifier_mask))))))))
    (function_decl atomic_thread_fence
      (parm_decl __m
        (type_ref std::memory_order))
      (compound_stmt
        (call_expr __atomic_thread_fence
          (decl_ref_expr __atomic_thread_fence)
          (cxx_functional_cast_expr
            (decl_ref_expr __m)))))
    (function_decl atomic_signal_fence
      (parm_decl __m
        (type_ref std::memory_order))
      (compound_stmt
        (call_expr __atomic_signal_fence
          (decl_ref_expr __atomic_signal_fence)
          (cxx_functional_cast_expr
            (decl_ref_expr __m)))))
    (function_template kill_dependency
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __y
        (type_ref _Tp))
      (compound_stmt
        (decl_stmt
          (var_decl __ret
            (type_ref _Tp)
            (decl_ref_expr __y)))
        (return_stmt
          (decl_ref_expr __ret))))
    (class_template __atomic_base
      (template_type_parameter _IntTp))
    (class_template atomic
      (template_type_parameter _Tp))
    (class_template_partial_specialization atomic
      (template_type_parameter _Tp)
      (type_ref _Tp))
    (typedef_decl __atomic_flag_data_type)
    (struct_decl __atomic_flag_base
      (field_decl _M_i
        (type_ref std::__atomic_flag_data_type)))
    (struct_decl atomic_flag
      (cxx_base_specifier struct std::__atomic_flag_base
        (type_ref struct std::__atomic_flag_base))
      (constructor atomic_flag)
      (destructor ~atomic_flag)
      (constructor atomic_flag
        (parm_decl
          (type_ref struct std::atomic_flag)))
      (cxx_method operator=
        (type_ref struct std::atomic_flag)
        (parm_decl
          (type_ref struct std::atomic_flag)))
      (cxx_method operator=
        (type_ref struct std::atomic_flag)
        (parm_decl
          (type_ref struct std::atomic_flag)))
      (constructor atomic_flag
        (parm_decl __i)
        (type_ref struct std::__atomic_flag_base)
        (init_list_expr
          (call_expr _S_init
            (decl_ref_expr _S_init)
            (decl_ref_expr __i)))
        (compound_stmt))
      (cxx_method test_and_set
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_test_and_set
              (decl_ref_expr __atomic_test_and_set)
              (unary_operator
                (member_ref_expr _M_i))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method test_and_set
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_test_and_set
              (decl_ref_expr __atomic_test_and_set)
              (unary_operator
                (member_ref_expr _M_i))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method clear
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_clear
            (decl_ref_expr __atomic_clear)
            (unary_operator
              (member_ref_expr _M_i))
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_method clear
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_clear
            (decl_ref_expr __atomic_clear)
            (unary_operator
              (member_ref_expr _M_i))
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_access_spec_decl)
      (cxx_method _S_init
        (type_ref std::__atomic_flag_data_type)
        (parm_decl __i)
        (compound_stmt
          (return_stmt
            (conditional_operator
              (decl_ref_expr __i)
              (integer_literal)
              (integer_literal 0))))))
    (class_template __atomic_base
      (template_type_parameter _ITp)
      (type_alias_decl value_type
        (type_ref _ITp))
      (type_alias_decl difference_type
        (type_ref std::__atomic_base::value_type))
      (cxx_access_spec_decl)
      (typedef_decl __int_type
        (type_ref _ITp))
      (var_decl _S_alignment
        (conditional_operator
          (binary_operator
            (cxx_unary_expr
              (type_ref _ITp))
            (cxx_unary_expr
              (type_ref _ITp)))
          (cxx_unary_expr
            (type_ref _ITp))
          (cxx_unary_expr
            (type_ref _ITp))))
      (field_decl _M_i
        (aligned_attr)
        (type_ref std::__atomic_base::__int_type))
      (cxx_access_spec_decl)
      (constructor __atomic_base<_IntTp>)
      (destructor ~__atomic_base<_IntTp>)
      (constructor __atomic_base<_IntTp>
        (parm_decl
          (type_ref __atomic_base<_IntTp>)))
      (cxx_method operator=
        (type_ref __atomic_base<_IntTp>)
        (parm_decl
          (type_ref __atomic_base<_IntTp>)))
      (cxx_method operator=
        (type_ref __atomic_base<_IntTp>)
        (parm_decl
          (type_ref __atomic_base<_IntTp>)))
      (constructor __atomic_base<_IntTp>
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (member_ref _M_i)
        (decl_ref_expr __i)
        (compound_stmt))
      (conversion_function operator type-parameter-0-0
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref load))))))
      (conversion_function operator type-parameter-0-0
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref load))))))
      (cxx_method operator=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref store))
            (decl_ref_expr __i))
          (return_stmt
            (decl_ref_expr __i))))
      (cxx_method operator=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref store))
            (decl_ref_expr __i))
          (return_stmt
            (decl_ref_expr __i))))
      (cxx_method operator++
        (type_ref std::__atomic_base::__int_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_add))
              (integer_literal 1)))))
      (cxx_method operator++
        (type_ref std::__atomic_base::__int_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_add))
              (integer_literal 1)))))
      (cxx_method operator--
        (type_ref std::__atomic_base::__int_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_sub))
              (integer_literal 1)))))
      (cxx_method operator--
        (type_ref std::__atomic_base::__int_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_sub))
              (integer_literal 1)))))
      (cxx_method operator++
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator++
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator--
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator--
        (type_ref std::__atomic_base::__int_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator+=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator+=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator-=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator-=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator&=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_and_fetch
              (decl_ref_expr __atomic_and_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator&=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_and_fetch
              (decl_ref_expr __atomic_and_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator|=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_or_fetch
              (decl_ref_expr __atomic_or_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator|=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_or_fetch
              (decl_ref_expr __atomic_or_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator^=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_xor_fetch
              (decl_ref_expr __atomic_xor_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator^=
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_xor_fetch
              (decl_ref_expr __atomic_xor_fetch)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method is_lock_free
        (compound_stmt
          (return_stmt
            (call_expr __atomic_is_lock_free
              (decl_ref_expr __atomic_is_lock_free)
              (cxx_unary_expr
                (paren_expr
                  (member_ref_expr _M_i)))
              (cxx_reinterpret_cast_expr
                (unary_operator
                  (decl_ref_expr _S_alignment)))))))
      (cxx_method is_lock_free
        (compound_stmt
          (return_stmt
            (call_expr __atomic_is_lock_free
              (decl_ref_expr __atomic_is_lock_free)
              (cxx_unary_expr
                (paren_expr
                  (member_ref_expr _M_i)))
              (cxx_reinterpret_cast_expr
                (unary_operator
                  (decl_ref_expr _S_alignment)))))))
      (cxx_method store
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_store_n
            (decl_ref_expr __atomic_store_n)
            (call_expr
              (member_ref_expr _M_i)
              (decl_ref_expr
                (overloaded_decl_ref operator&)))
            (decl_ref_expr __i)
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_method store
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_store_n
            (decl_ref_expr __atomic_store_n)
            (call_expr
              (member_ref_expr _M_i)
              (decl_ref_expr
                (overloaded_decl_ref operator&)))
            (decl_ref_expr __i)
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_method load
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_load_n
              (decl_ref_expr __atomic_load_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method load
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_load_n
              (decl_ref_expr __atomic_load_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method exchange
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_exchange_n
              (decl_ref_expr __atomic_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method exchange
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_exchange_n
              (decl_ref_expr __atomic_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method compare_exchange_weak
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __i1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i2)
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method compare_exchange_weak
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __i1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i2)
              (integer_literal 1)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method compare_exchange_weak
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref compare_exchange_weak))
              (decl_ref_expr __i1)
              (decl_ref_expr __i2)
              (decl_ref_expr __m)
              (call_expr __cmpexch_failure_order
                (decl_ref_expr __cmpexch_failure_order)
                (decl_ref_expr __m))))))
      (cxx_method compare_exchange_weak
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref compare_exchange_weak))
              (decl_ref_expr __i1)
              (decl_ref_expr __i2)
              (decl_ref_expr __m)
              (call_expr __cmpexch_failure_order
                (decl_ref_expr __cmpexch_failure_order)
                (decl_ref_expr __m))))))
      (cxx_method compare_exchange_strong
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __i1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i2)
              (integer_literal 0)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method compare_exchange_strong
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __i1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i2)
              (integer_literal 0)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method compare_exchange_strong
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref compare_exchange_strong))
              (decl_ref_expr __i1)
              (decl_ref_expr __i2)
              (decl_ref_expr __m)
              (call_expr __cmpexch_failure_order
                (decl_ref_expr __cmpexch_failure_order)
                (decl_ref_expr __m))))))
      (cxx_method compare_exchange_strong
        (parm_decl __i1
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __i2
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref compare_exchange_strong))
              (decl_ref_expr __i1)
              (decl_ref_expr __i2)
              (decl_ref_expr __m)
              (call_expr __cmpexch_failure_order
                (decl_ref_expr __cmpexch_failure_order)
                (decl_ref_expr __m))))))
      (cxx_method fetch_add
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_add
              (decl_ref_expr __atomic_fetch_add)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_add
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_add
              (decl_ref_expr __atomic_fetch_add)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_sub
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_sub
              (decl_ref_expr __atomic_fetch_sub)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_sub
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_sub
              (decl_ref_expr __atomic_fetch_sub)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_and
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_and
              (decl_ref_expr __atomic_fetch_and)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_and
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_and
              (decl_ref_expr __atomic_fetch_and)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_or
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_or
              (decl_ref_expr __atomic_fetch_or)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_or
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_or
              (decl_ref_expr __atomic_fetch_or)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_xor
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_xor
              (decl_ref_expr __atomic_fetch_xor)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_xor
        (type_ref std::__atomic_base::__int_type)
        (parm_decl __i
          (type_ref std::__atomic_base::__int_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_xor
              (decl_ref_expr __atomic_fetch_xor)
              (call_expr
                (member_ref_expr _M_i)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __i)
              (cxx_functional_cast_expr
                (decl_ref_expr __m)))))))
    (class_template_partial_specialization __atomic_base
      (template_type_parameter _PTp)
      (type_ref _PTp)
      (cxx_access_spec_decl)
      (typedef_decl __pointer_type
        (type_ref _PTp))
      (field_decl _M_p
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
      (cxx_method _M_type_size
        (type_ref std::ptrdiff_t)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __d)
              (cxx_unary_expr
                (type_ref _PTp))))))
      (cxx_method _M_type_size
        (type_ref std::ptrdiff_t)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (binary_operator
              (decl_ref_expr __d)
              (cxx_unary_expr
                (type_ref _PTp))))))
      (cxx_access_spec_decl)
      (constructor __atomic_base<type-parameter-0-0 *>)
      (destructor ~__atomic_base<type-parameter-0-0 *>)
      (constructor __atomic_base<type-parameter-0-0 *>
        (parm_decl
          (type_ref __atomic_base<type-parameter-0-0 *>)))
      (cxx_method operator=
        (type_ref __atomic_base<type-parameter-0-0 *>)
        (parm_decl
          (type_ref __atomic_base<type-parameter-0-0 *>)))
      (cxx_method operator=
        (type_ref __atomic_base<type-parameter-0-0 *>)
        (parm_decl
          (type_ref __atomic_base<type-parameter-0-0 *>)))
      (constructor __atomic_base<type-parameter-0-0 *>
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (member_ref _M_p)
        (decl_ref_expr __p)
        (compound_stmt))
      (conversion_function operator type-parameter-0-0 *
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref load))))))
      (conversion_function operator type-parameter-0-0 *
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref load))))))
      (cxx_method operator=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref store))
            (decl_ref_expr __p))
          (return_stmt
            (decl_ref_expr __p))))
      (cxx_method operator=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (compound_stmt
          (call_expr
            (member_ref_expr
              (overloaded_decl_ref store))
            (decl_ref_expr __p))
          (return_stmt
            (decl_ref_expr __p))))
      (cxx_method operator++
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_add))
              (integer_literal 1)))))
      (cxx_method operator++
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_add))
              (integer_literal 1)))))
      (cxx_method operator--
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_sub))
              (integer_literal 1)))))
      (cxx_method operator--
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl)
        (compound_stmt
          (return_stmt
            (call_expr
              (member_ref_expr
                (overloaded_decl_ref fetch_sub))
              (integer_literal 1)))))
      (cxx_method operator++
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (integer_literal 1))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator++
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (integer_literal 1))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator--
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (integer_literal 1))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator--
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (integer_literal 1))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator+=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator+=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_add_fetch
              (decl_ref_expr __atomic_add_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator-=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method operator-=
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_sub_fetch
              (decl_ref_expr __atomic_sub_fetch)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr memory_order_seq_cst))))))
      (cxx_method is_lock_free
        (compound_stmt
          (return_stmt
            (call_expr __atomic_is_lock_free
              (decl_ref_expr __atomic_is_lock_free)
              (cxx_unary_expr
                (paren_expr
                  (member_ref_expr _M_p)))
              (cxx_reinterpret_cast_expr
                (unary_operator
                  (cxx_unary_expr
                    (paren_expr
                      (member_ref_expr _M_p)))))))))
      (cxx_method is_lock_free
        (compound_stmt
          (return_stmt
            (call_expr __atomic_is_lock_free
              (decl_ref_expr __atomic_is_lock_free)
              (cxx_unary_expr
                (paren_expr
                  (member_ref_expr _M_p)))
              (cxx_reinterpret_cast_expr
                (unary_operator
                  (cxx_unary_expr
                    (paren_expr
                      (member_ref_expr _M_p)))))))))
      (cxx_method store
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_store_n
            (decl_ref_expr __atomic_store_n)
            (call_expr
              (member_ref_expr _M_p)
              (decl_ref_expr
                (overloaded_decl_ref operator&)))
            (decl_ref_expr __p)
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_method store
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acquire)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_consume)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (call_expr __atomic_store_n
            (decl_ref_expr __atomic_store_n)
            (call_expr
              (member_ref_expr _M_p)
              (decl_ref_expr
                (overloaded_decl_ref operator&)))
            (decl_ref_expr __p)
            (cxx_functional_cast_expr
              (decl_ref_expr __m)))))
      (cxx_method load
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_load_n
              (decl_ref_expr __atomic_load_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method load
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (decl_stmt
            (var_decl __b
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_load_n
              (decl_ref_expr __atomic_load_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method exchange
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_exchange_n
              (decl_ref_expr __atomic_exchange_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __p)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method exchange
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __p
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_exchange_n
              (decl_ref_expr __atomic_exchange_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __p)
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method compare_exchange_strong
        (parm_decl __p1
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __p2
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __p1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __p2)
              (integer_literal 0)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method compare_exchange_strong
        (parm_decl __p1
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __p2
          (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type))
        (parm_decl __m1
          (type_ref std::memory_order))
        (parm_decl __m2
          (type_ref std::memory_order))
        (compound_stmt
          (decl_stmt
            (var_decl __b2
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m2)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (decl_stmt
            (var_decl __b1
              (type_ref std::memory_order)
              (call_expr operator&
                (decl_ref_expr __m1)
                (decl_ref_expr operator&)
                (decl_ref_expr __memory_order_mask))))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_release)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr memory_order_acq_rel)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (cxx_functional_cast_expr
                      (binary_operator
                        (decl_ref_expr __b2)
                        (decl_ref_expr __b1)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (call_expr __atomic_compare_exchange_n
              (decl_ref_expr __atomic_compare_exchange_n)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (decl_ref_expr __p1)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (decl_ref_expr __p2)
              (integer_literal 0)
              (cxx_functional_cast_expr
                (decl_ref_expr __m1))
              (cxx_functional_cast_expr
                (decl_ref_expr __m2))))))
      (cxx_method fetch_add
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_add
              (decl_ref_expr __atomic_fetch_add)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_add
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_add
              (decl_ref_expr __atomic_fetch_add)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_sub
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_sub
              (decl_ref_expr __atomic_fetch_sub)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))
      (cxx_method fetch_sub
        (type_ref std::__atomic_base<type-parameter-0-0 *>::__pointer_type)
        (parm_decl __d
          (type_ref std::ptrdiff_t))
        (parm_decl __m
          (type_ref std::memory_order)
          (decl_ref_expr memory_order_seq_cst))
        (compound_stmt
          (return_stmt
            (call_expr __atomic_fetch_sub
              (decl_ref_expr __atomic_fetch_sub)
              (call_expr
                (member_ref_expr _M_p)
                (decl_ref_expr
                  (overloaded_decl_ref operator&)))
              (call_expr
                (member_ref_expr
                  (overloaded_decl_ref _M_type_size))
                (decl_ref_expr __d))
              (cxx_functional_cast_expr
                (decl_ref_expr __m))))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/bits/shared_ptr_atomic.h
  (namespace std
    (visibility_attr default)
    (struct_decl _Sp_locker
      (constructor _Sp_locker
        (parm_decl
          (type_ref struct std::_Sp_locker)))
      (cxx_method operator=
        (type_ref struct std::_Sp_locker)
        (parm_decl
          (type_ref struct std::_Sp_locker)))
      (constructor _Sp_locker
        (parm_decl))
      (constructor _Sp_locker
        (parm_decl)
        (parm_decl))
      (destructor ~_Sp_locker)
      (cxx_access_spec_decl)
      (field_decl _M_key1)
      (field_decl _M_key2))
    (function_template atomic_is_lock_free
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (binary_operator
            (call_expr __gthread_active_p
              (decl_ref_expr __gthread_active_p))
            (integer_literal 0)))))
    (function_template atomic_is_lock_free
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_is_lock_free)
              (type_ref _Tp)
              (decl_ref_expr __default_lock_policy))
            (decl_ref_expr __p)))))
    (function_template atomic_load_explicit
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (return_stmt
          (unary_operator
            (decl_ref_expr __p)))))
    (function_template atomic_load
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_load_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_load_explicit
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (return_stmt
          (unary_operator
            (decl_ref_expr __p)))))
    (function_template atomic_load
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_load_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_store_explicit
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __p))
          (decl_ref_expr __r))))
    (function_template atomic_store
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref atomic_store_explicit))
          (decl_ref_expr __p)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __r))
          (decl_ref_expr memory_order_seq_cst))))
    (function_template atomic_store_explicit
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __p))
          (decl_ref_expr __r))))
    (function_template atomic_store
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (call_expr
          (decl_ref_expr
            (namespace_ref std)
            (overloaded_decl_ref atomic_store_explicit))
          (decl_ref_expr __p)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (decl_ref_expr __r))
          (decl_ref_expr memory_order_seq_cst))))
    (function_template atomic_exchange_explicit
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __p))
          (decl_ref_expr __r))
        (return_stmt
          (decl_ref_expr __r))))
    (function_template atomic_exchange
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __r
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_exchange_explicit))
            (decl_ref_expr __p)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r))
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_exchange_explicit
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p))))
        (call_expr
          (member_ref_expr
            (decl_ref_expr __p))
          (decl_ref_expr __r))
        (return_stmt
          (decl_ref_expr __r))))
    (function_template atomic_exchange
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __r
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_exchange_explicit))
            (decl_ref_expr __p)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r))
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_compare_exchange_strong_explicit
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __v
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __w
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl
        (type_ref std::memory_order))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __x
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p)
              (decl_ref_expr __v))))
        (decl_stmt
          (var_decl __less
            (template_ref owner_less)
            (template_ref shared_ptr)
            (type_ref _Tp)))
        (if_stmt
          (binary_operator
            (binary_operator
              (call_expr
                (unary_operator
                  (decl_ref_expr __p))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (unary_operator
                  (decl_ref_expr __v)))
              (unary_operator
                (call_expr __less
                  (decl_ref_expr __less)
                  (unary_operator
                    (decl_ref_expr __p))
                  (unary_operator
                    (decl_ref_expr __v)))))
            (unary_operator
              (call_expr __less
                (decl_ref_expr __less)
                (unary_operator
                  (decl_ref_expr __v))
                (unary_operator
                  (decl_ref_expr __p)))))
          (compound_stmt
            (binary_operator
              (decl_ref_expr __x)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (unary_operator
                  (decl_ref_expr __p))))
            (binary_operator
              (unary_operator
                (decl_ref_expr __p))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __w)))
            (return_stmt
              (cxx_bool_literal_expr))))
        (binary_operator
          (decl_ref_expr __x)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (unary_operator
              (decl_ref_expr __v))))
        (binary_operator
          (unary_operator
            (decl_ref_expr __v))
          (unary_operator
            (decl_ref_expr __p)))
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_template atomic_compare_exchange_strong
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __v
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __w
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_strong_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr memory_order_seq_cst)
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_compare_exchange_weak_explicit
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __v
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __w
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __success
        (type_ref std::memory_order))
      (parm_decl __failure
        (type_ref std::memory_order))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_strong_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr __success)
            (decl_ref_expr __failure)))))
    (function_template atomic_compare_exchange_weak
      (template_type_parameter _Tp)
      (parm_decl __p
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __v
        (template_ref shared_ptr)
        (type_ref _Tp))
      (parm_decl __w
        (template_ref shared_ptr)
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_weak_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr memory_order_seq_cst)
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_compare_exchange_strong_explicit
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __v
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __w
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl
        (type_ref std::memory_order))
      (parm_decl
        (type_ref std::memory_order))
      (compound_stmt
        (decl_stmt
          (var_decl __x
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (decl_stmt
          (var_decl __lock
            (type_ref struct std::_Sp_locker)
            (init_list_expr
              (decl_ref_expr __p)
              (decl_ref_expr __v))))
        (decl_stmt
          (var_decl __less
            (template_ref owner_less)
            (template_ref __shared_ptr)
            (type_ref _Tp)
            (decl_ref_expr _Lp)))
        (if_stmt
          (binary_operator
            (binary_operator
              (call_expr
                (unary_operator
                  (decl_ref_expr __p))
                (decl_ref_expr
                  (overloaded_decl_ref operator==))
                (unary_operator
                  (decl_ref_expr __v)))
              (unary_operator
                (call_expr __less
                  (decl_ref_expr __less)
                  (unary_operator
                    (decl_ref_expr __p))
                  (unary_operator
                    (decl_ref_expr __v)))))
            (unary_operator
              (call_expr __less
                (decl_ref_expr __less)
                (unary_operator
                  (decl_ref_expr __v))
                (unary_operator
                  (decl_ref_expr __p)))))
          (compound_stmt
            (binary_operator
              (decl_ref_expr __x)
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (unary_operator
                  (decl_ref_expr __p))))
            (binary_operator
              (unary_operator
                (decl_ref_expr __p))
              (call_expr
                (decl_ref_expr
                  (namespace_ref std)
                  (overloaded_decl_ref move))
                (decl_ref_expr __w)))
            (return_stmt
              (cxx_bool_literal_expr))))
        (binary_operator
          (decl_ref_expr __x)
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref move))
            (unary_operator
              (decl_ref_expr __v))))
        (binary_operator
          (unary_operator
            (decl_ref_expr __v))
          (unary_operator
            (decl_ref_expr __p)))
        (return_stmt
          (cxx_bool_literal_expr))))
    (function_template atomic_compare_exchange_strong
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __v
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __w
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_strong_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr memory_order_seq_cst)
            (decl_ref_expr memory_order_seq_cst)))))
    (function_template atomic_compare_exchange_weak_explicit
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __v
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __w
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __success
        (type_ref std::memory_order))
      (parm_decl __failure
        (type_ref std::memory_order))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_strong_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr __success)
            (decl_ref_expr __failure)))))
    (function_template atomic_compare_exchange_weak
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (parm_decl __p
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __v
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (parm_decl __w
        (template_ref __shared_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp))
      (compound_stmt
        (return_stmt
          (call_expr
            (decl_ref_expr
              (namespace_ref std)
              (overloaded_decl_ref atomic_compare_exchange_weak_explicit))
            (decl_ref_expr __p)
            (decl_ref_expr __v)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __w))
            (decl_ref_expr memory_order_seq_cst)
            (decl_ref_expr memory_order_seq_cst))))))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/backward/auto_ptr.h
  (namespace std
    (visibility_attr default)
    (class_template auto_ptr_ref
      (template_type_parameter _Tp1)
      (field_decl _M_ptr
        (type_ref _Tp1))
      (constructor auto_ptr_ref<_Tp1>
        (parm_decl __p
          (type_ref _Tp1))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (compound_stmt)))
    (class_template auto_ptr
      (template_type_parameter _Tp)
      (cxx_access_spec_decl)
      (field_decl _M_ptr
        (type_ref _Tp))
      (cxx_access_spec_decl)
      (typedef_decl element_type
        (type_ref _Tp))
      (constructor auto_ptr<type-parameter-0-0>
        (parm_decl __p
          (type_ref std::auto_ptr::element_type)
          (integer_literal 0))
        (member_ref _M_ptr)
        (decl_ref_expr __p)
        (compound_stmt))
      (constructor auto_ptr<type-parameter-0-0>
        (parm_decl __a
          (type_ref auto_ptr<type-parameter-0-0>))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (function_template auto_ptr<type-parameter-0-0>
        (template_type_parameter _Tp1)
        (parm_decl __a
          (template_ref auto_ptr)
          (type_ref _Tp1))
        (member_ref _M_ptr)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __a)))
        (compound_stmt))
      (cxx_method operator=
        (type_ref auto_ptr<type-parameter-0-0>)
        (parm_decl __a
          (type_ref auto_ptr<type-parameter-0-0>))
        (compound_stmt
          (call_expr reset
            (member_ref_expr reset)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator=
        (template_type_parameter _Tp1)
        (type_ref auto_ptr<type-parameter-0-0>)
        (parm_decl __a
          (template_ref auto_ptr)
          (type_ref _Tp1))
        (compound_stmt
          (call_expr reset
            (member_ref_expr reset)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __a))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (destructor ~auto_ptr<type-parameter-0-0>
        (compound_stmt
          (cxx_delete_expr
            (member_ref_expr _M_ptr))))
      (cxx_method operator*
        (type_ref std::auto_ptr::element_type)
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (member_ref_expr _M_ptr)
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (integer_literal 0)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (unary_operator
              (member_ref_expr _M_ptr)))))
      (cxx_method operator->
        (type_ref std::auto_ptr::element_type)
        (compound_stmt
          (do_stmt
            (compound_stmt
              (if_stmt
                (binary_operator
                  (call_expr __builtin_is_constant_evaluated
                    (decl_ref_expr __builtin_is_constant_evaluated))
                  (unary_operator
                    (call_expr
                      (call_expr
                        (member_ref_expr _M_ptr)
                        (decl_ref_expr
                          (overloaded_decl_ref operator!=))
                        (integer_literal 0)))))
                (call_expr __builtin_unreachable
                  (decl_ref_expr __builtin_unreachable))))
            (cxx_bool_literal_expr))
          (return_stmt
            (member_ref_expr _M_ptr))))
      (cxx_method get
        (type_ref std::auto_ptr::element_type)
        (compound_stmt
          (return_stmt
            (member_ref_expr _M_ptr))))
      (cxx_method release
        (type_ref std::auto_ptr::element_type)
        (compound_stmt
          (decl_stmt
            (var_decl __tmp
              (type_ref std::auto_ptr::element_type)
              (member_ref_expr _M_ptr)))
          (binary_operator
            (member_ref_expr _M_ptr)
            (integer_literal 0))
          (return_stmt
            (decl_ref_expr __tmp))))
      (cxx_method reset
        (parm_decl __p
          (type_ref std::auto_ptr::element_type)
          (integer_literal 0))
        (compound_stmt
          (if_stmt
            (call_expr
              (decl_ref_expr __p)
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (member_ref_expr _M_ptr))
            (compound_stmt
              (cxx_delete_expr
                (member_ref_expr _M_ptr))
              (binary_operator
                (member_ref_expr _M_ptr)
                (decl_ref_expr __p))))))
      (constructor auto_ptr<type-parameter-0-0>
        (parm_decl __ref
          (template_ref auto_ptr_ref)
          (type_ref std::auto_ptr::element_type))
        (member_ref _M_ptr)
        (member_ref_expr
          (decl_ref_expr __ref))
        (compound_stmt))
      (cxx_method operator=
        (type_ref auto_ptr<type-parameter-0-0>)
        (parm_decl __ref
          (template_ref auto_ptr_ref)
          (type_ref std::auto_ptr::element_type))
        (compound_stmt
          (if_stmt
            (call_expr
              (member_ref_expr
                (decl_ref_expr __ref))
              (decl_ref_expr
                (overloaded_decl_ref operator!=))
              (call_expr
                (member_ref_expr
                  (cxx_this_expr))))
            (compound_stmt
              (cxx_delete_expr
                (member_ref_expr _M_ptr))
              (binary_operator
                (member_ref_expr _M_ptr)
                (member_ref_expr
                  (decl_ref_expr __ref)))))
          (return_stmt
            (unary_operator
              (cxx_this_expr)))))
      (function_template operator auto_ptr_ref<type-parameter-1-0>
        (template_type_parameter _Tp1)
        (template_ref auto_ptr_ref)
        (type_ref _Tp1)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref auto_ptr_ref)
              (type_ref _Tp1)
              (call_expr
                (member_ref_expr
                  (cxx_this_expr)))))))
      (function_template operator auto_ptr<type-parameter-1-0>
        (template_type_parameter _Tp1)
        (template_ref auto_ptr)
        (type_ref _Tp1)
        (compound_stmt
          (return_stmt
            (call_expr
              (template_ref auto_ptr)
              (type_ref _Tp1)
              (call_expr
                (member_ref_expr
                  (cxx_this_expr))))))))
    (class_decl auto_ptr
      (cxx_access_spec_decl)
      (typedef_decl element_type))
    (function_template __shared_count<_Lp>
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_count)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (namespace_ref std)
        (template_ref auto_ptr)
        (type_ref _Tp))
      (member_ref _M_pi)
      (cxx_new_expr
        (template_ref _Sp_counted_ptr)
        (type_ref _Tp)
        (decl_ref_expr _Lp)
        (call_expr
          (member_ref_expr
            (decl_ref_expr __r))))
      (compound_stmt
        (call_expr
          (member_ref_expr
            (decl_ref_expr __r)))))
    (function_template __shared_ptr<_Tp, _Lp>
      (template_type_parameter _Tp1)
      (template_type_parameter)
      (template_type_parameter _Tp)
      (template_non_type_parameter _Lp)
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (decl_ref_expr _Lp)
      (parm_decl __r
        (namespace_ref std)
        (template_ref auto_ptr)
        (type_ref _Tp1))
      (member_ref _M_ptr)
      (call_expr
        (member_ref_expr
          (decl_ref_expr __r)))
      (member_ref _M_refcount)
      (compound_stmt
        (decl_stmt
          (static_assert
            (binary_operator
              (cxx_unary_expr
                (type_ref _Tp1))
              (integer_literal 0))
            (string_literal "incomplete type")))
        (decl_stmt
          (var_decl __tmp
            (type_ref _Tp1)
            (call_expr
              (member_ref_expr
                (decl_ref_expr __r)))))
        (binary_operator
          (member_ref_expr _M_refcount)
          (call_expr
            (template_ref __shared_count)
            (decl_ref_expr _Lp)
            (call_expr
              (decl_ref_expr
                (namespace_ref std)
                (overloaded_decl_ref move))
              (decl_ref_expr __r))))
        (call_expr
          (member_ref_expr
            (overloaded_decl_ref _M_enable_shared_from_this_with))
          (decl_ref_expr __tmp))))
    (function_template shared_ptr<_Tp>
      (template_type_parameter _Tp1)
      (template_type_parameter)
      (template_type_parameter _Tp)
      (template_ref shared_ptr)
      (type_ref _Tp)
      (parm_decl __r
        (namespace_ref std)
        (template_ref auto_ptr)
        (type_ref _Tp1))
      (template_ref __shared_ptr)
      (type_ref _Tp)
      (call_expr
        (decl_ref_expr
          (namespace_ref std)
          (overloaded_decl_ref move))
        (decl_ref_expr __r))
      (compound_stmt))
    (function_template unique_ptr<_Tp, _Dp>
      (template_type_parameter _Up)
      (template_type_parameter)
      (template_type_parameter _Tp)
      (template_type_parameter _Dp)
      (template_ref unique_ptr)
      (type_ref _Tp)
      (type_ref _Dp)
      (parm_decl __u
        (template_ref auto_ptr)
        (type_ref _Up))
      (member_ref _M_t)
      (call_expr
        (member_ref_expr
          (decl_ref_expr __u)))
      (call_expr
        (type_ref std::unique_ptr::deleter_type))
      (compound_stmt)))
  ; /../lib/gcc/x86_64-linux-gnu/11/../../../../include/c++/11/memory
  (namespace std
    (visibility_attr default)
    (enum_decl pointer_safety
      (enum_constant_decl relaxed)
      (enum_constant_decl preferred)
      (enum_constant_decl strict))
    (function_decl declare_reachable
      (parm_decl)
      (compound_stmt))
    (function_template undeclare_reachable
      (template_type_parameter _Tp)
      (type_ref _Tp)
      (parm_decl __p
        (type_ref _Tp))
      (compound_stmt
        (return_stmt
          (decl_ref_expr __p))))
    (function_decl declare_no_pointers
      (parm_decl)
      (parm_decl
        (type_ref std::size_t))
      (compound_stmt))
    (function_decl undeclare_no_pointers
      (parm_decl)
      (parm_decl
        (type_ref std::size_t))
      (compound_stmt))
    (function_decl get_pointer_safety
      (type_ref enum std::pointer_safety)
      (compound_stmt
        (return_stmt
          (decl_ref_expr relaxed
            (type_ref enum std::pointer_safety))))))
  ; /home/david/src/nginx-datadog/scratch/scratch.cpp
  (namespace ns
    (struct_decl bar_t)
    (struct_decl foo_t
      (field_decl x)
      (field_decl y
        (type_ref struct ns::bar_t))))
  ; /home/david/src/nginx-datadog/scratch/scratch.cpp
  (namespace derp
    (namespace_alias other
      (namespace_ref ns))
    (function_decl do_thing
      (parm_decl foo
        (namespace_ref other)
        (type_ref struct ns::foo_t))
      (parm_decl value
        (namespace_ref other)
        (type_ref struct ns::foo_t))
      (compound_stmt
        (return_stmt
          (binary_operator
            (member_ref_expr x
              (decl_ref_expr foo))
            (member_ref_expr x
              (decl_ref_expr value))))))
    (function_decl foo
      (parm_decl p
        (namespace_ref std)
        (template_ref unique_ptr)
        (namespace_ref other)
        (type_ref struct ns::foo_t))
      (compound_stmt
        (return_stmt
          (binary_operator
            (member_ref_expr x
              (call_expr operator->
                (decl_ref_expr p)
                (decl_ref_expr operator->)))
            (integer_literal 0)))))
    (function_decl bar
      (parm_decl p
        (namespace_ref std)
        (template_ref unique_ptr)
        (namespace_ref other)
        (type_ref struct ns::foo_t))
      (compound_stmt
        (return_stmt
          (binary_operator
            (member_ref_expr x
              (paren_expr
                (call_expr operator*
                  (decl_ref_expr p)
                  (decl_ref_expr operator*))))
            (integer_literal 0)))))))

