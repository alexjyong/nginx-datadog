load_module modules/ngx_http_datadog_module.so;

# worker_processes auto;
worker_processes 2;
pid        /tmp/nginx.pid;

# error_log  /dev/stderr warn;
error_log  /dev/stderr debug;

events {
    worker_connections 8192;
}

http {
  default_type application/octet-stream;

  # Needed to add this.
  resolver 127.0.0.11; # Docker's default resolver

  client_max_body_size 1m;
  client_body_buffer_size 1m;

  client_body_in_single_buffer on;

  log_format   log_main '$time_local, $pid, $remote_addr, $http_referer, $http_user_agent, $request_time, $upstream_response_time, $request_time, $request_length, $bytes_sent, $status, $request_method, $content_type, $host, $http_x_target_tmap_host, $server_port, $request_uri, $uri';

  access_log   /dev/stdout  log_main;

  client_body_temp_path /tmp/client_temp;
  proxy_temp_path       /tmp/proxy_temp_path;
  fastcgi_temp_path     /tmp/fastcgi_temp;
  uwsgi_temp_path       /tmp/uwsgi_temp;
  scgi_temp_path        /tmp/scgi_temp;

  ignore_invalid_headers on;
  underscores_in_headers on;

  datadog_enable;
  # datadog_trace_locations off;
  datadog_trace_locations on;

  server {
    # listen 8080;
    listen 80;

    access_log   /dev/stdout  log_main;
    server_tokens off;
    log_subrequest on;
    auth_delay 3s;

    location / {
      auth_request /auth;
      datadog_operation_name $http_x_target_host;
      access_log   /dev/stdout  log_main;

      limit_except GET POST {
        deny all;
      }

      proxy_pass http://$http_x_target_host$request_uri;

      # proxy_ssl_protocols TLSv1.2 TLSv1.3;
      # proxy_ssl_name $http_x_target_host;
      # proxy_ssl_server_name on;
      # proxy_ssl_verify on;
      # proxy_ssl_trusted_certificate /etc/ssl/certs/public-ca.crt;
    }

    location /auth {
      internal;

      access_log   /dev/stdout  log_main;

      rewrite ^(.*)$ /valid?auth=$http_x_auth break;

      proxy_method GET;
      proxy_pass_request_body off;
      proxy_pass_request_headers off;

      proxy_pass http://myauth;
    }
  }
}
